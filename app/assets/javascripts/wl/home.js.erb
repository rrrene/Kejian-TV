<% url = KejianTv::Application.routes.url_helpers %>

(function () {
    WEBLAB.namespace("WEBLAB.utils").Utils = function () {
        this.stopEvent = this.removeListener = this.addListener = null
    };
    var a = WEBLAB.utils.Utils;
    "function" === typeof window.addEventListener ? (a.addListener = function (a, b, d) {
        a.addEventListener(b, d, !1)
    }, a.removeListener = function (a, b, d) {
        a.removeEventListener(b, d, !1)
    }) : "function" === typeof document.attachEvent ? (a.addListener = function (a, b, d) {
        a.attachEvent("on" + b, d)
    }, a.removeListener = function (a, b, d) {
        a.detachEvent("on" + b, d)
    }) : (a.addListener = function (a, b, d) {
        a["on" + b] = d
    }, a.removeListener = function (a, b) {
        a["on" + b] = null
    });
    a.stopEvent = function (a) {
        "function" === typeof a.preventDefault && "function" === typeof a.stopPropagation && (a.preventDefault(), a.stopPropagation());
        if ("boolean" === typeof a.returnValue && "boolean" === typeof a.cancelBubble) a.returnValue = !1, a.cancelBubble = !0
    };
    a.destroyIfExists = function (a) {
        null !== a && void 0 !== a && a.destroy instanceof Function && a.destroy()
    };
    a.destroyArrayIfExists = function (a) {
        if (null !== a && void 0 !== a && a instanceof Array) for (var b = a.length, d = 0; d < b; d++) {
            var c = a[d];
            null !== c && void 0 !== c && c.destroy instanceof Function && c.destroy();
            a[d] = null
        }
    };
    if (!Function.prototype.bind) Function.prototype.bind = function (a) {
        if ("function" !== typeof this) throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
        var b = Array.prototype.slice.call(arguments, 1),
            d = this,
            c = function () {}, e = function () {
                return d.apply(this instanceof c ? this : a || window, b.concat(Array.prototype.slice.call(arguments)))
            };
        c.prototype = this.prototype;
        e.prototype = new c;
        return e
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.events"),
        f = WEBLAB.namespace("WEBLAB.common.singletons");
    if (void 0 === a.SoundListeners) {
        var b = function () {};
        a.SoundListeners = b;
        b.soundFunctions = {};
        b.randomSoundFunctions = {};
        b.STANDARD_BIG_BUTTON_CLICK = "common/standardBigButton/click";
        b.STANDARD_BIG_BUTTON_CLICK_SOUNDS = ["common/bigButton/click1", "common/bigButton/click2", "common/bigButton/click3"];
        b.STANDARD_BIG_BUTTON_ROLLOVER = "common/standardBigButton/rollover";
        b.STANDARD_BIG_BUTTON_ROLLOVER_SOUNDS = ["common/bigButton/rollover1",
            "common/bigButton/rollover2", "common/bigButton/rollover3"];
        b.STANDARD_SMALL_BUTTON_CLICK = "common/standardSmallButton/click";
        b.STANDARD_SMALL_BUTTON_CLICK_SOUNDS = ["common/smallButton/click1", "common/smallButton/click2", "common/smallButton/click3"];
        b.STANDARD_SMALL_BUTTON_ROLLOVER = "common/standardSmallButton/rollover";
        b.STANDARD_SMALL_BUTTON_ROLLOVER_SOUNDS = ["common/smallButton/rollover1", "common/smallButton/rollover2", "common/smallButton/rollover3"];
        b.NAV_BUTTON_CLICK = "common/navButton/click";
        b.NAV_BUTTON_CLICK_SOUNDS = ["common/navButton/click1", "common/navButton/click2", "common/navButton/click3"];
        b.NAV_BUTTON_ROLLOVER = "common/navButton/rollover1";
        b.NAV_BUTTON_ROLLOVER_SOUNDS = ["common/navButton/rollover1", "common/navButton/rollover2", "common/navButton/rollover3"];
        b.createRandomSoundListener = function (a, c, e) {
            b.randomSoundFunctions[a] = function (a) {
                var b = Math.floor(Math.random() * c.length);
                f.SiteManagerBasic.getSoundManager().playSound(c[b], !1, e, a)
            }
        };
        b.addSoundListener = function (a, c, e, g, h) {
            void 0 === b.soundFunctions[e] && (b.soundFunctions[e] = function (a) {
                f.SiteManagerBasic.getSoundManager().playSound(e, !1, g, a)
            });
            if (void 0 === a.__soundListeners) a.__soundListeners = {};
            a.__soundListeners[e] = function () {
                b.soundFunctions[e](h)
            };
            a.addEventListener(c, a.__soundListeners[e], !1)
        };
        b.removeSoundListener = function (a, b, e) {
            a.removeEventListener(b, a.__soundListeners[e], !1)
        };
        b.addRandomSoundListener = function (a, c, e, g) {
            var h = b.randomSoundFunctions[e];
            h || console.warn("ERROR : soundFunction was null for soundID : ", e);
            if (void 0 === a.__soundListeners) a.__soundListeners = {};
            a.__soundListeners[e] = function () {
                h(g)
            };
            a.addEventListener(c, a.__soundListeners[e], !1)
        };
        b.removeRandomSoundListener = function (a, b, e) {
            a.removeEventListener(b, a.__soundListeners[e], !1)
        };
        b.createClickSound = function (a, c, e) {
            b.addSoundListener(a, "click", c, 1, e)
        };
        b.createRolloverSound = function (a, c, e) {
            b.addSoundListener(a, "mouseover", c, 1, e)
        };
        b.addStandardBigButtonListeners = function (a, c) {
            b.addRandomSoundListener(a, "click", b.STANDARD_BIG_BUTTON_CLICK, c)
        };
        b.removeStandardBigButtonListeners = function (a, c) {
            b.removeRandomSoundListener(a,
                "click", b.STANDARD_BIG_BUTTON_CLICK, c)
        };
        b.addStandardSmallButtonListeners = function (a, c) {
            b.addRandomSoundListener(a, "click", b.STANDARD_SMALL_BUTTON_CLICK, c)
        };
        b.removeStandardSmallButtonListeners = function (a, c) {
            b.removeRandomSoundListener(a, "click", b.STANDARD_SMALL_BUTTON_CLICK, c)
        };
        b.addStandardNavButtonListeners = function (a, c) {
            b.addRandomSoundListener(a, "click", b.NAV_BUTTON_CLICK, c)
        };
        b.removeStandardNavButtonListeners = function (a, c) {
            b.removeRandomSoundListener(a, "click", b.NAV_BUTTON_CLICK, c)
        };
        b.createRandomSoundListener(b.STANDARD_BIG_BUTTON_CLICK,
        b.STANDARD_BIG_BUTTON_CLICK_SOUNDS, 1);
        b.createRandomSoundListener(b.STANDARD_BIG_BUTTON_ROLLOVER, b.STANDARD_BIG_BUTTON_ROLLOVER_SOUNDS, 1);
        b.createRandomSoundListener(b.STANDARD_SMALL_BUTTON_CLICK, b.STANDARD_SMALL_BUTTON_CLICK_SOUNDS, 1);
        b.createRandomSoundListener(b.STANDARD_SMALL_BUTTON_ROLLOVER, b.STANDARD_SMALL_BUTTON_ROLLOVER_SOUNDS, 1);
        b.createRandomSoundListener(b.STANDARD_SMALL_BUTTON_CLICK, b.STANDARD_SMALL_BUTTON_CLICK_SOUNDS, 1);
        b.createRandomSoundListener(b.STANDARD_SMALL_BUTTON_ROLLOVER, b.STANDARD_SMALL_BUTTON_ROLLOVER_SOUNDS,
        1);
        b.createRandomSoundListener(b.NAV_BUTTON_CLICK, b.NAV_BUTTON_CLICK_SOUNDS, 1);
        b.createRandomSoundListener(b.NAV_BUTTON_ROLLOVER, b.NAV_BUTTON_ROLLOVER_SOUNDS, 1)
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.htmldom"),
        f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    if (void 0 === a.ElementUtils) {
        var b = function () {};
        a.ElementUtils = b;
        b.addClass = function (a, c, e) {
            0 < parseFloat(e) ? (c = f.createListenerFunctionWithArguments(this, this.addClass, [a, c]), setTimeout(c, e)) : b.hasClass(a, c) || (a.className += (a.className ? " " : "") + c);
            return a
        };
        b.hasClass = function (a, b) {
            try {
                return RegExp("(\\s|^)" + b + "(\\s|$)").test(a.className)
            } catch (e) {
                console.error("ElementUtils.hasClass :: error : ",
                e)
            }
            return !1
        };
        b.removeClass = function (a, c, e) {
            if (0 < parseFloat(e)) c = f.createListenerFunctionWithArguments(this, this.removeClass, [a, c]), setTimeout(c, e);
            else if (b.hasClass(a, c)) a.className = a.className.replace(RegExp("(\\s|^)" + c + "(\\s|$)"), " ").replace(/^\s+|\s+$/g, "");
            return a
        };
        b.toggleClass = function (a, c) {
            b.hasClass(a, c) ? b.removeClass(a, c) : b.addClass(a, c);
            return a
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.data");
    if (void 0 === a.NumberFunctions) {
        var f = function () {};
        a.NumberFunctions = f;
        f.getPaddedNumber = function (a, d) {
            for (var c = a.toString(), e = c.length; e < d; e++) c = "0" + c;
            return c
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.math");
    if (void 0 === a.BpmFunctions) {
        var f = function () {};
        a.BpmFunctions = f;
        f.getBeatLength = function (a, d) {
            return 240 * (null == d ? 0.25 : d) / a
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.math");
    if (void 0 === a.Point) {
        var f = function () {
            this.y = this.x = 0
        };
        a.Point = f;
        f.create = function (a, d) {
            var c = new f;
            c.x = null != a ? a : 0;
            c.y = null != d ? d : 0;
            return c
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.math"),
        f = WEBLAB.namespace("WEBLAB.utils.data").NumberFunctions;
    if (void 0 === a.ColorBlender) {
        var b = function () {};
        a.ColorBlender = b;
        b.getBlendedHexColor = function (a, b, e) {
            var g = parseInt(b.substring(1, 3), 16),
                h = parseInt(b.substring(3, 5), 16),
                b = parseInt(b.substring(5, 7), 16),
                l = parseInt(e.substring(1, 3), 16),
                k = parseInt(e.substring(3, 5), 16),
                e = parseInt(e.substring(5, 7), 16),
                g = "#" + f.getPaddedNumber(Math.round((1 - a) * g + a * l).toString(16), 2),
                g = g + f.getPaddedNumber(Math.round((1 - a) * h + a * k).toString(16), 2);
            return g += f.getPaddedNumber(Math.round((1 - a) * b + a * e).toString(16), 2)
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.math");
    if (void 0 === a.SimpleTrig) {
        var f = function () {};
        a.SimpleTrig = f;
        f.getAngle = function (a, d, c) {
            c = c || !1;
            a = Math.atan2(a.y - d.y, a.x - d.x);
            return c ? f.toDegrees(a) : a
        };
        f.getDistance = function (a, d) {
            var c = d.x - a.x,
                e = d.y - a.y;
            return Math.sqrt(c * c + e * e)
        };
        f.getPointOnHypoteneuse = function (a, d, c) {
            var e = Math.sin(d) * c,
                c = Math.sqrt(c * c - e * e);
            return {
                x: 1.5 < d || -1.5 > d ? a.x + c : a.x - c,
                y: a.y - e
            }
        };
        f.getPointsOnACircle = function (a, d, c) {
            for (var e = [], g = 2 * Math.PI / c, h = 0; h < c; ++h) e[h] = f.getPointOnACircle(a,
            d, g * h);
            return e
        };
        f.getPointOnACircle = function (a, d, c) {
            newX = a * Math.cos(c) + d.x;
            newY = a * Math.sin(c) + d.y;
            return {
                x: newX,
                y: newY
            }
        };
        f.toDegrees = function (a) {
            return 180 * a / Math.PI
        };
        f.toRadians = function (a) {
            return a / 180 * Math.PI
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.data"),
        f = a.ArrayFunctions,
        b = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.MultidimensionalArrayHolder) {
        var d = function () {
            this._init()
        };
        a.MultidimensionalArrayHolder = d;
        a = d.prototype;
        a._init = function () {
            this._lengths = this._array = null;
            return this
        };
        a.getDimesionLength = function (a) {
            return this._lengths[a]
        };
        a._getArrayPosition = function (a) {
            for (var e = 0, g = 1, b = this._lengths, d = b.length; 0 <= --d;) e += g * a[d], g *= b[d];
            return e
        };
        a.getValue = function () {
            aPositions = arguments;
            return aPositions.length != this._lengths.length ? null : this._array[this._getArrayPosition(aPositions)]
        };
        a.setValue = function () {
            arguments.length == this._lengths.length + 1 && (this._array[this._getArrayPosition(arguments)] = arguments[arguments.length - 1])
        };
        a.setLengths = function (a) {
            this._lengths = a;
            for (var a = 1, e = this._lengths, g = e.length, b = 0; b < g; b++) a *= e[b];
            this._array = Array(a)
        };
        a.destroy = function () {
            b.destroyArrayIfExists(this._array);
            this._lengths = this._array = null
        };
        d.create = function () {
            aLengths = arguments;
            var a = new d;
            a.setLengths(f.copyArray(aLengths));
            return a
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.url");
    if (void 0 === a.UrlFunctions) {
        var f = function () {};
        a.UrlFunctions = f;
        f.parseQueryString = function (a) {
            var d = a,
                c = d.indexOf("?"),
                a = []; - 1 !== c && c + 1 !== d.length && (d = d.substring(c + 1, d.length), a = d.split("&"));
            d = {};
            for (c = 0; c < a.length; c++) {
                var e = a[c].split("=");
                d[e[0]] = e[1]
            }
            return d
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.loading");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    if (void 0 === a.LoadingEventTypes) {
        var f = function () {};
        a.LoadingEventTypes = f;
        f.LOADED = "loaded";
        f.ERROR = "error"
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.loading"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.loading").LoadingEventTypes;
    if (void 0 === a.SequenceLoader) {
        var c = function () {
            this._init()
        };
        a.SequenceLoader = c;
        f = c.prototype = new f;
        f._init = function () {
            this._loaders = [];
            this._waitingLoaders = [];
            this._loadingLoaders = [];
            this._isLoading = !1;
            this._continueOnError = !0;
            this._hasError = !1;
            this._numberOfConcurrentLoaders = 5;
            this._onLoadCallback = b.createListenerFunction(this, this._onLoad);
            this._onErrorCallback = b.createListenerFunction(this, this._onError);
            return this
        };
        f.getLoaderByPath = function (a) {
            for (var g = this._loaders, b = g.length, c = 0; c < b; c++) if (a === g[c]._url) return g[c];
            return null
        };
        f.addLoader = function (a) {
            this._loaders.push(a);
            this._waitingLoaders.push(a)
        };
        f.addLoaderByPath = function (e, g) {
            if ("auto" === g) {
                var b = e.substring(e.lastIndexOf(".") + 1, e.length).toLowerCase();
                switch (b) {
                    case "xml":
                        g = "xml";
                        break;
                    case "txt":
                    case "text":
                        g =
                            "text";
                        break;
                    case "json":
                        g = "json";
                        break;
                    case "jpg":
                    case "jpeg":
                    case "png":
                        g = "image";
                        break;
                    default:
                        console.error("Unknown file extension " + b + " for file " + e);
                        return
                }
            }
            switch (g) {
                case "xml":
                    b = a.XmlLoader.create(e);
                    break;
                case "text":
                    b = a.TextLoader.create(e);
                    break;
                case "json":
                    b = a.JsonLoader.create(e);
                    break;
                case "image":
                    b = a.ImageLoader.create(e);
                    break;
                default:
                    console.error("Unknown type " + g + " for file " + e);
                    return
            }
            this.addLoader(b)
        };
        f.addLoadersByPath = function (a) {
            for (var g = a.length, b = 0; b < g; b++) this.addLoaderByPath(a[b],
                "auto")
        };
        f.isLoaded = function () {
            return 0 === this._loadingLoaders.length && 0 === this._waitingLoaders.length
        };
        f.load = function () {
            if (!this._isLoading) return this._isLoading = !0, this._continueLoading(), this
        };
        f.stopLoading = function () {
            this._isLoading = !1
        };
        f._continueLoading = function () {
            if (0 === this._waitingLoaders.length && 0 === this._loadingLoaders.length) this._isLoading && this.dispatchCustomEvent(d.LOADED, null);
            else for (; this._loadingLoaders.length < this._numberOfConcurrentLoaders && 0 < this._waitingLoaders.length && this._isLoading;) {
                var a = this._waitingLoaders.shift();
                this._loadingLoaders.push(a);
                a.addEventListener(d.LOADED, this._onLoadCallback, !1);
                a.addEventListener(d.ERROR, this._onErrorCallback, !1);
                a.load()
            }
        };
        f._onLoad = function (a) {
            for (var a = a.dispatcher, g = this._loadingLoaders, b = g.length, c = 0; c < b; c++) if (a === g[c]) {
                g.splice(c, 1);
                break
            }
            this._hasError || this._continueLoading()
        };
        f._onError = function (a) {
            this._continueOnError ? this._onLoad(a) : (this._hasError = !0, this.dispatchCustomEvent(d.ERROR, null))
        };
        c.create = function () {
            return new c
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.timer"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    if (void 0 === a.TimedCommands) {
        var d = function () {
            this._init()
        };
        a.TimedCommands = d;
        var a = d.prototype = new f,
            c = f.prototype;
        a._init = function () {
            this._commandsArray = [];
            this._autoStart = !1;
            this._selfUpdatingIntervalId = -1;
            this._selfUpdateTimeCallback = b.createListenerFunction(this, this._selfUpdateTime)
        };
        a.updateTime = function (a) {
            for (var b = this._commandsArray, c = b.length, d = 0; d < c; d++) {
                var f = b[d];
                f.time <= a && (b.shift(), c--, d--, this.dispatchCustomEvent(f.type, f.data))
            }
            this._autoStart && 0 === this._commandsArray.length && this.stopSelfUpdating()
        };
        a.addCommand = function (a, b, c) {
            for (var a = {
                type: a,
                time: b,
                data: c
            }, c = this._commandsArray, d = c.length, f = 0; f < d; f++) if (c[f].time > b) {
                c.splice(f, 0, a);
                return
            }
            c.push(a);
            this._autoStart && 1 === this._commandsArray.length && this.startSelfUpdating()
        };
        a.clearAllCommandsByType = function (a) {
            for (var b = this._commandsArray, c = b.length,
            d = 0; d < c; d++) b[d].type === a && (b.splice(d, 1), d--, c--);
            this._autoStart && 0 === this._commandsArray.length && this.stopSelfUpdating()
        };
        a.clearAllCommands = function () {
            var a = this._commandsArray;
            a.splice(0, a.length);
            this._autoStart && 0 === this._commandsArray.length && this.stopSelfUpdating()
        };
        a._selfUpdateTime = function () {
            this.updateTime(0.0010 * Date.now())
        };
        a.startSelfUpdating = function () {
            if (-1 === this._selfUpdatingIntervalId) this._selfUpdatingIntervalId = setInterval(this._selfUpdateTimeCallback, 40)
        };
        a.stopSelfUpdating = function () {
            if (-1 !== this._selfUpdatingIntervalId) clearInterval(this._selfUpdatingIntervalId), this._selfUpdatingIntervalId = -1
        };
        a.setAutoStart = function (a) {
            (this._autoStart = a) && 0 < this._commandsArray.length && this.startSelfUpdating();
            return this
        };
        a.destroy = function () {
            this.stopSelfUpdating();
            if (null != this._commandsArray) {
                for (var a = this._commandsArray, b = a.length, h = 0; h < b; h++) a[h].data = null, a[h] = null;
                this._commandsArray.splice(h, this._commandsArray.length)
            }
            this._commandsArray = null;
            this._autoStart = !1;
            this._selfUpdateTimeCallback = null;
            c.destroy.call(this)
        };
        d.create = function () {
            return new d
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.style");
    if (void 0 === a.StyleUtil) {
        var f = function () {
            this._init()
        };
        a.StyleUtil = f;
        a = f.prototype = {};
        a._init = function () {};
        a.getStyle = function (a, d) {
            if (a.currentStyle) var c = a.currentStyle[d];
            else window.getComputedStyle && (c = document.defaultView.getComputedStyle(a, null).getPropertyValue(d));
            return c
        };
        a.setStyle = function (a, d, c) {
            a.currentStyle ? a.currentStyle[d] = c : a.style && a.style.setProperty(d, c, "")
        };
        f.create = function () {
            return new f
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.htmldom");
    if (void 0 === a.DomElementCreator) {
        var f = function () {};
        a.DomElementCreator = f;
        f.createChild = function (a, d) {
            var c = a.ownerDocument.createElement(d);
            a.appendChild(c);
            return c
        };
        f.createAttribute = function (a, d, c) {
            d = a.ownerDocument.createAttribute(d);
            d.nodeValue = c;
            a.setAttributeNode(d);
            return a
        };
        f.createText = function (a, d) {
            var c = a.ownerDocument.createTextNode(d);
            a.appendChild(c);
            return c
        };
        f.createSvg = function (a) {
            var d = a.createElementNS("http://www.w3.org/2000/svg",
                "svg"),
                a = a.createElementNS("http://www.w3.org/2000/svg", "defs");
            d.appendChild(a);
            return d
        };
        f.createSvgElement = function (a, d) {
            var c = a.ownerDocument.createElementNS("http://www.w3.org/2000/svg", d);
            a.appendChild(c);
            return c
        };
        f.createSvgAttribute = function (a, d, c) {
            d = this.ownerDocument.createAttributeNS("http://www.w3.org/2000/svg", d);
            d.nodeValue = c;
            a.setAttributeNode(d);
            return a
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.htmldom");
    if (void 0 === a.PositionFunctions) {
        var f = function () {};
        a.PositionFunctions = f;
        f.getGlobalPositionForNode = function (a, d) {
            var c = a;
            d.x = 0;
            for (var e = d.y = 0; null != c && !(1E3 < e++);) {
                d.x += c.offsetLeft;
                d.y += c.offsetTop;
                c = c.offsetParent
            }
            return d
        };
        f.debugTraceGlobalPositionForNode = function (a) {
            for (var d = 0; null != a && !(1E3 < d++);) {
                console.log(a.offsetLeft, a.offsetTop, a);
                a = a.offsetParent
            }
        };
        f.getRelativePositionForNode = function (a, d, c, e) {
            d = f.getGlobalPositionForNode(d, {
                x: 0,
                y: 0
            });
            c = f.getGlobalPositionForNode(c, {
                x: 0,
                y: 0
            });
            e.x = a.x + d.x - c.x;
            e.y = a.y + d.y - c.y;
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.animation"),
        f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    if (void 0 === a.TweenDelay) {
        var b = function () {
            this._init()
        };
        a.TweenDelay = b;
        a = b.prototype;
        a._init = function () {
            this._delayedTweens = [];
            this._tween = null;
            this._updateCallback = f.createListenerFunction(this, this.update);
            this._updateTween = (new TWEEN.Tween({
                update: 0
            })).onUpdate(this._updateCallback)
        };
        a.setup = function (a) {
            this._tween = a
        };
        a.animateTo = function (a, c, e, g) {
            if (0 == g) this.clearAllDelays(),
            this._tween.to(a, 1E3 * c).easing(e).start();
            else {
                var b = 0.0010 * Date.now() + g;
                this.clearAllDelaysFrom(b);
                this._delayedTweens.push({
                    startTime: b,
                    to: a,
                    time: c,
                    easingFunction: e
                });
                this._updateTween.to({
                    update: 1
                }, 1E3 * g + 100).start()
            }
            return this
        };
        a.clearAllDelays = function () {
            this._delayedTweens.splice(0, this._delayedTweens.length)
        };
        a.clearAllDelaysFrom = function (a) {
            for (var c = this._delayedTweens, e = c.length, g = 0; g < e; g++) if (c[g].startTime > a) {
                this._delayedTweens.splice(g, this._delayedTweens.length);
                break
            }
        };
        a.update = function () {
            var a = 0.0010 * Date.now();
            if (null !== this._delayedTweens) for (var c = this._delayedTweens; 0 < c.length;) {
                var e = c[0];
                if (e.startTime > a) break;
                this._tween.to(e.to, 1E3 * Math.max(0, e.time - (a - e.startTime))).easing(e.easingFunction).start();
                c.shift()
            }
        };
        a.destroy = function () {
            this._updateCallback = this._delayedTweens = null;
            if (null !== this._updateTween) this._updateTween.stop(), this._updateTween = null;
            if (null !== this._tween) this._tween.stop(), this._tween = null
        };
        b.create = function (a) {
            var c = new b;
            c.setup(a);
            return c
        };
        b.createOnObject = function (a, c) {
            var e = (new TWEEN.Tween(a)).onUpdate(c),
                g = new b;
            g.setup(e);
            return g
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.animation"),
        f = a.TweenDelay,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.DomElementPositionTween) {
        var c = function () {
            this._init()
        };
        a.DomElementPositionTween = c;
        a = c.prototype;
        a._init = function () {
            this._element = null;
            this._y = this._x = 0;
            this._updateCallback = b.createListenerFunction(this, this._update);
            this._tween = new TWEEN.Tween(this);
            this._tween.onUpdate(this._updateCallback);
            this._tweenDelay = f.create(this._tween)
        };
        a.setElement = function (a) {
            this._element = a;
            return this
        };
        a.getElemet = function () {
            return this._element
        };
        a.getXPosition = function () {
            return this._x
        };
        a.getYPosition = function () {
            return this._y
        };
        a.setStartPosition = function (a, c) {
            this._x = a;
            this._y = c;
            return this
        };
        a.animateTo = function (a, c, b, d, f) {
            this._tweenDelay.animateTo({
                _x: a,
                _y: c
            }, b, d, f);
            return this
        };
        a.update = function () {
            this._update()
        };
        a._update = function () {
            var a = "translate(" + this._x + "px, " + this._y + "px)";
            null !== this._element && (this._element.style.setProperty("-khtml-transform",
            a, ""), this._element.style.setProperty("-moz-transform", a, ""), this._element.style.setProperty("-ms-transform", a, ""), this._element.style.setProperty("-webkit-transform", a, ""), this._element.style.setProperty("-o-transform", a, ""), this._element.style.setProperty("transform", a, ""))
        };
        a.destroy = function () {
            this._tween = this._updateCallback = this._element = null;
            d.destroyIfExists(this._tweenDelay);
            this._tweenDelay = null
        };
        c.create = function (a, g, b) {
            var d = new c;
            d.setElement(a);
            d.setStartPosition(g, b);
            return d
        };
        c.createWithAnimation = function (a, g, b, d, f, j, n, q) {
            var m = new c;
            m.setElement(a);
            m.setStartPosition(g, b);
            m.animateTo(d, f, j, n, q);
            return m
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.animation"),
        f = a.TweenDelay,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.DomElementAbsolutePositionTween) {
        var c = function () {
            this._init()
        };
        a.DomElementAbsolutePositionTween = c;
        a = c.prototype;
        a._init = function () {
            this._element = null;
            this._y = this._x = 0;
            this._updateCallback = b.createListenerFunction(this, this._update);
            this._tween = new TWEEN.Tween(this);
            this._tween.onUpdate(this._updateCallback);
            this._tweenDelay = f.create(this._tween)
        };
        a.setElement = function (a) {
            this._element = a;
            return this
        };
        a.getElemet = function () {
            return this._element
        };
        a.getXPosition = function () {
            return this._x
        };
        a.getYPosition = function () {
            return this._y
        };
        a.setStartPosition = function (a, c) {
            this._x = a;
            this._y = c;
            return this
        };
        a.animateTo = function (a, c, b, d, f) {
            this._tweenDelay.animateTo({
                _x: a,
                _y: c
            }, b, d, f);
            return this
        };
        a.update = function () {
            this._update()
        };
        a._update = function () {
            null !== this._element && (this._element.style.setProperty("left", this._x +
                "px", ""), this._element.style.setProperty("top", this._y + "px", ""))
        };
        a.destroy = function () {
            this._tween = this._updateCallback = this._element = null;
            d.destroyIfExists(this._tweenDelay);
            this._tweenDelay = null
        };
        c.create = function (a, b, h) {
            var d = new c;
            d.setElement(a);
            d.setStartPosition(b, h);
            return d
        };
        c.createWithAnimation = function (a, b, h, d, f, j, n, q) {
            var m = new c;
            m.setElement(a);
            m.setStartPosition(b, h);
            m.animateTo(d, f, j, n, q);
            return m
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.animation"),
        f = a.TweenDelay,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.DomElementOpacityTween) {
        var c = function () {
            this._init()
        };
        a.DomElementOpacityTween = c;
        a = c.prototype;
        a._init = function () {
            this._element = null;
            this._opacity = 1;
            this._updateCallback = b.createListenerFunction(this, this._update);
            this._tween = new TWEEN.Tween(this);
            this._tween.onUpdate(this._updateCallback);
            this._tweenDelay = f.create(this._tween)
        };
        a.setElement = function (a) {
            this._element = a;
            return this
        };
        a.getElemet = function () {
            return this._element
        };
        a.getOpacity = function () {
            return this._x
        };
        a.setStartOpacity = function (a) {
            this._opacity = a;
            return this
        };
        a.animateTo = function (a, c, b, d) {
            this._tweenDelay.animateTo({
                _opacity: a
            }, c, b, d);
            return this
        };
        a.update = function () {
            this._update()
        };
        a._update = function () {
            null !== this._element && this._element.style.setProperty("opacity", this._opacity, "")
        };
        a.destroy = function () {
            this._tween = this._updateCallback = this._element = null;
            d.destroyIfExists(this._tweenDelay);
            this._tweenDelay = null
        };
        c.create = function (a, b) {
            var h = new c;
            h.setElement(a);
            h.setStartOpacity(b);
            return h
        };
        c.createWithAnimation = function (a, b, h, d, f, j) {
            var n = new c;
            n.setElement(a);
            n.setStartOpacity(b);
            n.animateTo(h, d, f, j);
            return n
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.animation"),
        f = a.TweenDelay,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.DomElementScaleTween) {
        var c = function () {
            this._init()
        };
        a.DomElementScaleTween = c;
        a = c.prototype;
        a._init = function () {
            this._element = null;
            this._verticalScale = this._horizontalScale = 1;
            this._updateCallback = b.createListenerFunction(this, this._update);
            this._tween = new TWEEN.Tween(this);
            this._tween.onUpdate(this._updateCallback);
            this._tweenDelay = f.create(this._tween)
        };
        a.setElement = function (a) {
            this._element = a;
            return this
        };
        a.getElemet = function () {
            return this._element
        };
        a.getHorizontalScale = function () {
            return this._horizontalScale
        };
        a.getVerticalScale = function () {
            return this._verticalScale
        };
        a.setStartScale = function (a, c) {
            this._horizontalScale = a;
            this._verticalScale = c;
            return this
        };
        a.animateTo = function (a, c, b, d, f) {
            this._tweenDelay.animateTo({
                _horizontalScale: a,
                _verticalScale: c
            }, b, d, f);
            return this
        };
        a.getTransform = function () {
            return "scale(" + this._horizontalScale + ", " + this._verticalScale + ")"
        };
        a.update = function () {
            this._update()
        };
        a._update = function () {
            var a = this.getTransform();
            null !== this._element && (this._element.style.setProperty("-khtml-transform", a, ""), this._element.style.setProperty("-moz-transform", a, ""), this._element.style.setProperty("-ms-transform", a, ""), this._element.style.setProperty("-webkit-transform", a, ""), this._element.style.setProperty("-o-transform", a, ""), this._element.style.setProperty("transform", a, ""))
        };
        a.destroy = function () {
            this._updateCallback = this._element = null;
            null !== this._tween && this._tween.stop();
            this._tween = null;
            d.destroyIfExists(this._tweenDelay);
            this._tweenDelay = null
        };
        c.create = function (a, b, h) {
            var d = new c;
            d.setElement(a);
            d.setStartScale(b, h);
            return d
        };
        c.createWithAnimation = function (a, b, h, d, f, j, n, q) {
            var m = new c;
            m.setElement(a);
            m.setStartScale(b, h);
            m.animateTo(d, f, j, n, q);
            return m
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.animation"),
        f = WEBLAB.namespace("WEBLAB.utils.timer").TimedCommands,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils");
    if (void 0 === a.DomElementInDomTween) {
        var d = function () {
            this._init()
        };
        a.DomElementInDomTween = d;
        d.INTERNAL_CHANGE_STATE = "changeState";
        a = d.prototype;
        a._init = function () {
            this._parentElement = this._element = null;
            this._isInDom = !1;
            this._changeStateCallback = b.createListenerFunction(this, this._changeState);
            this._timedCommands = f.create().setAutoStart(!0);
            this._timedCommands.addEventListener(d.INTERNAL_CHANGE_STATE, this._changeStateCallback, !1)
        };
        a.setElement = function (a, e) {
            this._element = a;
            this._parentElement = e;
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.isInDom = function () {
            return this._isInDom
        };
        a.setStartInDom = function (a) {
            this._isInDom = a;
            return this
        };
        a.animateTo = function (a, e) {
            if (0 === e) this._timedCommands.clearAllCommandsByType(d.INTERNAL_CHANGE_STATE), this._isInDom = a, this._update();
            else {
                var b = 0.0010 * Date.now();
                this._timedCommands.addCommand(d.INTERNAL_CHANGE_STATE, b + e, a)
            }
            return this
        };
        a.update = function () {
            this._update()
        };
        a._update = function () {
            this._isInDom ? null !== this._element && this._element.parentNode !== this._parentElement && this._parentElement.appendChild(this._element) : null !== this._element && null !== this._element.parentNode && this._element.parentNode.removeChild(this._element)
        };
        a.stop = function () {
            this._timedCommands.clearAllCommandsByType(d.INTERNAL_CHANGE_STATE)
        };
        a._changeState = function (a) {
            this._isInDom = a.detail;
            this._update()
        };
        a.destroy = function () {
            this._changeStateCallback = this._parentElement = this._element = null;
            if (null !== this._timedCommands) this._timedCommands.destroy(), this._timedCommands = null
        };
        d.create = function (a, e, b) {
            var h = new d;
            h.setElement(a, e);
            h.setStartInDom(b);
            return h
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.data"),
        f = WEBLAB.namespace("WEBLAB.utils.math").Point;
    if (void 0 === a.StringFunctions) {
        var b = function () {};
        a.StringFunctions = b;
        b.trim = function (a) {
            return a.replace(/^[\s]+/g, "").replace(/[\s]+$/g, "")
        };
        b.createPointFromString = function (a) {
            a = a.split(",");
            return f.create(parseFloat(b.trim(a[0]), 10), parseFloat(b.trim(a[1]), 10))
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.data");
    if (void 0 === a.DateFunctions) {
        var f = function () {};
        a.DateFunctions = f;
        f.getLocalisedDate = function (a, d) {
            a = parseInt(a);
            d || (d = "en-US");
            var c = (new Date).getTimezoneOffset(),
                e = "",
                c = new Date(a - 6E4 * c),
                e = c.getUTCHours(),
                e = 10 > e ? "0" + e : e,
                g = c.getUTCMinutes(),
                e = e + ":" + (10 > g ? "0" + g : g),
                g = c.getFullYear(),
                h = c.getMonth() + 1,
                h = 10 > h ? "0" + h : h,
                c = c.getDate(),
                c = 10 > c ? "0" + c : c,
                f = "";
            switch (d) {
                case "en-US":
                    f = h + "/" + c + "/" + g;
                    break;
                case "sv-SE":
                    f = c + "/" + h + " " + g;
                    break;
                default:
                    f = c + "/" + h + "/" + g
            }
            return e + " " + f
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.canvas.utils");
    if (void 0 === a.CanvasFactory) {
        var f = function () {};
        a.CanvasFactory = f;
        f.create = function (a, d) {
            var c = document.createElement("canvas");
            c.width = a;
            c.height = d;
            return c.getContext("2d")
        };
        f.createFromImage = function (a, d) {
            var d = d || 1,
                c = f.create(a.width * d, a.height * d);
            c.drawImage(a, 0, 0, a.width * d, a.height * d);
            return c
        };
        f.createFromImageUrl = function (a, d, c, e) {
            var e = e || 0,
                d = d || 1,
                g = new Image;
            g.id = e;
            g.onload = function () {
                var a = f.create(g.width * d, g.height * d);
                a.drawImage(g,
                0, 0, g.width * d, g.height * d);
                a.canvas.id = e;
                c(a)
            }.bind(this);
            g.src = a
        };
        f.clone = function (a, d) {
            var d = d || 1,
                c = f.create(a.width * d, a.height * d);
            c.drawImage(a, 0, 0, a.width * d, a.height * d);
            return c
        };
        f.mask = function (a, d, c) {
            c = c || "destination-atop";
            a = a.getContext("2d");
            a.save();
            a.globalCompositeOperation = c;
            a.drawImage(d, 0, 0);
            a.restore()
        };
        f.crop = function (a, d, c) {
            var c = c || d,
                e = f.clone(a);
            a.width = c.width;
            a.height = c.height;
            a.getContext("2d").drawImage(e.canvas, d.x, d.y, d.width, d.height, 0, 0, c.width, c.height)
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.canvas.animation"),
        f = WEBLAB.utils.canvas.utils.CanvasFactory,
        b = WEBLAB.utils.math.SimpleTrig;
    if (void 0 === a.DisplayObject) {
        a.DisplayObject = function () {
            this.y = this.x = 0;
            this.scaleY = this.scaleX = 1;
            this.rotation = 0;
            this.regPoint = {
                x: 0,
                y: 0
            };
            this.alpha = 1;
            this.visible = !0;
            this.mask = this.ctx = this.canvas = this.parent = null;
            this.doUpdate = !1;
            this.tween = null;
            this.id = "no ID";
            this.type = "DisplayObject";
            this.blendMode = null
        };
        var d = a.DisplayObject.prototype;
        d.init = function (a,
        e) {
            if ("string" == typeof a) {
                this.visible = !1;
                var b = new Image;
                b.onload = function () {
                    this.initWithCanvas(f.createFromImage(b).canvas);
                    this.visible = !0;
                    e()
                }.bind(this);
                b.src = a
            } else this.initWithCanvas(a)
        };
        d.initWithCanvas = function (a) {
            this.canvas = a;
            this.ctx = a.getContext("2d")
        };
        d.killTween = function () {
            this.tween && this.tween.stop()
        };
        d.centreRegPoint = function () {
            this.regPoint.x = this.canvas.width / 2;
            this.regPoint.y = this.canvas.height / 2
        };
        d.drawRegPoint = function () {
            this.ctx.save();
            this.ctx.translate(this.regPoint.x,
            this.regPoint.y);
            this.ctx.beginPath();
            this.ctx.rect(-2, -2, 4, 4);
            this.ctx.fillStyle = "rgba(0, 0, 0, .8)";
            this.ctx.fill();
            this.ctx.restore()
        };
        d.render = function (a) {
            a.save();
            a.globalAlpha = this.alpha;
            if (this.blendMode) a.globalCompositeOperation = this.blendMode;
            a.translate(this.x, this.y);
            a.rotate(b.toRadians(this.rotation));
            a.translate(-this.regPoint.x * this.scaleX, -this.regPoint.y * this.scaleY);
            a.drawImage(this.canvas, 0, 0, this.canvas.width * this.scaleX, this.canvas.height * this.scaleY);
            a.restore()
        };
        d.canvasMask = function (a) {
            this.mask = a
        };
        d.clone = function (c) {
            var c = c || 1,
                e, b = f.clone(this.canvas, c);
            "Sprite" == this.type && (e = new a.Sprite(b.canvas));
            "Stage" == this.type && (e = new a.Stage(b.canvas, this.id + " CLONE"));
            1 == c ? (e.scaleX = this.scaleX, e.scaleY = this.scaleY) : e.scaleX = e.scaleY = 1;
            e.x = this.x;
            e.y = this.y;
            e.rotation = this.rotation;
            e.regPoint.x = this.regPoint.x * c;
            e.regPoint.y = this.regPoint.y * c;
            e.alpha = this.alpha;
            e.visible = this.visible;
            e.parent = null;
            e.mask = this.mask;
            e.doUpdate = this.doUpdate;
            e.tween = null;
            e.id = this.id + " CLONE";
            e.type = this.type;
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.canvas.animation");
    if (void 0 === a.Sprite) a.Sprite = function (a, b) {
        this.type = "Sprite";
        this.regPoint = {
            x: 0,
            y: 0
        };
        return this.init(a, b)
    }, (a.Sprite.prototype = new a.DisplayObject).update = function () {}
})();
(function () {
    var b;
    var a = WEBLAB.namespace("WEBLAB.utils.canvas.animation");
    if (void 0 === a.Stage) a.Stage = function (a, b) {
        this.id = b || "no id";
        this.type = "Stage";
        this.children = [];
        return this.init(a)
    }, b = a.Stage.prototype = new a.DisplayObject, a = b, a.addChild = function (a, b) {
        this.addChildAt(a, this.children.length, b)
    }, a.addChildAt = function (a, b, d) {
        if ("function" == typeof a) a.type = "GraphicsFunction";
        if (d) a.id = d;
        a.parent = this;
        this.children.splice(b, 0, a)
    }, a.addChildUnder = function (a, b, d) {
        b = this.getChildIndexById(b);
        this.addChildAt(a,
        b - 1, d)
    }, a.removeChild = function (a) {
        var b = this.children.indexOf(a);
        if (-1 < b) a.parent = null, this.children.splice(b, 1)
    }, a.removeChildById = function (a) {
        for (var b = 0, d = this.children.length; b < d; ++b) {
            var c = this.children[b];
            if (c.id == a) {
                c.parent = null;
                this.children.splice(b, 1);
                break
            }
        }
        return c
    }, a.removeAllChildren = function () {
        this.children = []
    }, a.getChildById = function (a) {
        for (var b in this.children) if (this.children[b].id == a) return this.children[b]
    }, a.setChildIndexById = function (a, b) {
        this.addChildAt(this.removeChildById(a),
        b, a)
    }, a.getChildIndexById = function () {
        for (var a = 0, b = this.children.length; a < b; ++a);
        return a
    }, a.update = function () {
        this.ctx.save();
        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        this.ctx.restore();
        for (var a = 0, b = this.children.length; a < b; ++a) {
            var d = this.children[a];
            "function" == typeof d ? d(this.ctx) : (d.doUpdate && d.update(), d.visible && 0 < d.alpha && d.render(this.ctx))
        }
    }, a.logDisplayList = function (a) {
        var b = "\n\t\tStage '" + this.id + "' display list:";
        a && (b +=
            "  == " + a + " ==");
        for (var a = 0, d = this.children.length; a < d; ++a) var c = this.children[a],
            b = b + ("\n\t\t\t" + a + " >> " + c.type + ": " + c.id);
        console.log(b + "\n\n")
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.weblab.common.ui.page"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    if (void 0 === a.Page) {
        var c = function () {
            this._init()
        };
        a.Page = c;
        a = c.prototype = new f;
        c.CONFIRM_LEAVE_SECTION = "pageConfirmLeaveSection";
        c.CANCEL_LEAVE_SECTION = "pageCancelLeaveSection";
        var e = f.prototype;
        a._init = function () {
            this._element = this._parent = null;
            this.showDefaultSubtitle = !0;
            this.__verticallyCenteredElements = this._pageName = this._subtitleContent = null;
            this.destroyPageId = this.transitionId = -1;
            this._transitionDuration = 1E3;
            this._completeShowTransitionCallback = b.createListenerFunction(this, this._completeShowTransition);
            this._completeHideTransitionCallback = b.createListenerFunction(this, this._completeHideTransition);
            this._windowResizeCallback = b.createListenerFunction(this, this._onWindowResize);
            this._destroyPageCallback = b.createListenerFunction(this, this._destroyAfterTransiion)
        };
        a.setElement = function (a) {
            this._element = a;
            this._pageName = this._element.getAttribute("name");
            this._parent = a.parentNode;
            if (this.showDefaultSubtitle) this._subtitleContent = this._element.querySelector("*[data-weblab-type='subtitleContent']");
            this.__verticallyCenteredElements = this._element.getElementsByClassName("jsVerticallyCentered");
            return this
        };
        a.getSubtitle = function () {
            return this._subtitleContent
        };
        a._performVerticalCenteredLayout = function (a) {
            for (var e = 0; e < a.length; e++) {
                var b = a[e],
                    c = b.parentNode.clientHeight;
                if (0 < c) {
                    var d = b.clientHeight;
                    0 < d && (c = parseInt((c - d) / 2), b.style.setProperty("top", c + "px", ""))
                }
            }
        };
        a._onWindowResize = function () {
            this._performVerticalCenteredLayout(this.__verticallyCenteredElements)
        };
        a.show = function () {
            0 < this.__verticallyCenteredElements.length && this._performVerticalCenteredLayout(this.__verticallyCenteredElements);
            window.addEventListener("resize", this._windowResizeCallback, !1);
            this._performShowTransition()
        };
        a.hide = function () {
            window.removeEventListener("resize", this._windowResizeCallback, !1);
            this._performHideTransition()
        };
        a.cancelHide = function () {
            -1 !== this.transitionId && clearTimeout(this.transitionId); - 1 !== this.destroyPageId && clearTimeout(this.destroyPageId)
        };
        a._performShowTransition = function () {
            this.pageWillAppear();
            d.addClass(this._element, "transitioning");
            d.addClass(this._element, "visible"); - 1 !== this.transitionId && clearTimeout(this.transitionId); - 1 !== this.destroyPageId && clearTimeout(this.destroyPageId);
            this.transitionId = setTimeout(this._completeShowTransitionCallback, this._transitionDuration)
        };
        a._completeShowTransition = function () {
            this.transitionId = -1;
            d.removeClass(this._element, "transitioning");
            this.pageDidAppear()
        };
        a._performHideTransition = function () {
            this.pageWillDisappear();
            d.addClass(this._element, "transitioning");
            d.removeClass(this._element, "visible"); - 1 !== this.transitionId && clearTimeout(this.transitionId);
            this.transitionId = setTimeout(this._completeHideTransitionCallback, this._transitionDuration)
        };
        a._completeHideTransition = function () {
            d.removeClass(this._element, "transitioning");
            this.pageDidDisappear(); - 1 !== this.destroyPageId && clearTimeout(this.destroyPageId);
            this.destroyPageId = setTimeout(this._destroyPageCallback, 500)
        };
        a.pageWillAppear = function () {};
        a.pageDidAppear = function () {};
        a.pageWillDisappear = function () {};
        a.pageDidDisappear = function () {};
        a.getElement = function () {
            return this._element
        };
        a.requestLeaveSection = function () {
            return !0
        };
        a._destroyAfterTransiion = function () {
            this.transitionId = -1;
            this.destroy()
        };
        a.destroy = function () {
            this._subtitleContent && this._element.appendChild(this._subtitleContent);
            this._element.parentNode && this._element.parentNode.removeChild(this._element);
            this.__verticallyCenteredElements = this._subtitleContent = this._element = this._parent = null; - 1 !== this.transitionId && clearTimeout(this.transitionId);
            window.removeEventListener("resize", this._windowResizeCallback, !1);
            this._destroyPageCallback = this._windowResizeCallback = this._completeHideTransitionCallback = this._completeShowTransitionCallback = null;
            e.destroy.call(this)
        };
        a.navigate = function (a) {
            this.dispatchCustomEvent("navigate", a)
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.weblab.common.ui.page");
    WEBLAB.namespace("WEBLAB.utils.data");
    var f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils.loading");
    if (void 0 === a.PageManager) {
        var b = function () {
            this._init()
        };
        a.PageManager = b;
        a = a.PageManager.prototype;
        a._init = function () {
            this._previousPage = this._currentPage = this._currentPageName = this._fullBrowserHolder = this._centeredHolder = null;
            this._templates = {};
            this._windowResizeCallback = this._titleElement = null;
            return this
        };
        a.setElements = function (a, b) {
            this._centeredHolder = a;
            this._fullBrowserHolder = b;
            this._windowResizeCallback = f.createListenerFunction(this, this._onWindowResize);
            window.addEventListener("resize", this._windowResizeCallback, !1);
            this._titleElement = this._centeredHolder.querySelector("#experimentTitle");
            if (!this._titleElement) this._titleElement = this._fullBrowserHolder.querySelector("#experimentTitle");
            return this
        };
        a.showPage = function (a) {
            this._onWindowResize();
            this._currentPageName = a;
            if (this._currentPage) this._currentPage.hide(),
            this._previousPage = this._currentPage;
            this._titleElement.classList.remove("hidden")
        };
        a.getCurrentPageName = function () {
            return this._currentPageName
        };
        a.getCurrentPage = function () {
            return this._currentPage
        };
        a._performShowPage = function () {
            if (this._currentPage) this._currentPage._navigationListener = f.createListenerFunction(this, this._pageDidNavigate), this._currentPage.addEventListener("navigate", this._currentPage._navigationListener), this._currentPage.show()
        };
        a._pageDidNavigate = function (a) {
            this._currentPage.removeEventListener("navigate",
            this._currentPage._navigationListener);
            delete this._currentPage._navigationListener;
            a.detail && this.showPage(a.detail)
        };
        a._onWindowResize = function () {
            if (this._titleElement) {
                var a = this._titleElement.parentElement.clientHeight;
                720 >= a ? this._titleElement.style.setProperty("top", "15px", "") : 720 < a && 1440 > a ? this._titleElement.style.setProperty("top", 15 + 0.1 * (a - 720) + "px", "") : this._titleElement.style.setProperty("top", "87px", "")
            }
        };
        a.destroy = function () {
            window.removeEventListener("resize", this._windowResizeCallback, !1)
        };
        b.create = function (a, c) {
            var e = new b;
            e.setElements(a, c);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui"),
        f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils.events");
    if (void 0 === a.MultipartTitleAnimation) {
        var b = function () {};
        a.MultipartTitleAnimation = b;
        b.TYPE_FADE = "typeFade";
        b.TYPE_MASK = "typeMask";
        b.FADE_DIRECTION_IN = "fadeDirectionIn";
        b.FADE_DIRECTION_OUT = "fadeDirectionOut";
        b.MASK_DIRECTION_UP = "maskDirectionUp";
        b.MASK_DIRECTION_DOWN = "maskDirectionDown";
        b.MASK_DIRECTION_LEFT = "maskDirectionLeft";
        b.MASK_DIRECTION_RIGHT =
            "maskDirectionRight";
        b.PLAY_DIRECTION_FORWARD = "playDirectionForward";
        b.PLAY_DIRECTION_BACKWARD = "playDirectionBackward";
        var d = a.MultipartTitleAnimation.prototype;
        d.addAnimatingElement = function (a, e, g, h, d, f) {
            if (!this._animatingElements) this._animatingElements = [];
            var j = {};
            j.animationType = a;
            j.targetElement = e;
            j.direction = g;
            j.duration = h;
            j.delay = d ? d : 0;
            j.maskingElement = f;
            j.animValue = 0;
            a == b.TYPE_FADE && (this._updateFadeAnimation(j), this._completeFadeAnimation(j));
            a == b.TYPE_MASK && this._updateMaskAnimation(j);
            return this._animatingElements.push(j) - 1
        };
        d.playAnimation = function (a, e) {
            if (this._animatingElements) if (null != e) this._processAnimation(this._animatingElements[e], a);
            else for (var b = 0; b < this._animatingElements.length; b++) this._processAnimation(this._animatingElements[b], a)
        };
        d._processAnimation = function (a, e) {
            switch (a.animationType) {
                case b.TYPE_FADE:
                    this._processFadeAnimation(a, e);
                    break;
                case b.TYPE_MASK:
                    this._processMaskAnimation(a, e)
            }
        };
        d._processFadeAnimation = function (a, e) {
            var g = e == b.PLAY_DIRECTION_FORWARD ? 1 : 0;
            a.animValue = e == b.PLAY_DIRECTION_FORWARD ? 0 : 1;
            a.targetElement.style.setProperty("opacity", a.animValue, "");
            a.targetElement.style.setProperty("display", "block", "");
            var h = f.createListenerFunctionWithArguments(this, this._updateFadeAnimation, [a]),
                d = f.createListenerFunctionWithArguments(this, this._completeFadeAnimation, [a]);
            (new TWEEN.Tween(a)).to({
                animValue: g
            }, a.duration).delay(a.delay).easing(TWEEN.Easing.Quadratic.EaseInOut).onUpdate(h).onComplete(d).start()
        };
        d._updateFadeAnimation = function (a) {
            a.targetElement.style.setProperty("opacity",
            a.animValue, "")
        };
        d._completeFadeAnimation = function (a) {
            0 == a.animValue && a.targetElement.style.setProperty("display", "none", "");
            0 < a.animValue && a.targetElement.style.setProperty("display", "block", "")
        };
        d._processMaskAnimation = function (a, e) {
            var g = e == b.PLAY_DIRECTION_FORWARD ? 0 : 1;
            a.animValue = e == b.PLAY_DIRECTION_FORWARD ? 1 : 0;
            var h = f.createListenerFunctionWithArguments(this, this._updateMaskAnimation, [a]);
            (new TWEEN.Tween(a)).to({
                animValue: g
            }, a.duration).delay(a.delay).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(h).start()
        };
        d._updateMaskAnimation = function (a) {
            var e = a.targetElement.clientHeight * a.animValue,
                g = a.targetElement.clientWidth * a.animValue;
            switch (a.direction) {
                case b.MASK_DIRECTION_UP:
                    a.targetElement.style.setProperty("-webkit-transform", "translateY(" + e + "px)", "");
                    a.targetElement.style.setProperty("transform", "translateY(" + e + "px)", "");
                    break;
                case b.MASK_DIRECTION_DOWN:
                    a.targetElement.style.setProperty("-webkit-transform", "translateY(" + -1 * e + "px)", "");
                    a.targetElement.style.setProperty("transform", "translateY(" + -1 * e +
                        "px)", "");
                    break;
                case b.MASK_DIRECTION_LEFT:
                    a.targetElement.style.setProperty("-webkit-transform", "translateX(" + g + "px)", "");
                    a.targetElement.style.setProperty("transform", "translateX(" + g + "px)", "");
                    break;
                case b.MASK_DIRECTION_RIGHT:
                    a.targetElement.style.setProperty("-webkit-transform", "translateX(" + -1 * g + "px)", ""), a.targetElement.style.setProperty("transform", "translateX(" + -1 * g + "px)", "")
            }
        };
        b.create = function () {
            return new b
        };
        b.decorate = function (a) {
            b.apply(a);
            for (var e in d) "function" == typeof d[e] && (a[e] = d[e]);
            return a
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.utils.data");
    var f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    if (void 0 === a.LineTitleAndContent) {
        var d = function () {
            this._init()
        };
        a.LineTitleAndContent = d;
        a = d.prototype = new b;
        a._init = function () {
            this._contentElement = this._contentMask = this._lineElement = this._titleElement = this._titleMask = this._element = null;
            this._moveLength = this._spacing = 10;
            this._animationValues = {
                titleEnvelope: 0,
                lineEnvelope: 0,
                contentEnvelope: 0,
                update: 0
            };
            this._updateTimeCallback = f.createListenerFunction(this, this._updateTime);
            this._lineTween = new TWEEN.Tween(this._animationValues);
            this._titleTween = new TWEEN.Tween(this._animationValues);
            this._contentTween = new TWEEN.Tween(this._animationValues);
            this._updateTween = (new TWEEN.Tween(this._animationValues)).onUpdate(this._updateTimeCallback);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._titleMask = this._element.querySelector(".title");
            this._titleElement = this._titleMask.querySelector(".animationLayer");
            this._lineElement = this._element.querySelector(".line");
            this._contentMask = this._element.querySelector(".content");
            this._contentElement = this._contentMask.querySelector(".animationLayer");
            this._updateTime();
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.show = function () {
            this._lineTween.to({
                lineEnvelope: 1
            }, 400).delay(0).easing(TWEEN.Easing.Quadratic.EaseIn).start();
            this._titleTween.to({
                titleEnvelope: 1
            }, 300).delay(50).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            this._contentTween.to({
                contentEnvelope: 1
            }, 300).delay(100).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            this._updateTween.to({
                update: 1
            }, 400).delay(0).easing(TWEEN.Easing.Quadratic.EaseOut).start()
        };
        a.hide = function () {
            this._lineTween.to({
                lineEnvelope: 0
            }, 300).delay(100).easing(TWEEN.Easing.Quadratic.EaseIn).start();
            this._titleTween.to({
                titleEnvelope: 0
            }, 200).delay(100).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            this._contentTween.to({
                contentEnvelope: 0
            }, 200).delay(0).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            this._updateTween.to({
                update: 0
            }, 400).delay(0).easing(TWEEN.Easing.Quadratic.EaseOut).start()
        };
        a.changeContent = function () {};
        a._updateTime = function () {
            this._lineElement.style.setProperty("opacity", this._animationValues.lineEnvelope, "");
            var a = this._titleElement.clientHeight,
                e = this._contentElement.clientHeight;
            this._titleMask.style.setProperty("height", a + this._spacing + "px", "");
            this._lineElement.style.setProperty("top", a + this._spacing + "px", "");
            this._contentMask.style.setProperty("height", e + this._spacing +
                "px", "");
            this._contentMask.style.setProperty("top", a + this._spacing + 1 + "px", "");
            e = "translate(0px, " + (this._spacing - 0.75 * (this._moveLength + e) * (1 - this._animationValues.contentEnvelope)) + "px)";
            this._contentElement.style.setProperty("-webkit-transform", e, "");
            this._contentElement.style.setProperty("-moz-transform", e, "");
            this._contentElement.style.setProperty("transform", e, "");
            this._contentElement.style.setProperty("opacity", this._animationValues.contentEnvelope, "");
            a = "translate(0px, " + 0.75 * (this._moveLength + a) * (1 - this._animationValues.titleEnvelope) + "px)";
            this._titleElement.style.setProperty("-webkit-transform", a, "");
            this._titleElement.style.setProperty("-moz-transform", a, "");
            this._titleElement.style.setProperty("transform", a, "");
            this._titleElement.style.setProperty("opacity", this._animationValues.titleEnvelope, "")
        };
        a.destroy = function () {
            this._contentElement = this._contentMask = this._lineElement = this._titleElement = this._titleMask = this._element = null;
            if (null !== this._lineTween) this._lineTween.stop(), this._lineTween = null;
            if (null !== this._titleTween) this._titleTween.stop(), this._titleTween = null;
            if (null !== this._contentTween) this._contentTween.stop(), this._contentTween = null;
            if (null !== this._updateTween) this._updateTween.stop(), this._updateTween = null;
            this._updateTimeCallback = this._animationValues = null
        };
        d.create = function (a) {
            var e = new d;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    var f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.common.ui").MultipartTitleAnimation;
    if (void 0 === a.ContentCarousel) {
        var d = function () {
            b.decorate(this);
            this._init()
        };
        a.ContentCarousel = d;
        a = d.prototype = new f;
        a._init = function () {
            this._contentContainer = this._titleContainer = null;
            this._titleElements = {};
            this._contentElements = {};
            this._showTitleAnimationIds = {};
            this._hideTitleAnimationIds = {};
            this._showContentAnimationIds = {};
            this._hideContentAnimationIds = {};
            this._currentContentTag = this._currentTitleTag = null;
            return this
        };
        a.setTitleContainer = function (a) {
            this._titleContainer = a
        };
        a.setContentContainer = function (a) {
            this._contentContainer = a
        };
        a.addTitleElement = function (a, e) {
            a.style.setProperty("display", "none", "");
            this._titleContainer.appendChild(a);
            this._titleElements[e] = a;
            var g = {};
            g.fade = this.addAnimatingElement(b.TYPE_FADE, a, b.FADE_DIRECTION_IN, 200, 0, null);
            g.mask = this.addAnimatingElement(b.TYPE_MASK, a, b.MASK_DIRECTION_RIGHT, 500, 100, null);
            this._showTitleAnimationIds[e] = g;
            g = {};
            g.fade = this.addAnimatingElement(b.TYPE_FADE, a, b.FADE_DIRECTION_IN, 200, 0, null);
            g.mask = this.addAnimatingElement(b.TYPE_MASK, a, b.MASK_DIRECTION_DOWN, 200, 0, null);
            this._hideTitleAnimationIds[e] = g
        };
        a.addContentElement = function (a, e) {
            a.style.setProperty("display", "none", "");
            this._contentContainer.appendChild(a);
            this._contentElements[e] = a;
            var g = {};
            g.fade = this.addAnimatingElement(b.TYPE_FADE,
            a, b.FADE_DIRECTION_IN, 200, 200, null);
            g.mask = this.addAnimatingElement(b.TYPE_MASK, a, b.MASK_DIRECTION_DOWN, 500, 200, null);
            this._showContentAnimationIds[e] = g;
            g = {};
            g.fade = this.addAnimatingElement(b.TYPE_FADE, a, b.FADE_DIRECTION_IN, 200, 0, null);
            g.mask = this.addAnimatingElement(b.TYPE_MASK, a, b.MASK_DIRECTION_UP, 200, 0, null);
            this._hideContentAnimationIds[e] = g
        };
        a.showTitle = function (a) {
            if (this._currentTitleTag) {
                if (this._currentTitleTag == a) return;
                var e = this._hideTitleAnimationIds[this._currentTitleTag];
                this.playAnimation(b.PLAY_DIRECTION_BACKWARD,
                e.fade);
                this.playAnimation(b.PLAY_DIRECTION_BACKWARD, e.mask);
                var g = this,
                    h = this._titleElements[this._currentContentTag];
                setTimeout(function () {
                    g._hideElement(h)
                }, 1E3)
            }
            e = this._showTitleAnimationIds[a];
            this.playAnimation(b.PLAY_DIRECTION_FORWARD, e.fade);
            this.playAnimation(b.PLAY_DIRECTION_FORWARD, e.mask);
            this._titleElements[a].style.setProperty("display", "block", "");
            this._currentTitleTag = a
        };
        a.showContent = function (a) {
            if (this._currentContentTag) {
                if (this._currentContentTag == a) return;
                var e = this._hideContentAnimationIds[this._currentContentTag];
                this.playAnimation(b.PLAY_DIRECTION_BACKWARD, e.fade);
                this.playAnimation(b.PLAY_DIRECTION_BACKWARD, e.mask);
                var g = this,
                    h = this._contentElements[this._currentContentTag];
                setTimeout(function () {
                    g._hideElement(h)
                }, 1E3)
            }
            e = this._showContentAnimationIds[a];
            this.playAnimation(b.PLAY_DIRECTION_FORWARD, e.fade);
            this.playAnimation(b.PLAY_DIRECTION_FORWARD, e.mask);
            this._contentElements[a].style.setProperty("display", "block", "");
            this._currentContentTag = a
        };
        a._hideElement = function (a) {
            a && a.style.setProperty("display",
                "none", "")
        };
        a.clearContent = function () {
            for (var a in this._titleElements) this._titleElements[a] = null;
            for (var e in this._contentElements) this._contentElements[e] = null;
            this._titleElements = {};
            this._contentElements = {};
            this._currentTitleTag = this._currentContentTag = ""
        };
        a.destroy = function () {}
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        f = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    WEBLAB.namespace("WEBLAB.utils.data");
    var d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils.loading");
    if (void 0 === a.DialogSubManager) {
        var c = function () {
            this._init()
        };
        a.DialogSubManager = c;
        a = a.DialogSubManager.prototype = new b;
        a._init = function () {
            this._dialogHolder = this._backgroundBlocker = this._element = null;
            this._isShowingDialog = !1;
            this._currentTween = this._currentHolderElement = this._previousDialog = this._currentDialog = null;
            this._dialogCloseCallback = d.createListenerFunction(this, this._dialogCloseClick);
            this._completeShowDialogCallback = d.createListenerFunction(this, this._completeShowDialog);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._backgroundBlocker = this._element.querySelector("*[data-weblab-type='backgroundBlocker']");
            this._dialogHolder = this._element.querySelector("*[data-weblab-type='dialogHolder']");
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.showDialog = function (a) {
            this._isShowingDialog ? (this._previousDialog = this._currentDialog, this._previousDialog.hide()) : (this._element.style.setProperty("display", "block", ""), this._showBackground());
            this._replaceDialog(a)
        };
        a._replaceDialog = function (a) {
            this._currentDialog = a;
            this._dialogHolder.appendChild(this._currentDialog.getElement());
            this._currentDialog.addEventListener(f.Dialog.CLOSE_DIALOG, this._dialogCloseCallback);
            setTimeout(this._completeShowDialogCallback,
            500);
            this._isShowingDialog = !0
        };
        a._showBackground = function () {
            this._backgroundBlocker.style.setProperty("display", "block", "");
            var a = this._backgroundBlocker;
            this._currentTween && this._currentTween.stop();
            this._currentTween = (new TWEEN.Tween({
                value: 0
            })).to({
                value: 1
            }, 500).onUpdate(function () {
                a.style.setProperty("opacity", this.value, "")
            }).start()
        };
        a._completeShowDialog = function () {
            this._currentDialog.show()
        };
        a.managerLoseFocus = function () {
            if (this._isShowingDialog) {
                var a = this._currentHolderElement;
                (new TWEEN.Tween({
                    value: 0
                })).to({
                    value: 1
                },
                500).onUpdate(function () {
                    a.style.setProperty("opacity", this.value, "")
                }).start()
            }
        };
        a.managerGetFocus = function () {
            if (this._isShowingDialog) {
                var a = this._currentHolderElement;
                (new TWEEN.Tween({
                    value: 1
                })).to({
                    value: 0
                }, 500).onUpdate(function () {
                    a.style.setProperty("opacity", this.value, "")
                }).start()
            }
        };
        a.hideCurrentDialog = function () {
            this._currentDialog.hide();
            this._previousDialog ? this._previousDialog.isPendingUserInput() ? this.showDialog(this._previousDialog) : this._hideBackground() : this._hideBackground()
        };
        a._hideBackground = function () {
            var a = this._backgroundBlocker,
                b = this._element;
            this._currentTween && this._currentTween.stop();
            this._currentTween = (new TWEEN.Tween({
                value: 1
            })).to({
                value: 0
            }, 400).delay(400).onUpdate(function () {
                a.style.setProperty("opacity", this.value, "")
            }).onComplete(function () {
                a.style.setProperty("display", "none", "");
                b.style.setProperty("display", "none", "")
            }).start();
            this._isShowingDialog = !1
        };
        a._dialogCloseClick = function () {
            this._currentDialog.removeEventListener(f.Dialog.CLOSE_DIALOG, this._dialogCloseCallback);
            this.hideCurrentDialog()
        };
        c.create = function (a) {
            var b = new c;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        d = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.loading");
    var c = WEBLAB.namespace("WEBLAB.common.ui.dialog").DialogSubManager;
    if (void 0 === a.DialogManager) {
        var e = function () {
            this._init()
        };
        a.DialogManager = e;
        a = a.DialogManager.prototype = new d;
        a._init = function () {
            this._labReportDialogManager = this._globalDialogManager = this._sectionDialogManager = this._currentDialog = null;
            return this
        };
        a.setElement = function (a, e, b) {
            this._sectionDialogManager = c.create(a);
            this._globalDialogManager = c.create(e);
            this._labReportDialogManager = c.create(b);
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.showDialog = function (a, e) {
            this._currentDialog = a;
            var c = b.Dialog;
            switch (this._currentDialog.getDialogLevel()) {
                case c.DIALOG_LEVEL_SECTION:
                    this._sectionDialogManager.showDialog(this._currentDialog);
                    break;
                case c.DIALOG_LEVEL_GLOBAL:
                    this._globalDialogManager.showDialog(this._currentDialog);
                    break;
                case c.DIALOG_LEVEL_LAB_REPORT:
                    this._labReportDialogManager.showDialog(this._currentDialog)
            }
            switch (e || "normal") {
                case "normal":
                    f.siteManager.getSoundManager().playSound("common/alert", !1, 1, "dialog");
                    break;
                case "error":
                    f.siteManager.getSoundManager().playSound("common/error", !1, 1, "dialog")
            }
        };
        a.hideCurrentDialog = function () {
            var a = b.Dialog;
            switch (this._currentDialog.getDialogLevel()) {
                case a.DIALOG_LEVEL_SECTION:
                    this._sectionDialogManager.hideCurrentDialog();
                    break;
                case a.DIALOG_LEVEL_GLOBAL:
                    this._globalDialogManager.hideCurrentDialog();
                    break;
                case a.DIALOG_LEVEL_LAB_REPORT:
                    this._labReportDialogManager.hideCurrentDialog()
            }
        };
        e.create = function (a, b, c) {
            var d = new e;
            d.setElement(a, b, c);
            return d
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils,
        c = WEBLAB.namespace("WEBLAB.common.ui").LineTitleAndContent,
        e = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners;
    if (void 0 === a.Dialog) {
        var g = function () {
            this._init()
        };
        g.CLOSE_DIALOG = "closeDialog";
        g.DIALOG_LEVEL_SECTION = "dialogLevelSection";
        g.DIALOG_LEVEL_GLOBAL = "dialogLevelGlobal";
        g.DIALOG_LEVEL_LAB_REPORT = "dialogLevelLabReport";
        a.Dialog = g;
        var a = a.Dialog.prototype = new f,
            h = f.prototype;
        a._init = function () {
            this._hrule = this._contentAnimation = this._element = null;
            this._dialogLevel = g.DIALOG_LEVEL_SECTION;
            this._pendingInput = !0;
            this._closeButton = null;
            this._closeButtonCallback = b.createListenerFunction(this, this._closeButtonClick);
            return this
        };
        a.isPendingUserInput = function () {
            return this._pendingInput
        };
        a.setElement = function (a) {
            this._element = a;
            this._hrule = this._element.querySelector(".blackSinglePixel");
            this._contentAnimation = c.create(a);
            return this
        };
        a.getDialogLevel = function () {
            return this._dialogLevel
        };
        a.setDialogLevel = function (a) {
            this._dialogLevel = a
        };
        a.getElement = function () {
            return this._element
        };
        a.show = function () {
            console.log("WEBLAB.common.ui.dialog.LineTitleAndContent::show");
            this._contentAnimation.show();
            for (var a = this._element.querySelectorAll("button"), b = 0.5 * this._element.clientWidth, g = !1, h = 0; h < a.length; h++) {
                var c = a[h];
                c.clientWidth > b && (g = !0);
                g && c.style.setProperty("float", "left", "!important");
                e.addStandardSmallButtonListeners(c, "dialog")
            }
        };
        a.hide = function () {
            this._contentAnimation.hide()
        };
        a.forceClose = function () {
            this._pendingInput = !1;
            this.dispatchCustomEvent(g.CLOSE_DIALOG, null)
        };
        a._closeButtonClick = function () {
            this.dispatchCustomEvent(g.CLOSE_DIALOG, null)
        };
        a.destroy = function () {
            for (var a = this._element.querySelectorAll("button"), b = 0; b < a.length; b++) e.removeStandardSmallButtonListeners(a[b], "dialog");
            this._closeButton = this._hrule = this._element = null;
            d.destroyIfExists(this._contentAnimation);
            this._closeButtonCallback = this._contentAnimation = null;
            h.destroy.call(this)
        };
        g.create = function (a) {
            var e = new g;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        f = WEBLAB.namespace("WEBLAB.common.ui.dialog").Dialog,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils;
    WEBLAB.namespace("WEBLAB.orchestra.constants");
    if (void 0 === a.SimpleDialog) {
        var c = function () {
            this._init()
        };
        a.SimpleDialog = c;
        c.CONFIRM = "simpleDialogConfirm";
        c.CANCEL = "simpleDialogCancel";
        var a = a.SimpleDialog.prototype = new f,
            e = f.prototype;
        a._init = function () {
            e._init.call(this);
            this._openNewTabLink = this._confirmButton = this._cancelButton = null;
            this._onCancelButtonCallback = b.createListenerFunction(this, this._onCancelButtonClicked);
            this._onConfirmButtonCallback = b.createListenerFunction(this, this._onConfirmButtonClicked);
            return this
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            this._cancelButton = this._element.querySelector(".cancelButton");
            d.addListener(this._cancelButton, "click", this._onCancelButtonCallback);
            this._confirmButton = this._element.querySelector(".confirmButton");
            d.addListener(this._confirmButton,
                "click", this._onConfirmButtonCallback);
            return this
        };
        a.hide = function () {
            e.hide.call(this);
            this._pendingInput = !1
        };
        a._onCancelButtonClicked = function () {
            this.dispatchCustomEvent(c.CANCEL, null);
            this.dispatchCustomEvent(f.CLOSE_DIALOG, null);
            this.hide()
        };
        a._onConfirmButtonClicked = function () {
            console.log("WEBLAB.orchestra.ui.dialog.SimpleDialog::_onConfirmButtonClicked");
            this.dispatchCustomEvent(c.CONFIRM, null);
            this.dispatchCustomEvent(f.CLOSE_DIALOG, null)
        };
        c.create = function (a) {
            var e = new c;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.dialog"),
        f = WEBLAB.namespace("WEBLAB.common.ui.dialog").Dialog,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils;
    WEBLAB.namespace("WEBLAB.orchestra.constants");
    if (void 0 === a.SignOutDialog) {
        var c = function () {
            this._init()
        };
        a.SignOutDialog = c;
        var a = a.SignOutDialog.prototype = new f,
            e = f.prototype;
        a._init = function () {
            e._init.call(this);
            this._openNewTabLink = this._leaveButton = this._stayButton = null;
            this._onStayButtonCallback = b.createListenerFunction(this, this._onStayButtonClicked);
            this._onLeaveButtonCallback = b.createListenerFunction(this, this._onLeaveButtonClicked);
            return this
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            this._stayButton = this._element.querySelector(".stayButton");
            d.addListener(this._stayButton, "click", this._onStayButtonCallback);
            this._leaveButton = this._element.querySelector(".leaveButton");
            d.addListener(this._leaveButton, "click", this._onLeaveButtonCallback);
            return this
        };
        a.hide = function () {
            e.hide.call(this);
            this._pendingInput = !1
        };
        a._onStayButtonClicked = function () {
            this.hide()
        };
        a._onLeaveButtonClicked = function () {
            console.log("WEBLAB.common.ui.dialog.SignOutDialog::_onLeaveButtonClicked")
        };
        c.create = function (a) {
            var e = new c;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils");
    var d = WEBLAB.namespace("WEBLAB.common").LoginManager,
        c = WEBLAB.namespace("WEBLAB.common.singletons");
    if (void 0 === a.UserSignInPrompt) {
        var e = function () {
            this._init()
        };
        e.LOGOUT = "userSignInPromptLogout";
        a.UserSignInPrompt = e;
        var a = a.UserSignInPrompt.prototype = new f,
            g = f.prototype;
        a._init = function () {
            this._notLoggedInTemplate = this._loggedInTemplate = this._logoutButton = this._element = null;
            this._youTubePromptMode = !1;
            this._youtubePrompt = this._ytTemplateDisallowed = this._ytTemplateNotSignedIn = this._ytTemplateSignedIn = null;
            this._logoutButtonCallback = b.createListenerFunction(this, this._logoutButtonClicked);
            this._loginStatusCallback = b.createListenerFunction(this, this.updateLoggedInState);
            c.siteManager.getLoginManager().addEventListener(d.STATUS_CHANGED, this._loginStatusCallback);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            a = c.siteManager.getTemplateManager();
            this._loggedInTemplate = a.getTemplate("labReport/isLoggedInPrompt");
            this._notLoggedInTemplate = a.getTemplate("labReport/isNotLoggedInPrompt");
            this.updateLoggedInState();
            return this
        };
        a.updateLoggedInState = function () {
            if (c.siteManager.getLoginManager().getIsLoggedIn()) {
                this.clearElement();
                var a = this._loggedInTemplate.cloneNode(!0);
                a.innerHTML = this._addUserName(a.innerHTML);
                this._logoutButton && this._logoutButton.removeEventListener("click", this._logoutButtonCallback);
                this._logoutButton = a.querySelector(".signOutLink");
                this._logoutButton.addEventListener("click", this._logoutButtonCallback);
                this._element.appendChild(a)
            } else this.clearElement(), this._element.appendChild(this._notLoggedInTemplate);
            this._youTubePromptMode && this.showYouTubePrompt()
        };
        a.setYouTubePrompt = function (a, e, b) {
            this._youTubePromptMode = !0;
            this._ytTemplateSignedIn = a;
            this._ytTemplateNotSignedIn = e;
            this._ytTemplateDisallowed = b
        };
        a.showYouTubePrompt = function (a) {
            a || (a = !1);
            var e = c.siteManager.getLoginManager().getIsLoggedIn();
            this._youtubePrompt && this._element.removeChild(this._youtubePrompt);
            this._youtubePrompt = a ? this._ytTemplateDisallowed.cloneNode(!0) : e ? this._ytTemplateSignedIn.cloneNode(!0) : this._ytTemplateNotSignedIn.cloneNode(!0);
            e ? (this._youtubePrompt.style.setProperty("margin-bottom", "10px", ""), this._element.insertBefore(this._youtubePrompt, this._element.firstChild)) : (this._youtubePrompt.style.setProperty("margin-top", "10px", ""), this._element.appendChild(this._youtubePrompt))
        };
        a.clearElement = function () {
            this._element.innerHTML =
                "";
            this._youtubePrompt = null
        };
        a.setSpinningState = function () {
            this.clearElement();
            var a = document.createElement("div");
            a.className = "spinnerSmall black";
            a.style.setProperty("float", "left", "");
            this._element.appendChild(a)
        };
        a.getIsLoggedIn = function () {
            c.siteManager.getLoginManager();
            return oginManager.getIsLoggedIn()
        };
        a._addUserName = function (a) {
            var e = c.siteManager.getName();
            return a.replace(/\[(.*?)\]/, e)
        };
        a.getElement = function () {
            return this._element
        };
        a._logoutButtonClicked = function (a) {
            a.preventDefault();
            c.siteManager.getLoginManager().logout();
            this.setSpinningState();
            return !1
        };
        a.destroy = function () {
            this._element = null;
            this._logoutButton && this._logoutButton.removeEventListener("click", this._logoutButtonCallback);
            this._youtubePrompt = this._notLoggedInTemplate = this._loggedInTemplate = this._logoutButton = null;
            g.destroy.call(this)
        };
        e.create = function (a) {
            var b = new e;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.robots.vectorise"),
        f = WEBLAB.namespace("WEBLAB.utils.canvas.utils").CanvasFactory,
        b = WEBLAB.namespace("WEBLAB.utils.canvas.animation"),
        d = 0;
    if (void 0 === a.SVGToCanvas) {
        a.SVGToCanvas = function () {
            ++d;
            this.animatedPaths = []
        };
        var c = a.SVGToCanvas.prototype;
        c.createFromSVGString = function (a, b, c, d) {
            this.svgStr = a;
            this.animating = !1;
            clearTimeout(this.timeout);
            this.ctx ? (this.ctx.canvas.width = b, this.ctx.canvas.height = c) : this.ctx = f.create(b, c);
            this.json = this.xmlToJson((new window.DOMParser).parseFromString(this.svgStr,
                "text/xml"));
            var a = parseFloat(this.json.svg.info.width.substr(0, this.json.svg.info.width.indexOf("px"))),
                k = parseFloat(this.json.svg.info.height.substr(0, this.json.svg.info.height.indexOf("px")));
            "x" == (d || "y") ? (this.ratio = b / a, this.offset = {
                x: 0,
                y: (c - k * this.ratio) / 2
            }) : (this.ratio = c / k, this.offset = {
                x: (b - a * this.ratio) / 2,
                y: 0
            });
            this.paths1 = this.getGradPaths(this.json.svg.path, "#grad1");
            this.longest = 0;
            this.findLongest(this.paths1);
            return this.ctx.canvas
        };
        c.createStageSetup = function (a) {
            this.stage = new b.Stage(this.ctx.canvas,
                "SVGToCanvas");
            this.createGradSetup(1, a)
        };
        c.render = function () {
            this.updateStage();
            this.animating && requestAnimFrame(this.render.bind(this))
        };
        c.createGradSetup = function (a, g) {
            this["drawing" + a] = f.clone(this.ctx.canvas);
            this["drawing" + a].strokeStyle = this.strokeStyle;
            this["drawing" + a].lineWidth = this.lineWidth;
            this["grad" + a] = new b.Sprite(f.clone(this.ctx.canvas).canvas);
            this.stage.addChild(this["grad" + a], "grad " + a);
            var c = this.normalisePerc(g[a - 1].info.x1) * this["grad" + a].canvas.width,
                d = this.normalisePerc(g[a - 1].info.y1) * this["grad" + a].canvas.height,
                k = this.normalisePerc(g[a - 1].info.x2) * this["grad" + a].canvas.width,
                j = this.normalisePerc(g[a - 1].info.y2) * this["grad" + a].canvas.height;
            this["grad" + a].gradient = this["grad" + a].ctx.createLinearGradient(c, d, k, j);
            c = this.getHexColour(g[a - 1].stop[0].info.style);
            d = this.getHexColour(g[a - 1].stop[1].info.style);
            this["grad" + a].gradient.addColorStop(0, c);
            this["grad" + a].gradient.addColorStop(1, d)
        };
        c.drawGradient = function (a) {
            var b = this["grad" + a].ctx;
            b.save();
            b.fillStyle = this["grad" + a].gradient;
            b.beginPath();
            b.rect(0, 0, b.canvas.width, b.canvas.height);
            b.fill();
            b.restore()
        };
        c.updateStage = function () {
            this.drawGradient(1);
            f.mask(this.grad1.canvas, this.drawing1.canvas);
            this.stage.update()
        };
        c.normalisePerc = function (a) {
            return parseFloat(a.match(/[0-9]+/) / 100)
        };
        c.getHexColour = function (a) {
            return a.match(/[#].{6}/)
        };
        c.initLines = function (a, b) {
            this.strokeStyle = b || "black";
            this.lineWidth = a;
            this.lineWidthErase = 2 * a
        };
        c.findLongest = function (a) {
            for (var b = 0, c = a.length; b < c; ++b) this.longest = Math.max(a[b].length,
            this.longest)
        };
        c.getGradPaths = function (a, b) {
            for (var c = [], d = [], f = 0, j = a.length; f < j; ++f) - 1 < a[f].info.stroke.indexOf(b) && c.push(a[f].info.d);
            f = 0;
            for (j = c.length; f < j; f += 3) {
                var n = /([a-zA-Z])\s*([0-9 ,.e\-+]*[0-9])\S*/g,
                    q = c[f].match(n),
                    m = c[f + 1].match(n),
                    n = c[f + 2].match(n),
                    o = [];
                o.push(this.getSection(q[0]), this.getSection(q[1]));
                for (var q = 1, p = m.length; q < p; ++q) o.push(this.getSection(m[q]));
                o.push(this.getSection(n[1]));
                d.push(o)
            }
            return d
        };
        c.getSection = function (a) {
            var a = a.split(" "),
                b;
            if ("M" == a[0] || "L" == a[0]) b = {
                x: parseFloat(a[1]),
                y: parseFloat(a[2])
            };
            "Q" == a[0] && (b = {
                ctrlX: parseFloat(a[1]),
                ctrlY: parseFloat(a[2]),
                x: parseFloat(a[3]),
                y: parseFloat(a[4])
            });
            return b
        };
        c.draw = function (a) {
            (this.solid = a || !1) ? (a = this.ctx, this.ctx.strokeStyle = this.strokeStyle, this.ctx.lineWidth = this.lineWidth) : (this.createStageSetup(this.json.svg.defs.linearGradient), a = this.drawing1);
            this.drawPathsNow(this.paths1, a)
        };
        c.drawPathsNow = function (a, b) {
            b.save();
            for (var c = 0, d = a.length; c < d; ++c) {
                var f = a[c];
                b.beginPath();
                b.moveTo(this.offset.x + f[0].x * this.ratio, this.offset.y + f[0].y * this.ratio);
                b.lineTo(this.offset.x + f[1].x * this.ratio, this.offset.y + f[1].y * this.ratio);
                for (var j = 2, n = f.length - 1; j < n; ++j) b.quadraticCurveTo(this.offset.x + f[j].ctrlX * this.ratio, this.offset.y + f[j].ctrlY * this.ratio, this.offset.x + f[j].x * this.ratio, this.offset.y + f[j].y * this.ratio);
                b.lineTo(this.offset.x + f[f.length - 1].x * this.ratio, this.offset.y + f[f.length - 1].y * this.ratio);
                b.stroke()
            }
            b.restore();
            this.solid || this.updateStage()
        };
        c.swapDirection = function () {
            "forwards" == this.direction ? this.direction = "reverse" : this.direction = "forwards"
        };
        c.animate = function (a, b, c) {
            if (null == this.direction) this.direction = "forwards";
            if (c) this.onComplete = c;
            this.killOldPaths();
            this.pathSectionMS = 1E3 * a / this.longest;
            (this.solid = b || !1) ? (a = this.ctx, this.ctx.strokeStyle = this.strokeStyle, this.ctx.lineWidth = this.lineWidth) : (this.createStageSetup(this.json.svg.defs.linearGradient), a = this.drawing1);
            "reverse" == this.direction ? (a.globalCompositeOperation = "destination-out", a.lineCap = "square", a.lineWidth = this.lineWidthErase) : (a.globalCompositeOperation = "source-over", a.lineCap = "butt", a.lineWidth = this.lineWidth);
            this.completed = 0;
            this.animatePaths(1, this.paths1, a, this.onPathComplete.bind(this));
            this.animating = !0;
            this.solid || this.render()
        };
        c.animatePaths = function (b, c, d, f) {
            this.pathsCompleted = 0;
            for (var f = f || null, k = 0, j = c.length; k < j; ++k) {
                var n = new a.AnimatedSVGCanvasPath(b, k, c[k], this.pathSectionMS, d, this.ratio, this.offset);
                n.start(this.longest, f);
                this.animatedPaths.push(n)
            }
        };
        c.onPathComplete = function () {
            ++this.pathsCompleted;
            if (this.pathsCompleted == this.paths1.length && (this.animating = !1, this.onComplete)) this.onComplete()
        };
        c.killOldPaths = function () {
            for (var a in this.animatedPaths) this.animatedPaths[a].killAll();
            clearTimeout(this.timeout);
            this.animatedPaths = []
        };
        c.xmlToJson = function (a) {
            var b = {};
            if (1 == a.nodeType) {
                if (0 < a.attributes.length) {
                    b.info = {};
                    for (var c = 0; c < a.attributes.length; c++) {
                        var d = a.attributes.item(c);
                        b.info[d.nodeName] = d.nodeValue
                    }
                }
            } else if (3 == a.nodeType) b = a.nodeValue;
            if (a.hasChildNodes()) for (c = 0; c < a.childNodes.length; c++) {
                var d = a.childNodes.item(c),
                    f = d.nodeName;
                if ("undefined" == typeof b[f]) b[f] = this.xmlToJson(d);
                else {
                    if ("undefined" == typeof b[f].length) {
                        var j = b[f];
                        b[f] = [];
                        b[f].push(j)
                    }
                    b[f].push(this.xmlToJson(d))
                }
            }
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui"),
        f = WEBLAB.namespace("WEBLAB.utils.animation").DomElementPositionTween,
        b = WEBLAB.namespace("WEBLAB.utils.animation").DomElementOpacityTween,
        d = WEBLAB.namespace("WEBLAB.utils.animation").DomElementInDomTween;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    var c = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    if (void 0 === a.ReplaceableContent) {
        var e = function () {
            this._init()
        };
        a.ReplaceableContent = e;
        e.DIRECTION_REVERESED = 0;
        e.DIRECTION_SAME = 1;
        e.DIRECTION_LEFT = 2;
        e.DIRECTION_RIGHT = 3;
        a = e.prototype = new c;
        a._init = function () {
            this._horizontalClipping = this._verticalClipping = !0;
            this._holderElement = document.createElement("div");
            this._holderElement.style.setProperty("position", "absolute", "");
            this._clipElement = document.createElement("div");
            this._clipElement.style.setProperty("overflow-x", "hidden", "");
            this._clipElement.style.setProperty("overflow-y", "hidden",
                "");
            this._clipElement.style.setProperty("height", "100px", "");
            this._clipElement.style.setProperty("position", "absolute", "");
            this._holderElement.appendChild(this._clipElement);
            this._contentHolder = document.createElement("div");
            this._contentHolder.style.setProperty("position", "absolute", "");
            this._contentHolder.style.setProperty("width", "100%", "");
            this._clipElement.appendChild(this._contentHolder);
            this._up = !0;
            this._showDirection = e.DIRECTION_SAME;
            this._hideDirection = e.DIRECTION_REVERESED;
            this._width = this._margin = 0;
            this._clipHeight = 100;
            this._outAnimationTime = this._inAnimationTime = 0.5;
            this._replaceDelay = 0.3;
            this._pastContents = [];
            this._currentRealContent = this._currentContent = null;
            return this
        };
        a.getElement = function () {
            return this._holderElement
        };
        a.getCurrentContentElement = function () {
            return null !== this._currentContent ? this._currentContent.contentElement : null
        };
        a.setup = function (a, b, e) {
            this._up = a;
            this._margin = b;
            this._width = e;
            this._setupClipping()
        };
        a.setWidth = function (a) {
            this._width = a;
            this._setupClipping()
        };
        a.getWidth = function () {
            return this._width
        };
        a.setAnimationTimes = function (a, b, e) {
            this._inAnimationTime = a;
            this._outAnimationTime = b;
            this._replaceDelay = e;
            return this
        };
        a.setMargin = function (a) {
            this._margin = a
        };
        a.setClipHeight = function (a) {
            this._clipHeight = a;
            this._setupClipping()
        };
        a.setVerticalClipEnabled = function (a) {
            this._verticalClipping = a;
            this._setupClipping()
        };
        a.setHorizontalClipEnabled = function (a) {
            this._horizontalClipping = a;
            this._setupClipping()
        };
        a._setupClipping = function () {
            var a = 0;
            this._up && (a = -1 * this._clipHeight);
            this._clipElement.style.setProperty("top", a + "px", "");
            this._clipElement.style.setProperty("height", this._clipHeight + "px", "");
            this._contentHolder.style.setProperty("top", -1 * a + "px", "");
            this._clipElement.style.setProperty("width", this._width + "px", "");
            this._clipElement.style.setProperty("overflow-y", this._verticalClipping ? "hidden" : "visible", "");
            this._clipElement.style.setProperty("overflow-x", this._horizontalClipping ? "hidden" : "visible", "")
        };
        a._createContent = function (a, e) {
            a.style.setProperty("position",
                "absolute", "");
            a.style.setProperty("top", "0px", "");
            a.style.setProperty("width", "100%", "");
            var c = d.create(a, this._contentHolder, !0);
            c.update();
            var k = this._margin;
            this._up && (k += a.clientHeight, k *= -1);
            var j = e ? 0 : 1,
                k = f.create(a, 0, e ? this._up ? k + 10 : k - 10 : k);
            k.update();
            j = b.create(a, j);
            j.update();
            return {
                position: k,
                opacity: j,
                inDom: c,
                contentElement: a
            }
        };
        a.showInitialContent = function (a, b, e) {
            var c = this._createContent(a, b);
            this._currentContent = c;
            if (b) e = !isNaN(e) ? e : 0, b = this._margin, this._up && (b += a.clientHeight, b *= -1),
            c.position.animateTo(0, b, this._inAnimationTime, TWEEN.Easing.Quadratic.EaseOut, e), c.opacity.animateTo(1, this._inAnimationTime, TWEEN.Easing.Quadratic.EaseOut, e)
        };
        a.replaceContent = function (a, b) {
            b = !isNaN(b) ? b : 0;
            if (null !== this._currentContent) if (this._currentContent.contentElement !== a) {
                this._currentContent.position.animateTo(0, this._up ? this._currentContent.position.getYPosition() - 10 : this._currentContent.position.getYPosition() + 10, this._outAnimationTime, TWEEN.Easing.Quadratic.EaseOut, b);
                this._currentContent.opacity.animateTo(0,
                this._outAnimationTime, TWEEN.Easing.Quadratic.EaseOut, b);
                this._currentContent.inDom.animateTo(!1, this._outAnimationTime + b);
                this._pastContents.push(this._currentContent);
                var e = this._createContent(a, !0);
                this._currentContent = e;
                var c = this._margin;
                this._up && (c += a.clientHeight, c *= -1);
                e.position.animateTo(0, c, this._inAnimationTime, TWEEN.Easing.Quadratic.EaseOut, this._replaceDelay + b);
                e.opacity.animateTo(1, this._inAnimationTime, TWEEN.Easing.Quadratic.EaseOut, this._replaceDelay + b)
            } else this.stopHideContent(),
            this._contentHolder.appendChild(this._currentContent.contentElement), c = this._margin, this._up && (c += a.clientHeight, c *= -1), this._currentContent.position.animateTo(0, c, 0, TWEEN.Easing.Quadratic.EaseOut, 0), this._currentContent.opacity.animateTo(1, 0, TWEEN.Easing.Quadratic.EaseOut, 0);
            else this.showInitialContent(a, !0, b)
        };
        a.hideContent = function (a) {
            a = !isNaN(a) ? a : 0;
            if (null !== this._currentContent) this._currentContent.position.animateTo(0, this._up ? this._currentContent.position.getYPosition() + 10 : this._currentContent.position.getYPosition() - 10, this._outAnimationTime, TWEEN.Easing.Quadratic.EaseOut, a), this._currentContent.opacity.animateTo(0, this._outAnimationTime, TWEEN.Easing.Quadratic.EaseOut, a), this._currentContent.inDom.animateTo(!1, this._outAnimationTime + a), this._pastContents.push(this._currentContent), this._currentContent = null
        };
        a.stopHideContent = function () {
            this._currentContent.position._tween.stop();
            this._currentContent.opacity._tween.stop();
            this._currentContent.inDom.stop()
        };
        a.destroy = function () {
            this._currentRealContent = this._currentContent = this._pastContents = this._contentHolder = this._clipElement = this._holderElement = null
        };
        e.create = function (a, b, c) {
            var d = new e;
            d.setup(a, b, c);
            return d
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui"),
        f = a.ReplaceableContent;
    WEBLAB.namespace("WEBLAB.utils.data");
    var b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        c = WEBLAB.namespace("WEBLAB.utils.htmldom").DomElementCreator,
        e = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        g = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.HelpPointer) {
        var h = function () {
            this._init()
        };
        a.HelpPointer = h;
        a = h.prototype = new d;
        a._init = function () {
            this._element = document.createElement("div");
            this._element.style.setProperty("position", "absolute", "");
            e.addClass(this._element, "helpPointer");
            this._svgElement = c.createSvg(document);
            this._element.appendChild(this._svgElement);
            this._svgElement.style.setProperty("position", "absolute", "");
            this._groupElement = c.createSvgElement(this._svgElement, "g");
            this._groupTransform = this._svgElement.createSVGTransform();
            this._groupElement.transform.baseVal.appendItem(this._groupTransform);
            this._pointElement = c.createSvgElement(this._groupElement,
                "rect");
            this._pointElement.x.baseVal.value = -2;
            this._pointElement.y.baseVal.value = -2;
            this._pointElement.width.baseVal.value = 4;
            this._pointElement.height.baseVal.value = 4;
            this._pointElement.style.setProperty("opacity", 0, "");
            this._pointElement.style.setProperty("fill", "#000000", "");
            this._lineElement = c.createSvgElement(this._groupElement, "path");
            this._lineElement.style.setProperty("fill", "none", "");
            this._lineElement.style.setProperty("stroke", "#000000", "");
            this._topElement = c.createChild(this._element, "div");
            this._topElement.style.setProperty("position", "absolute", "");
            this._topContentElement = null;
            this._bottomElement = c.createChild(this._element, "div");
            this._bottomElement.style.setProperty("position", "absolute", "");
            this._bottomElement.id = "_bottomElement";
            this._bottomContentElement = null;
            this._topContent = f.create(!0, 10, 100);
            this._bottomContent = f.create(!1, 10, 100);
            this._topElement.appendChild(this._topContent.getElement());
            this._bottomElement.appendChild(this._bottomContent.getElement());
            this._bottomContentHolderElement = this._topContentHolderElement = this._bottomContentElement = this._topContentElement = null;
            this._restLineLength = this._bendLineLength = this._checkHeight = this._height = this._checkWidth = this._width = 0;
            this._updateBottomContentSize = this._updateTopContentSize = !0;
            this._animationValues = {
                pointEnvelope: 0,
                lineEnvelope: 0
            };
            this._updateTimeCallback = b.createListenerFunction(this, this._updateTime);
            this._animationValuesTween = (new TWEEN.Tween(this._animationValues)).onUpdate(this._updateTimeCallback);
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.getTopContent = function () {
            return this._topContent
        };
        a.getBottomContent = function () {
            return this._bottomContent
        };
        a.getBottomElement = function () {
            return this._bottomElement
        };
        a.setPosition = function (a, b) {
            this._element.style.setProperty("left", a + "px", "");
            this._element.style.setProperty("top", b + "px", "")
        };
        a.setMargins = function (a, b) {
            this._topContent.setMargin(a);
            this._bottomContent.setMargin(b);
            return this
        };
        a.setUpdateContentSize = function (a, b) {
            this._updateTopContentSize = a;
            this._updateBottomContentSize = b
        };
        a.setSize = function (a, b) {
            this._width = a;
            this._height = b;
            this._checkWidth = this._width;
            this._checkHeight = this._height;
            this._svgElement.style.setProperty("width", Math.max(4, Math.abs(this._width) + 2) + "px", "");
            this._svgElement.style.setProperty("height", Math.max(4, Math.abs(this._height) + 2) + "px", "");
            0 <= this._width ? (this._groupTransform.matrix.e = 2, this._svgElement.style.setProperty("left", "-2px", "")) : (this._groupTransform.matrix.e = -1 * this._width, this._svgElement.style.setProperty("left", this._width + "px",
                ""));
            0 <= this._height ? (this._groupTransform.matrix.f = 2, this._svgElement.style.setProperty("top", "-2px", "")) : (this._groupTransform.matrix.f = -1 * this._height, this._svgElement.style.setProperty("top", this._height + "px", ""));
            this._groupElement.transform.baseVal.clear();
            this._groupElement.transform.baseVal.appendItem(this._groupTransform);
            this._bendLineLength = Math.sqrt(2 * Math.pow(this._height - 4, 2));
            this._restLineLength = Math.abs(this._width) - Math.abs(this._height);
            this._topContent.setWidth(this._restLineLength);
            this._bottomContent.setWidth(this._restLineLength);
            0 <= this._width ? (this._topElement.classList.add("right"), this._topElement.classList.remove("left"), this._bottomElement.classList.add("right"), this._bottomElement.classList.remove("left")) : (this._topElement.classList.add("left"), this._topElement.classList.remove("right"), this._bottomElement.classList.add("left"), this._bottomElement.classList.remove("right"));
            return this
        };
        a._setupClipping = function () {
            this._topElement.style.setProperty("width", this._restLineLength +
                "px", "");
            this._topElement.style.setProperty("height", "0px", "");
            0 <= this._width ? this._topElement.style.setProperty("left", this._width - this._restLineLength + "px", "") : this._topElement.style.setProperty("left", this._width + "px", "");
            this._topElement.style.setProperty("top", this._height - this._topElement.clientHeight + "px", "");
            this._bottomElement.style.setProperty("width", this._restLineLength + "px", "");
            this._bottomElement.style.setProperty("height", "0px", "");
            0 <= this._width ? this._bottomElement.style.setProperty("left",
            this._width - this._restLineLength + "px", "") : this._bottomElement.style.setProperty("left", this._width + "px", "");
            this._bottomElement.style.setProperty("top", this._height + 1 + "px", "")
        };
        a.show = function () {
            this._setupClipping();
            this._animationValuesTween.to({
                pointEnvelope: 1,
                lineEnvelope: 1
            }, 400).delay(0).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            var a = -1;
            null !== this._topContentElement && (this._updateTopContentSize && this._topContent.setWidth(this._checkWidth), this._topContent.replaceContent(this._topContentHolderElement),
            this._updateTopContentSize && (a = Math.max(a, this._topContentElement.clientWidth + this._topContentElement.offsetLeft), console.log("maxWidth = " + a)));
            null !== this._bottomContentElement && (this._updateBottomContentSize && this._bottomContent.setWidth(this._checkHeight), this._bottomContent.replaceContent(this._bottomContentHolderElement), this._updateBottomContentSize && (a = Math.max(a, this._bottomContentElement.clientWidth + this._bottomContentElement.offsetLeft))); - 1 < a && (this.setSize((0 <= this._width ? 1 : -1) * (a + 1 + Math.abs(this._height)), this._height), this._setupClipping());
            this._updateTime()
        };
        a.hide = function () {
            this._animationValuesTween.to({
                pointEnvelope: 0,
                lineEnvelope: 0
            }, 400).delay(200).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            this._topContent.hideContent();
            this._bottomContent.hideContent()
        };
        a.getContentWidth = function () {
            return 100
        };
        a.setContent = function (a, b) {
            this._topContentElement = a;
            if (null !== this._topContentElement) this._topContentHolderElement = document.createElement("div"), this._topContentHolderElement.appendChild(this._topContentElement);
            this._bottomContentElement = b;
            if (null !== this._bottomContentElement) this._bottomContentHolderElement = document.createElement("div"), this._bottomContentHolderElement.appendChild(this._bottomContentElement);
            this._updateTime()
        };
        a.replaceContent = function (a, b) {
            var e = -1;
            if (a !== this._topContentElement) this._topContentHolderElement = document.createElement("div"), this._topContentElement = a, this._topContentHolderElement.appendChild(this._topContentElement), null !== this._topContentElement && (this._updateTopContentSize && this._topContent.setWidth(this._checkWidth), this._topContent.replaceContent(this._topContentHolderElement), this._updateTopContentSize && (e = Math.max(e, this._topContentElement.clientWidth + this._topContentElement.offsetLeft), console.log("maxWidth = " + e + " for content : " + this._topContentElement)));
            if (b !== this._bottomContentElement) this._bottomContentHolderElement = document.createElement("div"), this._bottomContentElement = b, this._bottomContentHolderElement.appendChild(this._bottomContentElement), null !== this._bottomContentElement && (this._updateBottomContentSize && this._bottomContent.setWidth(this._checkHeight), this._bottomContent.replaceContent(this._bottomContentHolderElement), this._updateBottomContentSize && (e = Math.max(e, this._bottomContentElement.clientWidth + this._bottomContentElement.offsetLeft))); - 1 < e && (this.setSize((0 <= this._width ? 1 : -1) * (e + 1 + Math.abs(this._height)), this._height), this._setupClipping());
            this._updateTime()
        };
        a._updateTime = function () {
            this._pointElement.style.setProperty("opacity", this._animationValues.pointEnvelope,
                "");
            var a = this._animationValues.lineEnvelope * (this._bendLineLength + this._restLineLength);
            this._lineElement.pathSegList.clear();
            if (0 < a) {
                var b = 4 * (this._width / Math.abs(this._width)),
                    e = 4 * (this._height / Math.abs(this._height));
                this._lineElement.pathSegList.appendItem(this._lineElement.createSVGPathSegMovetoAbs(b, e));
                var c = Math.max(4, Math.abs(this._height)) * (this._width / Math.abs(this._width)),
                    d = this._height;
                a > this._bendLineLength ? (this._lineElement.pathSegList.appendItem(this._lineElement.createSVGPathSegLinetoAbs(c,
                d)), a = (a - this._bendLineLength) / this._restLineLength, this._lineElement.pathSegList.appendItem(this._lineElement.createSVGPathSegLinetoAbs(a * this._width + (1 - a) * c, a * this._height + (1 - a) * d))) : (a /= this._bendLineLength, this._lineElement.pathSegList.appendItem(this._lineElement.createSVGPathSegLinetoAbs(a * c + (1 - a) * b, a * d + (1 - a) * e)))
            }
        };
        a.destroy = function () {
            this._bottomContentHolderElement = this._topContentHolderElement = this._bottomContentElement = this._topContentElement = this._bottomElement = this._topElement = this._lineElement = this._pointElement = this._groupTransform = this._groupElement = this._svgElement = this._element = null;
            g.destroyIfExists(this._topContent);
            this._topContent = null;
            g.destroyIfExists(this._bottomContent);
            this._bottomContent = null;
            if (null !== this._animationValuesTween) this._animationValuesTween.stop(), this._animationValuesTween = null;
            this._updateTimeCallback = this._animationValues = null
        };
        h.create = function () {
            return new h
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.sound"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    if (void 0 === a.Sound) {
        var d = function () {
            this._loader = this._buffer = this._context = this._url = null
        };
        a.Sound = d;
        a = d.prototype = new f;
        d.LOADED = "loaded";
        d.ERROR = "error";
        d.DECODED = "decoded";
        a.setup = function (a, b) {
            this._url = a;
            this._context = b;
            return this
        };
        a.loadAndDecode = function () {
            this._loader = new XMLHttpRequest;
            this._loader.open("GET", this._url, !0);
            this._loader.responseType = "arraybuffer";
            this._loader.onreadystatechange = b.createListenerFunction(this, this._onReadyStateChange);
            this._loader.send(null);
            return this
        };
        a._onReadyStateChange = function () {
            switch (this._loader.readyState) {
                case 4:
                    400 > this._loader.status ? (this.dispatchCustomEvent(d.LOADED, null), this._context.decodeAudioData(this._loader.response, b.createListenerFunction(this, this._onBufferDecoded), b.createListenerFunction(this, this._onBufferDecodeError))) : this.dispatchCustomEvent(d.ERROR,
                    null)
            }
        };
        a._onBufferDecoded = function (a) {
            this._buffer = a;
            this.dispatchCustomEvent(d.DECODED, this._buffer)
        };
        a._onBufferDecodeError = function () {
            console.log("WEBLAB.orchestra.loading.Sound::_onBufferDecodeError");
            this.dispatchCustomEvent(d.ERROR, null)
        };
        a.getBuffer = function () {
            return this._buffer
        };
        a.destroy = function () {
            this._buffer = this._context = this._url = this._loader = this._loader.onreadystatechange = null
        };
        d.create = function (a, b) {
            var g = new d;
            g.setup(a, b);
            return g
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.sound"),
        f = WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.utils.data");
    var b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    WEBLAB.namespace("WEBLAB.utils.events");
    var d = WEBLAB.namespace("WEBLAB.common").FileManager,
        c = WEBLAB.namespace("WEBLAB.utils.loading").SequentialJSLoader;
    if (void 0 === a.VirtualPlayerJSLoader) {
        var e = function () {
            this.isLoaded = this.isLoading = !1;
            this._sequentialLoader = this._fileManager = null
        };
        a.VirtualPlayerJSLoader = e;
        var a = e.prototype = new b,
            g = b.prototype;
        e.LOADED = "loaded";
        e.ERROR = "error";
        a.setup = function () {
            this._fileManager = new d;
            this._sequentialLoader = new c;
            return this
        };
        a.getNeedsLoad = function () {
            return !(this.isLoaded || WEBLAB.namespace("WEBLAB.orchestra.ui.player").RecordedPlayback)
        };
        a.load = function () {
            if (!this.isLoading && !this.isLoaded && !WEBLAB.namespace("WEBLAB.orchestra.ui.player").RecordedPlayback) return this.isLoading = !0, this._loadVirtualPlayerXML(), !0
        };
        a._loadVirtualPlayerXML = function () {
            console.log("VirtualPlayerJSLoader :: Loading Virtual Player JS");
            this._fileManager.addEventListener(d.PARSED, this._loadVirtualPlayerJS.bind(this), !1);
            this._fileManager.parse(["/files/xml/common/orchestra-virtual-player.xml"])
        };
        a._loadVirtualPlayerJS = function (a) {
            var a = a.detail,
                b = [],
                e;
            for (e in a) b = b.concat(a[e]);
            this._sequentialLoader.addEventListener(c.LOADED, this._virtualPlayerJSLoaded.bind(this), !1);
            this._sequentialLoader.load(b, !1)
        };
        a._virtualPlayerJSLoaded = function () {
            this.isLoading = !1;
            this.isLoaded = !0;
            this.dispatchCustomEvent(e.LOADED)
        };
        a.alreadyLoaded = function () {
            this.isLoaded = !0;
            this.isLoading = !1
        };
        a.destroy = function () {
            this._sequentialLoader = this._fileManager = null;
            g.destroy.call(this)
        };
        e.createSingleton = function () {
            if (void 0 === f.VirtualPlayerJSLoader) f.VirtualPlayerJSLoader = new e, f.VirtualPlayerJSLoader.setup();
            return f.VirtualPlayerJSLoader
        };
        e.getSingleton = function () {
            return f.VirtualPlayerJSLoader
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.sound"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = WEBLAB.namespace("WEBLAB.orchestra.constants"),
        d = WEBLAB.namespace("WEBLAB.common.sound").Sound,
        c = WEBLAB.namespace("WEBLAB.utils.data").ArrayFunctions,
        e = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        g = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    if (void 0 === a.OrchestraSoundLoader) {
        var h = function () {
            this._audioContext = null;
            this._maxNumberOfConcurrentLoaders = 5;
            this._sounds = [];
            this._waitingSounds = [];
            this._loadingSounds = [];
            this._decodingSounds = [];
            this._context = null;
            this._hasError = this._isLoading = !1
        };
        a.OrchestraSoundLoader = h;
        var a = h.prototype = new e,
            l = e.prototype;
        h.LOADED = "loaded";
        h.ERROR = "error";
        a.setup = function () {
            this._context = this.getAudioContext();
            return this
        };
        a.hasAudioContext = function () {
            return "undefined" != typeof webkitAudioContext
        };
        a.getAudioContext = function () {
            if (null === this._audioContext && webkitAudioContext) this._audioContext = new webkitAudioContext;
            return this._audioContext
        };
        a.getSounds = function () {
            return this._sounds
        };
        a.isLoaded = function () {
            return 0 === this._waitingSounds.length && 0 === this._loadingSounds.length && 0 === this._decodingSounds.length
        };
        a.isLoading = function () {
            return this._isLoading
        };
        a.loadAndDecode = function () {
            if (!this._isLoading) return this._isLoading = !0, this._continueLoading(), this
        };
        a.stopLoading = function () {
            this._isLoading = !1
        };
        a.loadVirtualPlayerSounds = function () {
            if (!this.isLoaded() && !this.isLoading() || 0 == this.getSounds().length) {
                for (var a = b.InstrumentIds, e = [],
                d = 0; 8 > d; d++) c.generateList(b.InstrumentIds.INSTRUMENT_FILE_PATH_PREFIX[d], 0, 6, ".wav", e);
                this.addSoundsByPath(e);
                this.addSoundByPath(a.BACKGROUND_TRACK_FILE_PATH);
                this.loadAndDecode()
            }
        };
        a._loadSound = function (a) {
            a.addEventListener(d.LOADED, g.createListenerFunctionWithArguments(this, this._soundLoaded, [a]));
            a.addEventListener(d.DECODED, g.createListenerFunctionWithArguments(this, this._soundDecoded, [a]));
            a.addEventListener(d.ERROR, g.createListenerFunctionWithArguments(this, this._soundLoadingError, [a]));
            this._loadingSounds.push(a);
            a.loadAndDecode()
        };
        a._continueLoading = function () {
            for (; 0 < this._waitingSounds.length && this._loadingSounds.length < this._maxNumberOfConcurrentLoaders && this._isLoading;) this._loadSound(this._waitingSounds.shift())
        };
        a._soundLoaded = function (a) {
            this._loadingSounds.splice(this._loadingSounds.indexOf(a), 1);
            this._decodingSounds.push(a);
            this._hasError || this._continueLoading()
        };
        a._soundDecoded = function (a) {
            this._decodingSounds.splice(this._decodingSounds.indexOf(a), 1);
            !this._hasError && 0 === this._waitingSounds.length && 0 === this._loadingSounds.length && 0 === this._decodingSounds.length && this._isLoading && this.dispatchCustomEvent(h.LOADED, null)
        };
        a._soundLoadingError = function () {
            console.log("WEBLAB.orchestra.loading.OrchestraSoundLoader::_soundLoadingError");
            this._hasError = !0;
            this.dispatchCustomEvent(h.ERROR, null)
        };
        a.addSoundsByPath = function (a) {
            for (var b = a.length, e = 0; e < b; e++) {
                var c = d.create(a[e], this._context);
                this._sounds.push(c);
                this._waitingSounds.push(c)
            }
            this._isLoading && !this._hasError && this._continueLoading();
            return this
        };
        a.addSoundByPath = function (a) {
            a = d.create(a, this._context);
            this._sounds.push(a);
            this._waitingSounds.push(a);
            this._isLoading && !this._hasError && this._continueLoading();
            return this
        };
        a.destroy = function () {
            this._audioContext = null;
            l.destroy.call(this)
        };
        h.createSingleton = function () {
            if (void 0 === f.orchestraSoundLoader) f.orchestraSoundLoader = new h, f.orchestraSoundLoader.setup();
            return f.orchestraSoundLoader
        };
        h.getSingleton = function () {
            return f.orchestraSoundLoader
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport");
    WEBLAB.namespace("WEBLAB.common.singletons");
    var f = WEBLAB.namespace("WEBLAB.utils.loading").JsonLoader,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    if (void 0 === a.LabReportBackendCalls) {
        var c = function () {
            this._userId = null;
            this._LabReportBackendCalls = [];
            this._serverRootUrl = "";
            this._init()
        };
        a.LabReportBackendCalls = c;
        a = a.LabReportBackendCalls.prototype = new d;
        a = c.prototype;
        a._init = function () {
            return this
        };
        a.setup = function (a) {
            this._serverRootUrl = a;
            return this
        };
        a.setUserId = function (a) {
            if (a) this._userId = a;
            return this._userId
        };
        a.createServerCall = function (a, c, d, l) {
            var k = {};
            k.url = this._serverRootUrl + a;
            k.method = c ? c : "GET";
            k.extSuccessCallback = d;
            k.extErrorCallback = l;
            k._internalSuccessCallback = b.createListenerFunctionWithArguments(this, this._callSuccess, [k]);
            k._internalErrorCallback = b.createListenerFunctionWithArguments(this, this._callFail, [k]);
            a = new f.create(k.url);
            a.addEventListener(f.LOADED,
            k._internalSuccessCallback, !1);
            a.addEventListener(f.ERROR, k._internalErrorCallback, !1);
            k.loader = a;
            a = this._LabReportBackendCalls.push(k);
            k.id = a;
            return k
        };
        a._callSuccess = function (a, b) {
            a.extSuccessCallback.call(this, b)
        };
        a._callFail = function (a, b) {
            a.extErrorCallback.call(this, b)
        };
        a._encodeString = function (a) {
            return a
        };
        a.destroy = function () {};
        c.create = function (a) {
            var b = new c;
            b.setup(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        c = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.weblab.common.ui.page");
    var e = WEBLAB.namespace("WEBLAB.common.ui.labReport"),
        g = WEBLAB.namespace("WEBLAB.common.ui").ReplaceableContent,
        h = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportBackendCalls,
        l = WEBLAB.namespace("WEBLAB.common.ui.dialog").Dialog,
        k = WEBLAB.namespace("WEBLAB.common.ui.dialog").SimpleDialog,
        j = WEBLAB.namespace("WEBLAB.common").LoginManager,
        n = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners,
        q = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds,
        m = WEBLAB.namespace("WEBLAB.common.constants").ExperimentIds;
    if (void 0 === a.LabReportManager) {
        var o = function () {
            this._init()
        };
        o.LAB_REPORT_OPEN = "labReportOpen";
        o.LAB_REPORT_CLOSE = "labReportClose";
        o.SHARE_DONE = "labreportShareDone";
        o.TAKEAWAY_SAVE_RESULT = "takeawaySaveResult";
        o.OAUTH_CODE_RESULT = "oAuthCodeResult";
        o.CREATE_CHANNEL_RESULT = "createChannelResult";
        o.LAB_REPORT_UPDATE = "labReportUpdate";
        a.LabReportManager = o;
        b = a.LabReportManager.prototype = new b;
        b._init = function () {
            this._element = null;
            this._isOpen = !1;
            this._previousPage = this._currentPage = this._contentHolder = this._labReportLayer = null;
            this._contentTransitionTime = 1E3;
            this._subtitleContent = this._titleContent = this._titleCarousel = this._titleElement = this._closeButton = null;
            this._pendingTakeAwayContent = [];
            this._currentLabTagId = this._currentLabReport = this._oAuthCode = this._myLabTag = this._userIdHolder = this._labTagHolder = this._takeAwayErrorPage = this._labReportErrorPage = this._showLabReportPage = this._showTakeAwayPage = this._linkLabTagPage = this._createYouTubeChannelPage = this._confirmSavePage = null;
            this._isMyLabTagId = !1;
            this._pendingShowTakeawayId = this._currentLabItemArray = null;
            this._labReportHasChanged = !1;
            this._shareWithFriendsTitleContent = this._confirmSaveTitleContent = this._othersLabReportSubtitleContent = this._othersLabReportTitleContent = this._myLabReportSubtitleContent = this._myLabReportTitleContent = this._confirmFlagContentDialog = this._confirmDeleteAllDialog = this._confirmDeleteSingleDialog = null;
            var a = -1 != document.location.href.indexOf("dummyLabReport") ? "/files/data/labReport/dummyResponses" : "";
            this._serverCalls = h.create(a);
            this._resetLabReportCallback = d.createListenerFunction(this, this._resetLabReportDisplay);
            this._closeButtonClickCallback = d.createListenerFunction(this, this._closeButtonClick);
            this._switchContentCallback = d.createListenerFunction(this, this._switchPageContent);
            this._confirmSaveTakeAwayCallback = d.createListenerFunction(this, this._confirmedSaveTakeAway);
            this._rejectSaveTakeAwayCallback = d.createListenerFunction(this, this._rejectSaveTakeAway);
            this._showFullLabReportCallback = d.createListenerFunction(this, this.showFullLabReport);
            this._closeLabReportCallback = d.createListenerFunction(this, this._closeButtonClick);
            this._backToLabReportPageCallback = d.createListenerFunction(this, this._backToLabReportPage);
            this._backgroundDismissEnabled = !0;
            this._backgroundBlockerClickCallback = d.createListenerFunction(this, this._backgroundBlockerClick);
            this._labReportServerCallback = d.createListenerFunction(this, this._labReportFromServer);
            this._labReportServerErrorCallback = d.createListenerFunction(this, this._labReportFromServerError);
            this._labReportClickThumbnailCallback = d.createListenerFunction(this, this._labReportClickThumbnail);
            this._labReportLaunchExperimentCallback = d.createListenerFunction(this, this._labReportLaunchExperiment);
            this._labReportDeleteAllContentCallback = d.createListenerFunction(this, this._labReportDeleteAllContent);
            this._labReportDeleteAllConfirmedCallback = d.createListenerFunction(this, this._labReportDeleteAllContentConfirm);
            this._labReportDeleteSingleContentCallback = d.createListenerFunction(this, this._labReportDeleteSingleContent);
            this._labReportDeleteSingleConfirmedCallback = d.createListenerFunction(this, this._labReportDeleteSingleContentConfirm);
            this._labReportFlagContentCallback = d.createListenerFunction(this, this._labReportFlagContent);
            this._labReportFlagContentConfirmedCallback = d.createListenerFunction(this, this._confirmedFlagContent);
            this._loginStateChangedCallback = d.createListenerFunction(this, this._loginStateChanged);
            this._windowResizeCallback = d.createListenerFunction(this, this._onWindowResize);
            window.addEventListener("resize", this._windowResizeCallback, !1);
            this._loadLabReportCallback = d.createListenerFunction(this, this.loadLabReport);
            return this
        };
        b.setup = function (a) {
            this.setElement(a)
        };
        b.setElement = function (a) {
            this._element = a;
            this._titleElement = this._element.querySelector(".labReportHeader");
            this._contentHolder = this._element.querySelector("#labReportContent");
            this._labReportLayer = document.body.querySelector(".labReport");
            this._titleContent = g.create(!1, 0, 640);
            this._titleContent.setClipHeight(150);
            this._element.querySelector(".labReportHeader .title").appendChild(this._titleContent.getElement());
            this._subtitleContent = g.create(!1, 6, 305);
            this._subtitleContent.setClipHeight(150);
            this._subtitleContent.setVerticalClipEnabled(!1);
            this._subtitleContent.setHorizontalClipEnabled(!1);
            this._element.querySelector(".labReportHeader .subtitle").appendChild(this._subtitleContent.getElement());
            this._closeButton = this._element.querySelector("#labReportCloseButton");
            this._closeButton.addEventListener("click", this._closeButtonClickCallback);
            n.addStandardSmallButtonListeners(this._closeButton, "labReport");
            var a = f.siteManager.getTemplateManager(),
                b = e.LabReportPage,
                c = e.pages.ShowLabReportPage,
                d = e.pages.LabReportErrorPage,
                h = e.pages.TakeAwayErrorPage,
                q = e.pages.ConfirmSaveTakeAwayPage,
                m = e.pages.CreateYouTubeChannelPage,
                o = e.pages.ShowTakeAwayContentPage,
                u = a.getTemplate("labReport/labReportConfirmSaveTakeAway");
            this._confirmSavePage = q.create(u);
            u = a.getTemplate("labReport/labReportCreateYouTubeChannel");
            this._createYouTubeChannelPage = m.create(u);
            this._createYouTubeChannelPage.addEventListener(m.CHANNEL_WAS_CREATED, this._onChannelCreated.bind(this));
            this._createYouTubeChannelPage.addEventListener(m.CHANNEL_WAS_NOT_CREATED, this._onChannelNotCreated.bind(this));
            this._createYouTubeChannelPage.addEventListener(b.CLOSE_LAB_REPORT, this._closeLabReportCallback);
            m = a.getTemplate("labReport/showTakeAwayContent");
            u = a.getTemplate("labReport/showTakeAwayContentSharing");
            this._showTakeAwayPage = o.create(m, u);
            m = a.getTemplate("labReport/showLabReport");
            this._showLabReportPage = c.create(m);
            this._showLabReportPage.addEventListener(c.THUMBNAIL_CLICK, this._labReportClickThumbnailCallback);
            this._showLabReportPage.addEventListener(c.LAUNCH_EXPERIMENT, this._labReportLaunchExperimentCallback);
            this._showLabReportPage.addEventListener(c.DELETE_ALL, this._labReportDeleteAllContentCallback);
            this._confirmSavePage.addEventListener(q.SAVE_WAS_APPROVED,
            this._confirmSaveTakeAwayCallback);
            this._confirmSavePage.addEventListener(q.SAVE_WAS_NOT_APPROVED, this._rejectSaveTakeAwayCallback);
            this._showTakeAwayPage.addEventListener(b.SHOW_LAB_REPORT, this._backToLabReportPageCallback);
            this._showTakeAwayPage.addEventListener(b.CLOSE_LAB_REPORT, this._closeLabReportCallback);
            this._showTakeAwayPage.addEventListener(o.DELETE_CONTENT, this._labReportDeleteSingleContentCallback);
            this._showTakeAwayPage.addEventListener(o.FLAG_CONTENT, this._labReportFlagContentCallback);
            this._showTakeAwayPage.addEventListener(o.SHARE_DONE, this._onShareDone.bind(this));
            b = a.getTemplate("labReport/labReportErrorPage");
            this._labReportErrorPage = d.create(b);
            d = a.getTemplate("labReport/showTakeAwayContentError");
            this._takeAwayErrorPage = h.create(d);
            this._takeAwayErrorPage.addEventListener(h.BACK_TO_LAB_REPORT, this._backToLabReportPageCallback);
            document.body.querySelector(".labReport .backgroundBlocker").addEventListener("click", this._backgroundBlockerClickCallback);
            this._labTagHolder = this._element.querySelector(".avatarIcon");
            this._userIdHolder = this._element.querySelector(".labTagId");
            h = a.getTemplate("labReport/confirmDeleteAllDialog");
            this._confirmDeleteAllDialog = k.create(h);
            this._confirmDeleteAllDialog.setDialogLevel(l.DIALOG_LEVEL_LAB_REPORT);
            this._confirmDeleteAllDialog.addEventListener(k.CONFIRM, this._labReportDeleteAllConfirmedCallback);
            h = a.getTemplate("labReport/confirmDeleteSingleDialog");
            this._confirmDeleteSingleDialog = new k.create(h);
            this._confirmDeleteSingleDialog.setDialogLevel(l.DIALOG_LEVEL_LAB_REPORT);
            this._confirmDeleteSingleDialog.addEventListener(k.CONFIRM,
            this._labReportDeleteSingleConfirmedCallback);
            a = a.getTemplate("labReport/confirmFlagContentDialog");
            this._confirmFlagContentDialog = new k.create(a);
            this._confirmFlagContentDialog.setDialogLevel(l.DIALOG_LEVEL_LAB_REPORT);
            this._confirmFlagContentDialog.addEventListener(k.CONFIRM, this._labReportFlagContentConfirmedCallback);
            a = f.siteManager.getCopyManager();
            this._myLabReportTitleContent = document.createElement("div");
            this._myLabReportTitleContent.innerHTML = "<h1>" + a.getCopy("labReport/showLabReportPage/title") +
                "</h1>";
            this._myLabReportSubtitleContent = document.createElement("div");
            this._myLabReportSubtitleContent.innerHTML = "<p>" + a.getCopy("labReport/showLabReportPage/subtitle") + "</p>";
            this._othersLabReportTitleContent = document.createElement("div");
            this._othersLabReportTitleContent.innerHTML = "<h1>" + a.getCopy("labReport/showLabReportPage/titleOther") + "</h1>";
            this._othersLabReportSubtitleContent = document.createElement("div");
            this._othersLabReportSubtitleContent.innerHTML = "<p>" + a.getCopy("labReport/showLabReportPage/subtitleOther") +
                "</p>";
            this._shareWithFriendsTitleContent = document.createElement("div");
            this._shareWithFriendsTitleContent.innerHTML = "<h1>" + a.getCopy("labReport/shareContentPage/title") + "</h1>";
            this._confirmSaveTitleContent = document.createElement("div");
            this._confirmSaveTitleContent.innerHTML = "<h1>" + a.getCopy("labReport/confirmSavePage/title") + "</h1>";
            this._savingTitleContent = document.createElement("div");
            this._savingTitleContent.innerHTML = "<h1>" + a.getCopy("labReport/confirmSavePage/savingTitle") + "</h1>";
            f.siteManager.getLoginManager().addEventListener(j.STATUS_CHANGED,
            this._loginStateChangedCallback);
            return this
        };
        b._setTitle = function (a) {
            this._titleContent.replaceContent(a, 0)
        };
        b._setSubtitle = function (a) {
            this._subtitleContent.replaceContent(a, 0)
        };
        b._setPageContent = function () {
            setTimeout(this._switchContentCallback, 1E3)
        };
        b._switchPageContent = function () {
            this._contentHolder.appendChild(this._currentPage.getContent());
            this._currentPage.show();
            c.addClass(this._contentHolder, "visible")
        };
        b.getElement = function () {
            return this._element
        };
        b.getLabReport = function () {
            return this._currentLabReport
        };
        b._setCurrentLabTagId = function (a) {
            this._currentLabTagId = a;
            var b = f.siteManager.getLabTag(70, a);
            this._labTagHolder.innerHTML = "";
            this._labTagHolder.appendChild(b);
            this._userIdHolder.innerHTML = "";
            this._userIdHolder.innerHTML = "<h4>ID " + a + "</h4>";
            b = f.siteManager.getLabTagId();
            this._isMyLabTagId = a == b;
            this._showLabReportPage.setUserId(this._currentLabTagId);
            this._showLabReportPage.setIsMyLabTagId(this._isMyLabTagId);
            this._isMyLabTagId ? c.removeClass(this._element, "otherUser") : c.addClass(this._element, "otherUser");
            if (!this._isMyLabTagId) {
                var e = this;
                (new TWEEN.Tween({
                    scaleEnvelope: 0,
                    opacityEnvelope: 0
                })).to({
                    scaleEnvelope: 1,
                    opacityEnvelope: 1
                }, 800).delay(800).onUpdate(function () {
                    var a = "scale(" + this.scaleEnvelope + ")";
                    e._labTagHolder.style.setProperty("-webkit-transform", a);
                    e._labTagHolder.style.setProperty("-moz-transform", a);
                    e._labTagHolder.style.setProperty("transform", a);
                    e._labTagHolder.style.setProperty("opacity", this.opacityEnvelope)
                }).easing(TWEEN.Easing.Elastic.EaseOut).start();
                e._labTagHolder.style.setProperty("opacity",
                0)
            }
        };
        b.getCurrentLabTagId = function () {
            return this._currentLabTagId
        };
        b.getOAuthCode = function () {
            return this._oAuthCode
        };
        b._showPage = function (b) {
            var e = a.LabReportPage;
            if (this._currentPage) this._currentPage.removeEventListener(e.LOAD_LAB_REPORT, this._loadLabReportCallback), this._previousPage = this._currentPage, this._currentPage !== b && this._previousPage.hide();
            c.removeClass(this._contentHolder, "visible");
            this._currentPage = b;
            this._currentPage.addEventListener(e.LOAD_LAB_REPORT, this._loadLabReportCallback);
            this._currentPage.getName();
            this._setPageContent(this._currentPage.getContent());
            this._currentPage == this._confirmSavePage ? this.setBackgroundDismissEnabled(!1) : this.setBackgroundDismissEnabled(!0);
            this._performWindowLayout()
        };
        b.showSaveTakeAwayDialog = function (a, b, e, c, d) {
            this._confirmSavePage.setupSave(a, b, e, c, d);
            this._showPage(this._confirmSavePage);
            this._setCurrentLabTagId(f.siteManager.getLabTagId());
            this._setTitle(this._confirmSaveTitleContent);
            this._setSubtitle(this._confirmSavePage.getSubtitle());
            f.siteManager.mainNav._open();
            f.siteManager.mainNav.lock();
            this._show()
        };
        b.saveTakeAwayError = function () {
            this._currentPage != this._confirmSavePage ? console.warn("saveTakeAwayError called when not on confirmSavePage.") : (this._confirmSavePage.saveError(), this._titleContent.replaceContent(this._confirmSaveTitleContent.cloneNode(!0), 0))
        };
        b.showCreateChannelPage = function () {
            this._showPage(this._createYouTubeChannelPage);
            this._setTitle(this._createYouTubeChannelPage.getTitle());
            this._setSubtitle(this._createYouTubeChannelPage.getSubtitle());
            this._show()
        };
        b._onChannelCreated = function () {
            this.dispatchCustomEvent(o.CREATE_CHANNEL_RESULT, !0)
        };
        b._onChannelNotCreated = function () {
            this.dispatchCustomEvent(o.CREATE_CHANNEL_RESULT, !1)
        };
        b.showFullLabReport = function (a, b) {
            var e = f.siteManager.getLabTagId();
            a || (a = e);
            if (null == a) throw Error("ERROR: Cannot show 课件台 report for null labTagId");
            if (null == this._currentLabTagId) this._currentLabTagId = a;
            if (b) this._userCountryCode = b;
            a != this._currentLabTagId ? (this._setCurrentLabTagId(a), this.loadLabReport()) : this._currentLabReport ? this._currentLabReport.id == this._currentLabTagId ? this._showLabReportPage.setLabReportItems(this._currentLabItemArray) : this.loadLabReport() : this.loadLabReport();
            "undefined" == typeof a && (a = e);
            this._showPage(this._showLabReportPage);
            var e = this._isMyLabTagId ? this._myLabReportTitleContent : this._othersLabReportTitleContent,
                c = this._isMyLabTagId ? this._myLabReportSubtitleContent : this._createOtherUserSubtitle(a, this._userCountryCode);
            this._setTitle(e);
            this._setSubtitle(c);
            this._show()
        };
        b.showTakeAwayById = function (a,
        b) {
            console.log("LabReportManager :: Showing Takeaway :: ", a, b);
            var e = null,
                c = !1,
                d;
            for (d in this._currentLabItemArray) {
                for (var g = this._currentLabItemArray[d], h = 0; h < g.length; h++) {
                    var j = g[h];
                    if (j.getInternalId() == a) {
                        e = j;
                        c = !0;
                        break
                    }
                    if (c) break
                }
                if (c) break
            }
            if (e) {
                this.showTakeAwayById.retries = 0;
                this._pendingShowTakeawayId = null;
                b ? this._showTakeAwayPage.setModeSharing() : this._showTakeAwayPage.setModeNormal();
                b && f.siteManager.getSoundManager().playSound("common/lab-tag-update", !1, 1, "labReport");
                c = this._currentLabItemArray[e.getExperiment()];
                this._showTakeAwayPage.setLabReportItems(c);
                e = c.indexOf(e);
                this._showTakeAwayPage.setIsMyLabTagId(this._isMyLabTagId);
                this._showTakeAwayPage.showItemIndex(e);
                this._showPage(this._showTakeAwayPage);
                e = this._isMyLabTagId ? this._myLabReportTitleContent : this._othersLabReportTitleContent;
                if (b) e = this._shareWithFriendsTitleContent;
                this._setTitle(e);
                this._setSubtitle(this._showTakeAwayPage.getSubtitle());
                this._show();
                if (b) this.labReportDidSave = !0
            } else console.warn("LabReportManager :: Could not find takeaway with id: " + a), 3 > this.showTakeAwayById.retries ? (console.log("LabReportManager :: retrying load 课件台 Report, retries : ", this.showTakeAwayById.retries), this._pendingShowTakeawayId = a, setTimeout(function () {
                this.loadLabReport()
            }.bind(this), 1E3)) : (this.showTakeAwayById.retries = 0, this.showTakeawayError(a))
        };
        b.showTakeAwayById.retries = 0;
        b.showLabReportError = function () {
            console.log("LabReportManager :: Showing error page for id: ", this._currentLabTagId);
            this._labReportErrorPage.setLabReportMine(this._isMyLabTagId);
            this._setTitle(this._labReportErrorPage.getTitle().cloneNode(!0));
            this._setSubtitle(this._labReportErrorPage.getSubtitle().cloneNode(!0));
            this._showPage(this._labReportErrorPage);
            this._show()
        };
        b.showTakeawayError = function (a) {
            console.log("LabReportManager :: Showing takeaway content error for : ", a);
            this._setTitle(this._takeAwayErrorPage.getTitle().cloneNode(!0));
            this._setSubtitle(this._takeAwayErrorPage.getSubtitle());
            this._showPage(this._takeAwayErrorPage);
            this.showTakeAwayById.retries = 0
        };
        b.getOAuthRedirectURI = function () {
            return f.siteManager.getDocumentOrigin() +
                "/public/oAuthCallback.html"
        };
        b._labReportClickThumbnail = function (a) {
            this.showTakeAwayById(a.detail.getInternalId())
        };
        b._labReportLaunchExperiment = function (a) {
            f.siteManager.navigateToExperimentURL(a.detail)
        };
        b._labReportDeleteAllContent = function () {
            f.siteManager.getDialogManager().showDialog(this._confirmDeleteAllDialog)
        };
        b._labReportDeleteAllContentConfirm = function () {
            this._serverCalls.createServerCall("/general/deleteArtefact?all=1&ArtefactID=" + f.siteManager.getLabTagId(), "GET", this._deleteAllContentComplete.bind(this),
            this._deleteAllContentError.bind(this)).loader.load()
        };
        b._labReportDeleteSingleContent = function () {
            f.siteManager.getDialogManager().showDialog(this._confirmDeleteSingleDialog)
        };
        b._labReportDeleteSingleContentConfirm = function () {
            var a = this._showTakeAwayPage.getCurrentItem();
            this._serverCalls.createServerCall("/general/deleteArtefact?ArtefactID=" + a.getId(), "GET", this._deleteSingleContentComplete.bind(this), this._deleteSingleContentError.bind(this)).loader.load();
            for (var b = this._currentLabItemArray[a.getExperiment()],
            e = 0; e < b.length; e++) b[e].getId() == a.getId() && b.splice(e, 1);
            this._showLabReportPage.setLabReportItems(this._currentLabItemArray)
        };
        b._deleteSingleContentComplete = function (a) {
            this._showTakeAwayPage.confirmDeleteContent();
            console.log("LabReportManager :: delete content complete: ", a)
        };
        b._deleteSingleContentError = function (a) {
            console.log("LabReportManager :: delete content error: ", a)
        };
        b._deleteAllContentComplete = function (a) {
            this.loadLabReport();
            console.log("LabReportManager :: delete all content complete: ",
            a)
        };
        b._deleteAllContentError = function (a) {
            console.log("LabReportManager :: delete all content error: ", a)
        };
        b._labReportFlagContent = function () {
            f.siteManager.getDialogManager().showDialog(this._confirmFlagContentDialog)
        };
        b._confirmedFlagContent = function () {
            this._serverCalls.createServerCall("/general/flagArtefact?ArtefactID=" + this._showTakeAwayPage.getCurrentItem().getId(), "GET", this._flagContentComplete.bind(this), this._flagContentError.bind(this)).loader.load()
        };
        b._flagContentComplete = function (a) {
            console.log("LabReportManager :: flag content complete: ",
            a);
            this._showTakeAwayPage.confirmFlagContent()
        };
        b._flagContentError = function (a) {
            console.log("LabReportManager :: flag content error: ", a)
        };
        b._onShareDone = function () {
            this.dispatchCustomEvent(o.SHARE_DONE, null)
        };
        b._backToLabReportPage = function () {
            this.showFullLabReport(this._currentLabTagId)
        };
        b.broadcastOAuthCode = function (a) {
            this._oAuthCode = a;
            this.dispatchCustomEvent(o.OAUTH_CODE_RESULT, a)
        };
        b._confirmedSaveTakeAway = function () {
            this._currentLabReport = null;
            this.dispatchCustomEvent(o.TAKEAWAY_SAVE_RESULT, !0);
            this._setTitle(this._savingTitleContent);
            this.labReportDidSave = !0
        };
        b._rejectSaveTakeAway = function () {
            this.dispatchCustomEvent(o.TAKEAWAY_SAVE_RESULT, !1);
            this.hide()
        };
        b.loadLabReport = function () {
            null != this._currentLabTagId && (this._showLabReportPage.clearCarousels(), this._serverCalls.createServerCall("/general/getLabReport?labTagId=" + this._currentLabTagId, "GET", this._labReportServerCallback, this._labReportServerErrorCallback).loader.load())
        };
        b.showSharingPageForID = function (a, b) {
            f.siteManager.getTracker().trackEvent(q.LAB_REPORT,
                "ContentCreated: " + b, "Content succesfully added to the 课件台 Report");
            this._setCurrentLabTagId(f.siteManager.getLabTagId());
            this._pendingShowTakeawayId = a;
            this.loadLabReport()
        };
        b._labReportFromServer = function (a) {
            try {
                if (1 == a.detail.status.ok) {
                    var b = a.detail.response;
                    if ("DUMMY-LAB-TAG-ID-1234" == b.id) b.id = this._currentLabTagId;
                    if (b.id == this._currentLabTagId) this._currentLabReport = b, this.dispatchCustomEvent(o.LAB_REPORT_UPDATE, this._currentLabReport), this._currentLabItemArray = this._createLabReportItemArray(this._currentLabReport),
                    this._showLabReportPage.setLabReportItems(this._currentLabItemArray), null != this._pendingShowTakeawayId && this.showTakeAwayById(this._pendingShowTakeawayId, !0)
                }
                console.log("LabReportManager :: _labReportFromServer :: ", a)
            } catch (e) {
                console.warn("Error loading 课件台 report for " + this._currentLabTagId + ", : " + e.message + " : ", e), this.showLabReportError()
            }
        };
        b._getDummyLabReport = function () {
            return {
                id: "1234-dummyLabReportId-5678",
                orchestra: {
                    live: [],
                    virtual: []
                },
                periscopes: [],
                sandRobots: {
                    drawings: [],
                    image: [],
                    video: []
                },
                dataVisualiser: []
            }
        };
        b._createLabReportItemArray = function (a) {
            var b = e.items.LabReportItem,
                c = {}, d = "",
                g = "",
                f = 0,
                d = b.EXP_ORCHESTRA,
                g = b.TYPE_REPORT_VIDEO;
            c[d] = [];
            for (var h = a.orchestra.live, j = 0; j < h.length; j++) c[d].push(b.create(d, g, h[j], this._currentLabTagId));
            c[d].sort(function (a, b) {
                return b.getTimestamp() - a.getTimestamp()
            });
            g = b.TYPE_ORCHESTRA_VIRTUAL_DATA;
            h = a.orchestra.virtual;
            for (j = 0; j < h.length; j++) c[d].push(b.create(d, g, h[j], this._currentLabTagId));
            c[d].sort(function (a, b) {
                return b.getTimestamp() - a.getTimestamp()
            });
            f += c[d].length;
            d = b.EXP_PERISCOPES;
            g = b.TYPE_REPORT_IMAGE;
            c[d] = [];
            for (var l = a.periscopes, j = 0; j < l.length; j++) h = l[j], c[d].push(b.create(d, g, h, this._currentLabTagId));
            c[d].sort(function (a, b) {
                return b.getTimestamp() - a.getTimestamp()
            });
            f += c[d].length;
            d = b.EXP_SAND_ROBOTS;
            c[d] = [];
            g = a.sandRobots.drawings;
            for (j = 0; j < g.length; j++) h = g[j], "" != h.vectorimagethumbnail && c[d].push(b.create(d, b.TYPE_VECTOR_DRAWING, h, this._currentLabTagId, h.aid + ".vectorimage")), "" != h.image && c[d].push(b.create(d, b.TYPE_REPORT_IMAGE, h, this._currentLabTagId,
            h.aid + ".image")), "" != h.video && c[d].push(b.create(d, b.TYPE_REPORT_VIDEO, h, this._currentLabTagId, h.aid + ".video"));
            c[d].sort(function (a, b) {
                return b.getTimestamp() - a.getTimestamp()
            });
            console.log("newList : ", c);
            f += c[d].length;
            d = b.EXP_DATA_VISUALISER;
            g = b.TYPE_REPORT_IMAGE;
            c[d] = [];
            a = a.dataVisualiser;
            for (j = 0; j < a.length; j++) {
                h = a[j];
                if ("lon" == h.data.activity_space) h.thumbnail = h.map_thumbnail;
                c[d].push(b.create(d, g, h, this._currentLabTagId))
            }
            c[d].sort(function (a, b) {
                return b.getTimestamp() - a.getTimestamp()
            });
            f += c[d].length;
            c.numberOfItems = f;
            return c
        };
        b._labReportFromServerError = function (a) {
            console.log("LabReportManager :: _labReportFromServerError :: ", a);
            this.showLabReportError()
        };
        b._resetLabReportDisplay = function () {
            document.body.querySelector(".labReport");
            c.removeClass(this._element, "otherUser")
        };
        b._closeButtonClick = function () {
            this._currentPage._requiresUserInput = !1;
            this.hide()
        };
        b.toggle = function () {
            this._isOpen ? this.hide() : this.showFullLabReport()
        };
        b._show = function () {
            if (!this._isOpen) this._isOpen = !0, this.labReportDidSave = !1, c.addClass(this._labReportLayer, "active"), c.addClass(this._element, "visible"), c.addClass(document.getElementById("siteHolder"), "labReportOpen"), this.dispatchCustomEvent(o.LAB_REPORT_OPEN, null), f.siteManager.getSoundManager().setLabReportOpen(!0), f.siteManager.getSoundManager().playSound("common/lab-report-slide/slide-in", !1, 1, "labReport"), this._performWindowLayout()
        };
        b.hide = function () {
            if ((!this._currentPage || !this._currentPage.doesRequireUserInput()) && this._isOpen) {
                this._isOpen = !1;
                c.removeClass(this._element, "visible");
                var a = document.body.querySelector(".labReport");
                c.removeClass(a, "active");
                this.dispatchCustomEvent(o.LAB_REPORT_CLOSE, null);
                c.removeClass(document.getElementById("siteHolder"), "labReportOpen");
                this._confirmDeleteAllDialog.forceClose();
                this._confirmDeleteSingleDialog.forceClose();
                this._confirmFlagContentDialog.forceClose();
                this._currentPage && this._currentPage.hide();
                f.siteManager.getSoundManager().setLabReportOpen(!1);
                f.siteManager.getSoundManager().playSound("common/lab-report-slide/slide-out", !1, 1, "mainNav")
            }
        };
        b.getIsOpen = function () {
            return this._isOpen
        };
        b.getNextExperiment = function () {
            for (var a = m.convertFromString(document.body.getAttribute("data-experiment")), b = a, e = null, c = !1; !c;) {
                switch (b) {
                    case m.ORCHESTRA:
                        e = m.PERISCOPES;
                        break;
                    case m.PERISCOPES:
                        e = m.SAND_ROBOTS;
                        break;
                    case m.SAND_ROBOTS:
                        e = m.DATA_VISUALISER;
                        break;
                    case m.DATA_VISUALISER:
                        e = m.LABTAGS;
                        break;
                    case m.LABTAGS:
                        e = m.ORCHESTRA
                }
                this._hasUserVisitedExperiment(e) && e !== a ? b = e : c = !0
            }
            return e
        };
        b._hasUserVisitedExperiment = function (a) {
            var b = e.items.LabReportItem;
            if (null != this._currentLabItemArray) switch (a) {
                case m.ORCHESTRA:
                    return 0 < this._currentLabItemArray[b.EXP_ORCHESTRA].length;
                case m.PERISCOPES:
                    return 0 < this._currentLabItemArray[b.EXP_PERISCOPES].length;
                case m.SAND_ROBOTS:
                    return 0 < this._currentLabItemArray[b.EXP_SAND_ROBOTS].length;
                case m.DATA_VISUALISER:
                    return 0 < this._currentLabItemArray[b.EXP_DATA_VISUALISER].length;
                case m.LABTAGS:
                    return !1
            } else return !1
        };
        b.setBackgroundDismissEnabled = function (a) {
            this._backgroundDismissEnabled = a
        };
        b._backgroundBlockerClick = function () {
            this._backgroundDismissEnabled && this.hide()
        };
        b._loginStateChanged = function () {
            this._setCurrentLabTagId(f.siteManager.getLabTagId());
            this._currentLabReport = null;
            this._isMyLabTagId && this._isOpen && this._currentPage != this._confirmSavePage && this.showFullLabReport()
        };
        b._createOtherUserSubtitle = function (a, b) {
            "AA" == b && (b = "theAA");
            var e = this._othersLabReportSubtitleContent.innerHTML,
                c = f.siteManager.lookupCountryCode(b),
                e = e.replace(/\[(.*?)\]/, c),
                e = e.replace("]", ""),
                c = document.createElement("div");
            c.innerHTML = e;
            return c
        };
        b._onWindowResize = function () {
            this._performWindowLayout()
        };
        b._performWindowLayout = function () {
            if (this._titleElement) {
                var a = this._titleElement.parentElement.clientHeight;
                720 >= a ? this._titleElement.style.setProperty("top", "15px", "") : 720 < a && 1440 > a ? this._titleElement.style.setProperty("top", 15 + 0.1 * (a - 720) + "px", "") : this._titleElement.style.setProperty("top", "87px", "")
            }
            a = (this._contentHolder.parentElement.clientHeight - this._contentHolder.clientHeight) / 2;
            160 > a && (a = 160);
            this._contentHolder.style.setProperty("top",
            a + "px", "")
        };
        b.destroy = function () {
            this._element = null;
            window.removeEventListener("resize", this._windowResizeCallback, !1)
        };
        o.create = function () {
            return new o
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport"),
        f = WEBLAB.namespace("WEBLAB.weblab.common.ui.page").Page,
        b = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    WEBLAB.namespace("WEBLAB.utils.events");
    var d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    if (void 0 === a.LabReportPage) {
        var c = function () {
            this._init()
        };
        a.LabReportPage = c;
        c.SHOW_LAB_REPORT = "showLabReport";
        c.CLOSE_LAB_REPORT = "closeLabReport";
        c.LOAD_LAB_REPORT = "loadLabReport";
        var a = a.LabReportPage.prototype = new f,
            e = f.prototype;
        a._init = function () {
            e._init.call(this);
            this._requiresUserInput = !1;
            this._contentElement = this._subtitleElement = this._titleElement = this._takeAwayElement = this._element = null;
            this._showFullLabReportCallback = d.createListenerFunction(this, this._showFullLabReportClicked);
            this._closeLabReportCallback = d.createListenerFunction(this, this._closeLabReportClicked);
            return this
        };
        a.doesRequireUserInput = function () {
            return this._requiresUserInput
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            this._titleElement = this._element.querySelector("*[data-weblab-type='labReportTitle']");
            this._subtitleElement = this._element.querySelector("*[data-weblab-type='labReportSubtitle']");
            this._contentElement = this._element.querySelector("*[data-weblab-type='labReportContent']");
            this.__verticallyCenteredElements = this._element.getElementsByClassName("jsVerticallyCentered");
            return this
        };
        a.getName = function () {
            return this._pageName
        };
        a.getTitle = function () {
            return this._titleElement
        };
        a.getSubtitle = function () {
            return this._subtitleElement
        };
        a.getContent = function () {
            return this._contentElement
        };
        a.show = function () {
            b.addClass(this._contentElement, "visible");
            e.show.call(this)
        };
        a.hide = function () {
            b.removeClass(this._contentElement, "visible");
            e.hide.call(this)
        };
        a._showFullLabReportClicked = function () {
            this.dispatchCustomEvent(c.SHOW_LAB_REPORT, null)
        };
        a._closeLabReportClicked = function () {
            this._requiresUserInput = !1;
            this.dispatchCustomEvent(c.CLOSE_LAB_REPORT, null)
        };
        a.destroy = function () {
            this._element.appendChild(this._titleElement);
            this._element.appendChild(this._subtitleElement);
            this._element.appendChild(this._contentElement)
        };
        c.create = function (a) {
            var b = new c;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport"),
        f = WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.utils.loading");
    var b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        c = WEBLAB.namespace("WEBLAB.utils.url").UrlFunctions;
    if (void 0 === a.LabReportOAuthHelper) {
        var e = function () {
            this._init()
        };
        e.OAUTH_REQUEST_URL = "https://accounts.google.com/o/oauth2/";
        e.OAUTH_ACTION_AUTH = "auth";
        e.OAUTH_GET_YOUTUBE_CODE =
            "response_type=code&scope=http://gdata.youtube.com&access_type=offline&approval_prompt=force";
        e.CLIENT_ID = "252049619813-oioqtl05q2n40ftdp2d30r12llna3adm.apps.googleusercontent.com";
        e.REDIRECT_URL_PATH = "/public/oAuthCallback.html";
        a.LabReportOAuthHelper = e;
        a = a.LabReportOAuthHelper.prototype = new d;
        a._init = function () {
            this._errorCallbackFunction = this._closedCallbackFunction = this._callbackFunction = this._authWindow = null;
            this._checkWindowClosedCallback = b.createListenerFunction(this, this._checkWindowClosed);
            this._windowAuthCallback = b.createListenerFunction(this, this._oAuthWindowReturned);
            this._code = null;
            this._checkWindowClosedInterval = -1;
            return this
        };
        a.getCode = function () {
            return this._code
        };
        a.getRedirectURI = function () {
            return f.siteManager.getDocumentOrigin() + e.REDIRECT_URL_PATH
        };
        a.requestOAuth2Code = function (a, b, c) {
            this._callbackFunction = a;
            this._closedCallbackFunction = c;
            this._errorCallbackFunction = b;
            a = e.OAUTH_REQUEST_URL;
            a += e.OAUTH_ACTION_AUTH;
            a += "?" + e.OAUTH_GET_YOUTUBE_CODE;
            a += "&client_id=" + e.CLIENT_ID;
            a += "&redirect_uri=" + this.getRedirectURI();
            window.__authWindowCallback = this._windowAuthCallback;
            this._authWindow = window.open(a);
            this._checkWindowClosedInterval = setInterval(this._checkWindowClosedCallback, 100)
        };
        a._checkWindowClosed = function () {
            if (this._authWindow.closed || !this._authWindow) clearInterval(this._checkWindowClosedInterval), this._errorCallbackFunction.call(this, "User closed window")
        };
        a._oAuthWindowReturned = function (a) {
            clearInterval(this._checkWindowClosedInterval);
            console.log("Auth window returned: " + a);
            a = c.parseQueryString(a);
            a.code ? (this._code = a.code, f.siteManager.getLoginManager().setHasOAuthToken(!0), f.siteManager.getLabReportManager().broadcastOAuthCode(this._code), this._callbackFunction(this._code)) : a.error && this._errorCallbackFunction.call(this, a.error)
        };
        a.destroy = function () {};
        e.createSingleton = function () {
            if (void 0 === f.labReportOAuthHelper) f.labReportOAuthHelper = new e;
            return f.labReportOAuthHelper
        };
        e.getSingleton = function () {
            return f.labReportOAuthHelper
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    var f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.common.singletons"),
        c = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds,
        e = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners;
    WEBLAB.namespace("WEBLAB.utils");
    if (void 0 === a.LabReportSocialPanel) {
        var g = function () {
            this._init()
        };
        a.LabReportSocialPanel = g;
        a = a.LabReportSocialPanel.prototype = new f;
        g.MODE_WEBLAB = "socialPanelModeWebLab";
        g.MODE_LAB_REPORT = "socialPanelModeLabReport";
        g.MODE_ORCHESTRA_LIVE = "socialPanelModeOrchestraLive";
        g.MODE_ORCHESTRA_VIRTUAL = "socialPanelModeOrchestraVirtual";
        g.MODE_PERISCOPES = "socialPanelModePeriscopes";
        g.MODE_VISUALISER = "socialPanelModeVisualiser";
        g.MODE_SKETCHBOTS_SKETCH = "socialPanelModeSketchbotsSketch";
        g.MODE_SKETCHBOTS_VIDEO = "socialPanelModeSketchbotsVideo";
        a._init = function () {
            this._linkPreviewButton = this._linkElement = this._fbElement = this._twitterFrame = this._gplusElement = this._previewUrl = this._sharingURL = this._template = this._element = this._shortURL = this._sharingURL = this._mode = null;
            this._linkPreviewCallback = b.createListenerFunction(this, this._linkPreviewClick);
            this._linkElementSelectCallback = b.createListenerFunction(this, this._linkElementSelect);
            this._shortenURLCallback = b.createListenerFunction(this, this.urlShortenCallback);
            return this
        };
        a.setup = function (a, b, c) {
            this._template = d.siteManager.getTemplateManager().getTemplate("labReport/socialPanel").cloneNode(!0);
            this._element = a;
            this._twitterFrame = this._template.querySelector(".twitter-share-button");
            this._fbElement = this._template.querySelector(".fb-like");
            this._gplusElement = this._template.querySelector(".g-plusone");
            this._linkElement = this._template.querySelector(".linkPopout .takeAwayShare");
            this._linkElement.addEventListener("mousemove", this._linkElementMouseMove.bind(this));
            this._linkPreviewButton = this._template.querySelector(".linkPopout .linkPreview");
            e.addRandomSoundListener(this._linkPreviewButton,
                "click", e.NAV_BUTTON_CLICK, "labReport");
            this.setSharingUrl(b, c);
            this._linkElement.addEventListener("click", this._linkElementSelectCallback);
            this._linkPreviewButton.addEventListener("click", this._linkPreviewCallback);
            this._element.appendChild(this._template)
        };
        a.setSharingUrl = function (a, b) {
            this._mode = b;
            this._previewUrl = a;
            this._sharingURL = a = a.replace("#", "/");
            // ___gapi_loaded.isLoaded ? gapi.client.urlshortener.url.insert({
            //     resource: {
            //         longUrl: a
            //     }
            // }).execute(this._shortenURLCallback) : this._doSetSharingUrl(a,
            // a, b)
        };
        a.urlShortenCallback = function (a) {
            (a = a.id) ? this._doSetSharingUrl(this._sharingURL, a, this._mode) : this._doSetSharingUrl(this._sharingURL, this._sharingURL, this._mode)
        };
        a._doSetSharingUrl = function (a, b, e) {
            this._shortURL = b;
            var c = d.siteManager.getCopyManager(),
                f = "";
            switch (e) {
                case g.MODE_LAB_REPORT:
                    f = c.getCopy("labReport/social/labReportTwitterShared");
                    break;
                case g.MODE_ORCHESTRA_LIVE:
                    f = c.getCopy("labReport/social/orchestraVideo");
                    break;
                case g.MODE_ORCHESTRA_VIRTUAL:
                    f = c.getCopy("labReport/social/orchestraVirtualSession");
                    break;
                case g.MODE_PERISCOPES:
                    f = c.getCopy("labReport/social/periscopesTwitterShared");
                    break;
                case g.MODE_VISUALISER:
                    f = c.getCopy("labReport/social/visualiserTraceRouteTwitterShared");
                    break;
                case g.MODE_SKETCHBOTS_SKETCH:
                    f = c.getCopy("labReport/social/sandrobotSketch");
                    break;
                case g.MODE_SKETCHBOTS_VIDEO:
                    f = c.getCopy("labReport/social/sandrobotVideo")
            }
            f = f.replace(/\[(.*?)\]/, "");
            f = f.replace("#weblab", "");
            this._sharingURL = encodeURI(a);
            this._gplusElement.setAttribute("href", this._sharingURL);
            this._fbElement.setAttribute("href",
            this._sharingURL);
            a = "//platform.twitter.com/widgets/tweet_button.html?url=" + b + "&text=" + f + "&hashtags=weblab";
            this._twitterFrame.setAttribute("src", "");
            this._twitterFrame.setAttribute("src", a);
            this._linkElement.setAttribute("value", b)
        };
        a.extractParamFromUri = function (a, b) {
            if (a) {
                var e = RegExp("[\\?&#]" + b + "=([^&#]*)").exec(a);
                if (null != e) return unescape(e[1])
            }
        };
        a.trackTwitter = function (a) {
            console.log("SHARING: trackTwitter");
            if (a) {
                var b;
                a.target && "IFRAME" == a.target.nodeName && (b = this.extractParamFromUri(a.target.src,
                    "url"));
                _gaq.push(["_trackSocial", "twitter", "tweet", b])
            }
        };
        a.trackFacebookLike = function (a) {
            if (a === this._sharingURL) {
                var b = a = "";
                switch (this._mode) {
                    case g.MODE_LAB_REPORT:
                        a = "LabReportLikedFacebook";
                        b = "The user liked a 课件台 Report on Facebook :: " + this._sharingURL;
                        break;
                    case g.MODE_ORCHESTRA_LIVE:
                        a = "OrchestraLiveArtefactLikedFacebook";
                        b = "The user liked an Orchestra Live Artefact on Facebook :: " + this._sharingURL;
                        break;
                    case g.MODE_ORCHESTRA_VIRTUAL:
                        a = "OrchestraVirtualArtefactLikedFacebook";
                        b = "The user liked an Orchestra Virtual Artefact on Facebook :: " + this._sharingURL;
                        break;
                    case g.MODE_PERISCOPES:
                        a = "TeleporterArtefactLikedFacebook";
                        b = "The user liked a Telporter Artefact on Facebook :: " + this._sharingURL;
                        break;
                    case g.MODE_VISUALISER:
                        a = "VisualiserArtefactLikedFacebook";
                        b = "The user liked a Visualiser Artefact on Facebook :: " + this._sharingURL;
                        break;
                    case g.MODE_SKETCHBOTS_SKETCH:
                        a = "SketcbotsSketchArtefactLikedFacebook";
                        b = "The user liked a Sketchbots Sketch Artefact on Facebook :: " + this._sharingURL;
                        break;
                    case g.MODE_SKETCHBOTS_VIDEO:
                        a = "SketchbotsVideoArtefactLikedFacebook",
                        b = "The user liked a Sketchbots Video Artefact on Facebook :: " + this._sharingURL
                }
                d.siteManager.getTracker().trackEvent(c.LAB_REPORT, a, b)
            }
        };
        a.trackGPlusOne = function (a) {
            if (a.href === this._sharingURL) {
                var b = a = "";
                switch (this._mode) {
                    case g.MODE_LAB_REPORT:
                        a = "LabReportLikedGPlus";
                        b = "The user liked a 课件台 Report on GPlus :: " + this._sharingURL;
                        break;
                    case g.MODE_ORCHESTRA_LIVE:
                        a = "OrchestraLiveArtefactLikedGPlus";
                        b = "The user liked an Orchestra Live Artefact on GPlus :: " + this._sharingURL;
                        break;
                    case g.MODE_ORCHESTRA_VIRTUAL:
                        a =
                            "OrchestraVirtualArtefactLikedGPlus";
                        b = "The user liked an Orchestra Virtual Artefact on GPlus :: " + this._sharingURL;
                        break;
                    case g.MODE_PERISCOPES:
                        a = "TeleporterArtefactLikedGPlus";
                        b = "The user liked a Telporter Artefact on GPlus :: " + this._sharingURL;
                        break;
                    case g.MODE_VISUALISER:
                        a = "VisualiserArtefactLikedGPlus";
                        b = "The user liked a Visualiser Artefact on GPlus :: " + this._sharingURL;
                        break;
                    case g.MODE_SKETCHBOTS_SKETCH:
                        a = "SketcbotsSketchArtefactLikedGPlus";
                        b = "The user liked a Sketchbots Sketch Artefact on GPlus :: " + this._sharingURL;
                        break;
                    case g.MODE_SKETCHBOTS_VIDEO:
                        a = "SketchbotsVideoArtefactLikedGPlus", b = "The user liked a Sketchbots Video Artefact on GPlus :: " + this._sharingURL
                }
                d.siteManager.getTracker().trackEvent(c.LAB_REPORT, a, b)
            }
        };
        a._linkElementSelect = function () {
            this._linkElement.focus();
            this._linkElement.select()
        };
        a._linkElementMouseMove = function (a) {
            a.preventDefault();
            return !1
        };
        a._linkPreviewClick = function () {
            window.open(this._previewUrl, "_newTab")
        };
        a.show = function () {
            FB.XFBML.parse();
            FB.Event.subscribe("edge.create",
            this.trackFacebookLike.bind(this));
            var a = this.trackGPlusOne.bind(this);
            gapi.plusone.render(this._gplusElement, {
                size: "medium",
                href: this._sharingURL,
                callback: a
            });
            console.log("SHARING: twttr");
            var b = this;
            twttr.ready(function (a) {
                console.log("SHARING: twttr ready");
                a.events.bind("tweet", b.trackTwitter.bind(this))
            })
        };
        a.hide = function () {
            FB.Event.unsubscribe("edge.create", this.trackFacebookLike.bind(this))
        };
        a.destroy = function () {
            e.removeRandomSoundListener(this._linkPreviewButton, "click", e.NAV_BUTTON_CLICK);
            this._linkElement.removeEventListener("mousemove", this._linkElementMouseMove.bind(this));
            this._linkElement.removeEventListener("click", this._linkElementSelectCallback);
            this._linkPreviewButton.removeEventListener("click", this._linkPreviewCallback);
            s.destroy.call(this)
        };
        g.create = function (a, b, e) {
            var c = new g;
            c.setup(a, b, e);
            return c
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    if (void 0 === a.LabReportItem) {
        var b = function () {
            this._init()
        };
        a.LabReportItem = b;
        b.TYPE_REPORT_IMAGE = "typeReportImage";
        b.TYPE_REPORT_VIDEO = "typeReportVideo";
        b.TYPE_VECTOR_DRAWING = "typeVectorDrawing";
        b.TYPE_ORCHESTRA_VIRTUAL_DATA = "typeOrchestraVirtualData";
        b.EXP_ORCHESTRA = "experimentOrchestra";
        b.EXP_PERISCOPES = "experimentPeriscopes";
        b.EXP_SAND_ROBOTS = "experimentSandRobots";
        b.EXP_DATA_VISUALISER = "experimentDataVisualiser";
        a = a.LabReportItem.prototype = new f;
        a._init = function () {
            this._data = this._experiment = this._createdTimestamp = this._type = this._id = null;
            this._hasBeenSaved = !1;
            return this
        };
        a.setup = function (a, b, e, f, h) {
            this._experiment = a;
            this._type = b;
            this._data = e;
            this._id = e.aid;
            this._ownerId = f;
            this._internalId = h || this._id;
            this._createdTimestamp = e.created
        };
        a.getId = function () {
            return this._id
        };
        a.getInternalId = function () {
            return this._internalId
        };
        a.getOwnerId = function () {
            return this._ownerId
        };
        a.getType = function () {
            return this._type
        };
        a.getData = function () {
            return this._data
        };
        a.getExperiment = function () {
            return this._experiment
        };
        a.getTimestamp = function () {
            return this._createdTimestamp
        };
        b.create = function (a, c, e, f, h) {
            var l = new b;
            l.setup(a, c, e, f, h);
            return l
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.utils.data");
    var f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem,
        c = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportSocialPanel;
    WEBLAB.namespace("WEBLAB.utils");
    var e = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        g = WEBLAB.namespace("WEBLAB.common.singletons"),
        h = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds,
        l = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners;
    WEBLAB.namespace("WEBLAB.utils");
    if (void 0 === a.TakeawayContentView) {
        var k = function () {
            this._init()
        };
        a.TakeawayContentView = k;
        k.LOADED = "loaded";
        k.ERROR = "error";
        k.SHARE_PREVIEW = "sharePreview";
        k.DELETE_CONTENT = "deleteContent";
        k.FLAG_INAPPROPRIATE = "flagInappropriate";
        a = a.TakeawayContentView.prototype = new f;
        a._init = function () {
            this._isSharingMode = this._isMyContent = !1;
            this._sharingURL = this._socialPanel = this._currentContent = this._labReportItem = this._element = null;
            this._isErrorState = this._isLoaded = !1;
            this._completeShowTimeoutId = this._completeHideTimeoutId = -1;
            this._deleteClickCallback = b.createListenerFunction(this, this._deleteClick);
            this._flagClickCallback = b.createListenerFunction(this, this._flagClick);
            this._completeShowCallback = b.createListenerFunction(this, this._completeShow);
            this._setContentVisibleCallback = b.createListenerFunction(this, this._setContentVisible);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._contentHolder = this._element.querySelector(".content");
            this._descriptionHolder = this._element.querySelector(".description");
            this._avatarHolder = this._descriptionHolder.querySelector(".avatarIcon");
            this._detailHolder = this._descriptionHolder.querySelector(".detail");
            if (this._deleteButton = this._element.querySelector("button.delete")) this._deleteButton.addEventListener("click", this._deleteClickCallback), l.addStandardSmallButtonListeners(this._deleteButton, "labReport");
            if (this._flagButton = this._element.querySelector("button.flag")) this._flagButton.addEventListener("click",
            this._flagClickCallback), l.addStandardSmallButtonListeners(this._flagButton, "labReport");
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.setIsMyContent = function (a) {
            (this._isMyContent = a) ? e.addClass(this._element, "myContent") : e.removeClass(this._element, "myContent")
        };
        a.setModeNormal = function () {
            this._isSharingMode = !1;
            e.removeClass(this._element, "sharing")
        };
        a.setModeSharing = function () {
            this._isSharingMode = !0;
            e.addClass(this._element, "sharing")
        };
        a.flag = function () {
            e.addClass(this._element, "flagged")
        };
        a.setLabReportItem = function (a) {
            this._labReportItem = a;
            var a = this._labReportItem.getInternalId(),
                a = a.substring(a.indexOf(".") + 1),
                b = "",
                b = a[0] + "#" + a.substring(1),
                a = g.siteManager.getDocumentOrigin() + "/" + g.siteManager.getLanguage() + "/sharing/" + this._labReportItem.getOwnerId() + "/" + b;
            this._socialPanel = c.create(this._element.querySelector(".social"), a, this.getSocialMode());
            this._labReportItem._flagged && this.flag()
        };
        a.getSocialMode = function () {
            var a = null,
                b = this._labReportItem.getExperiment(),
                e = this._labReportItem.getType();
            switch (b) {
                case d.EXP_ORCHESTRA:
                    a = e == d.TYPE_ORCHESTRA_VIRTUAL_DATA ? c.MODE_ORCHESTRA_VIRTUAL : c.MODE_ORCHESTRA_LIVE;
                    break;
                case d.EXP_PERISCOPES:
                    a = c.MODE_PERISCOPES;
                    break;
                case d.EXP_SAND_ROBOTS:
                    a = e == d.TYPE_REPORT_IMAGE ? c.MODE_SKETCHBOTS_SKETCH : c.MODE_SKETCHBOTS_VIDEO;
                    break;
                case d.EXP_DATA_VISUALISER:
                    a = c.MODE_VISUALISER
            }
            return a
        };
        a.getLabReportItem = function () {
            return this._labReportItem
        };
        a.getElement = function () {
            return this._element
        };
        a.getContentWidth = function () {
            return this._element.querySelector(".group").clientWidth
        };
        a.load = function () {
            if (!this._isLoaded) this._insertAvatar(), this._isLoaded = !0
        };
        a.finishLoad = function () {
            this._isLoaded = !0;
            this.dispatchCustomEvent(k.LOADED, null)
        };
        a._insertAvatar = function () {
            var a = g.siteManager.getLabReportManager().getCurrentLabTagId();
            this._avatarHolder.appendChild(g.siteManager.getLabTag(45, a))
        };
        a._setContentVisible = function () {
            e.addClass(this._currentContent, "visible")
        };
        a.show = function () {
            this._isLoaded || this.load();
            this._socialPanel.show();
            this.trackShow();
            clearTimeout(this._completeShow.id);
            this._completeShow.id = setTimeout(this._completeShowCallback, 50)
        };
        a._completeShow = function () {
            e.addClass(this._element, "visible")
        };
        a.hide = function (a) {
            if (a) {
                e.addClass(this._element, "vanish");
                var b = this._element;
                (new TWEEN.Tween({
                    scaleEnvelope: 1
                })).to({
                    scaleEnvelope: 0
                }, 200).delay(500).onUpdate(function () {
                    var a = "scale(" + this.scaleEnvelope + ")";
                    b.style.setProperty("-webkit-transform", a, "");
                    b.style.setProperty("-moz-transform", a, "");
                    b.style.setProperty("transform", a, "")
                }).start()
            }
            this._socialPanel.hide()
        };
        a._completeVanish = function () {
            this._element.style.setProperty("display", "none", "");
            this.unload()
        };
        a.unload = function () {
            console.log("Called unload :: ", this._labReportItem.getId());
            this.hide();
            setTimeout(this._completeUnload.bind(this), 500)
        };
        a._completeUnload = function () {
            this._currentContent = null;
            this._contentHolder.innerHTML = "";
            this._isLoaded = !1
        };
        a.showErrorState = function () {
            this._isErrorState = this._isLoaded = !0;
            var a = this._element.querySelector(".group");
            this._contentHolder.style.setProperty("display",
                "none", "");
            this._descriptionHolder.style.setProperty("display", "none", "");
            this._element.querySelector(".actionButtons").style.setProperty("display", "none", "");
            var b = g.siteManager.getTemplateManager().getTemplate("labReport/itemError");
            a.appendChild(b);
            e.addClass(this._element, "errorState");
            this.dispatchCustomEvent(k.ERROR, null)
        };
        a._deleteClick = function () {
            this.dispatchCustomEvent(k.DELETE_CONTENT, null)
        };
        a._flagClick = function () {
            this.dispatchCustomEvent(k.FLAG_INAPPROPRIATE, null)
        };
        a._sharePreviewClick = function () {
            this.dispatchCustomEvent(k.SHARE_PREVIEW, null)
        };
        a.trackShow = function () {
            var a = this._isMyContent ? "Owner" : "OtherUser",
                b = this._isMyContent ? "their" : "another user's",
                e = this._labReportItem.getExperiment(),
                c = this._labReportItem.getType(),
                f = "",
                l = "";
            switch (e) {
                case d.EXP_ORCHESTRA:
                    c == d.TYPE_ORCHESTRA_VIRTUAL_DATA ? (f = "OrchestraVirtualArtefactView" + a, l = "The user viewed " + b + " Orchestra Virtual Artefact :: " + this._labReportItem.getId()) : (f = "OrchestraLiveArtefactView" + a, l = "The user viewed " + b + " Orchestra Live Artefact :: " + this._labReportItem.getId());
                    break;
                case d.EXP_PERISCOPES:
                    f = "TeleporterArtefactView" + a;
                    l = "The user viewed " + b + " Teleporter Artefact :: " + this._labReportItem.getId();
                    break;
                case d.EXP_SAND_ROBOTS:
                    c == d.TYPE_REPORT_IMAGE ? (f = "SketchbotsPortraitArtefactView" + a, l = "The user viewed " + b + " Sketchbot Portrait Artefact :: " + this._labReportItem.getId()) : c == d.TYPE_VECTOR_DRAWING ? (f = "SketchbotsVectorArtefactView" + a, l = "The user viewed " + b + " Sketchbot Vector Artefact :: " + this._labReportItem.getId()) : (f = "SketchbotsVideoArtefactView" + a, l = "The user viewed " + b + " Sketchbot Video Artefact :: " + this._labReportItem.getId());
                    break;
                case d.EXP_DATA_VISUALISER:
                    f = "DataTracerArtefactView" + a, l = "The user viewed " + b + " Data Tracer Artefact :: " + this._labReportItem.getId()
            }
            g.siteManager.getTracker().trackEvent(h.LAB_REPORT, f, l)
        };
        a.destroy = function () {
            this._deleteButton && (this._deleteButton.removeEventListener("click", this._deleteClickCallback), l.removeStandardSmallButtonListeners(this._deleteButton, "labReport"));
            this._flagButton && (this._flagButton.removeEventListener("click",
            this._flagClickCallback), l.removeStandardSmallButtonListeners(this._flagButton, "labReport"));
            this._flagButton = this._deleteButton = null;
            if (this._currentContent) this._currentContent.innerHTML = "";
            this._element = this._currentContent = null
        };
        k.create = function (a) {
            var b = new k;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = a.TakeawayContentView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    var b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem;
    WEBLAB.namespace("WEBLAB.robots.vectorise");
    var c = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    if (void 0 === a.ReportImageView) {
        var e = function () {
            this._init()
        };
        a.ReportImageView = e;
        var a = a.ReportImageView.prototype = new f,
            g = f.prototype;
        a._init = function () {
            g._init.call(this);
            this._reportImageLoadCallback = b.createListenerFunction(this, this._reportImageLoaded);
            return this
        };
        a.setElement = function (a) {
            g.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            g.setLabReportItem.call(this, a);
            if (this._labReportItem.getType() !== d.TYPE_REPORT_IMAGE) throw Error("Error: ReportImageView not given the correct type of LabReportItem: ", a);
            c.addClass(this._element, "labReportImage");
            a.getExperiment() == d.EXP_SAND_ROBOTS && c.addClass(this._element, "narrowImage")
        };
        a.load = function () {
            g.load.call(this);
            this._loadReportImage(this._labReportItem)
        };
        a._loadReportImage = function (a) {
            console.log("ShowTakeAwayContentPage :: _loadReportImage for item: ", a);
            var b = a.getData().image,
                a = document.createElement("div");
            a.className = "imageHolder";
            var e = new Image;
            e.onload = this._reportImageLoadCallback;
            e.src = b;
            a.appendChild(e);
            b = document.createElement("div");
            b.className = "takeAwayDisplay image";
            b.appendChild(a);
            this._currentContent = b;
            this._contentHolder.appendChild(this._currentContent)
        };
        a._reportImageLoaded = function () {
            c.addClass(this._currentContent, "visible");
            this.finishLoad()
        };
        a.show = function (a) {
            g.show.call(this, a)
        };
        a.unload = function () {
            g.unload.call(this)
        };
        a.destroy = function () {
            this._element = null
        };
        e.create = function (a) {
            var b = new e;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = a.TakeawayContentView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    var d = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem;
    WEBLAB.namespace("WEBLAB.robots.vectorise");
    var c = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    if (void 0 === a.ReportVideoView) {
        var e = function () {
            this._init()
        };
        a.ReportVideoView = e;
        var a = a.ReportVideoView.prototype = new b,
            g = b.prototype;
        a._init = function () {
            g._init.call(this);
            this._videoLoaded = !1;
            this._youTubeID = this._videoID = this._videoFrame = this._videoSrc = null;
            this._isProcessing = !1;
            return this
        };
        a.setElement = function (a) {
            g.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            g.setLabReportItem.call(this, a);
            if (this._labReportItem.getType() !== d.TYPE_REPORT_VIDEO) throw Error("Error: ReportVideoView not given the correct type of LabReportItem: ", a);
            this._labReportItem.getExperiment() == d.EXP_ORCHESTRA ? c.addClass(this._element, "orchestra") : this._labReportItem.getExperiment() == d.EXP_SAND_ROBOTS && c.addClass(this._element, "sketchbots");
            c.addClass(this._element, "labReportVideo")
        };
        a.load = function () {
            g.load.call(this);
            var a = this._labReportItem.getData().video;
            this._videoLoaded || (this.isYouTubeURL(a) ? this._loadReportVideo(this._labReportItem) : ("processing" == a && this._setVideoIsProcessingState(), "error" == a && this._setVideoErrorState()));
            this._contentHolder.appendChild(this._currentContent);
            this.finishLoad()
        };
        a.isYouTubeURL = function (a) {
            return !a || "" == a || "processing" == a || -1 == a.indexOf("http://") ? !1 : !0
        };
        a._loadReportVideo = function (a) {
            console.log("ShowTakeAwayContentPage :: _loadReportVideo for item: ", a);
            this._videoSrc = this._convertToEmbedURL(a.getData().video);
            if (this.isYouTubeURL(this._videoSrc)) {
                a = document.createElement("div");
                a.className = "takeAwayDisplay videoContainer";
                var b = document.createElement("div");
                b.className = "videoBackground";
                a.appendChild(b);
                this._videoFrame = document.createElement("iframe");
                this._videoFrame.setAttribute("width", 460);
                this._videoFrame.setAttribute("height", 259);
                a.appendChild(this._videoFrame);
                this._currentContent = a;
                this._descriptionHolder.style.setProperty("display", "block")
            } else this._videoLoaded = !0, this.showErrorState()
        };
        a._setVideoIsProcessingState = function () {
            this._currentContent = f.siteManager.getTemplateManager().getTemplate("labReport/reportVideoProcessing").cloneNode(!0);
            this._labReportItem.getExperiment() == d.EXP_SAND_ROBOTS && this._descriptionHolder.style.setProperty("display",
                "none", "");
            this._videoLoaded = this._isProcessing = !0
        };
        a._setVideoErrorState = function () {
            this._currentContent = f.siteManager.getTemplateManager().getTemplate("labReport/reportVideoError").cloneNode(!0);
            this._labReportItem.getExperiment() == d.EXP_SAND_ROBOTS && this._descriptionHolder.style.setProperty("display", "none", "");
            this._videoLoaded = this._isProcessing = !0
        };
        a._getYouTubeId = function (a) {
            var b = a.lastIndexOf("v=");
            return a.slice(b + 2)
        };
        a._convertToEmbedURL = function (a) {
            a = a.replace("/v/", "/embed/");
            return a +
                "&modestbranding=1&rel=0&autohide=1"
        };
        a.show = function () {
            g.show.call(this);
            if (!this._videoLoaded && !this._isErrorState) {
                this._videoFrame.src = this._videoSrc;
                var a = this._element.querySelector(".takeAwayDisplay");
                c.addClass(a, "visible");
                this._videoLoaded = !0
            }
        };
        a.hide = function (a) {
            g.hide.call(this, a);
            if (this._videoLoaded && !this._isProcessing) {
                if (this._videoFrame) this._videoFrame.src = "";
                this._videoLoaded = !1
            }
        };
        a.unload = function () {
            g.unload.call(this);
            if (this._videoLoaded && !this._isProcessing) {
                if (this._videoFrame) this._videoFrame.src =
                    "";
                this._videoLoaded = !1
            }
        };
        a.destroy = function () {
            this._element = null
        };
        e.create = function (a) {
            var b = new e;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").TakeawayContentView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.utils.formatter");
    var b = WEBLAB.namespace("WEBLAB.common.singletons"),
        d = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    if (void 0 === a.ReportVisualiserView) {
        var c = function () {
            this._init()
        };
        a.ReportVisualiserView = c;
        var a = a.ReportVisualiserView.prototype = new f,
            e = f.prototype;
        a._init = function () {
            e._init.call(this);
            this._contentElement = null;
            this._searchImageLoaded = this._backgroundImageLoaded = this._isMuseum = !1;
            return this
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            e.setLabReportItem.call(this, a)
        };
        a.shortenURL = function (a) {
            var a = a.replace("http://", ""),
                b = a.substring(0, 12),
                a = a.substring(a.length - 12);
            return b + "..." + a
        };
        a.load = function () {
            e.load.call(this);
            this._insertDescription();
            var a = this._labReportItem.getData(),
                c = "lon" == a.data.activity_space || "museum" == a.data.type;
            this._contentElement = (this._isMuseum = c) ? b.siteManager.getTemplateManager().getTemplate("labReport/visualiserMuseumContent").cloneNode(!0) : b.siteManager.getTemplateManager().getTemplate("labReport/visualiserOnlineContent").cloneNode(!0);
            this._descriptionHolder.querySelector(".location").innerHTML = "<h2>" + this._localiseLocation(a.data.location) + "</h2>";
            this._contentElement.querySelector(".imageLink").setAttribute("href", a.data.page_url || a.data.image_url || a.data.imageUrl);
            this._contentElement.querySelector(".imageLinkText").innerHTML = this.shortenURL(a.data.image_url || a.data.imageUrl);
            var d = this._descriptionHolder.querySelector(".traceRouteTime");
            if (a.data.time) {
                var f = parseFloat(a.data.time);
                d.innerHTML = "<h2>" + (f / 1E3).toFixed(3) + "</h2>"
            } else this._descriptionHolder.querySelector(".timeHolder") && this._descriptionHolder.querySelector(".timeHolder").style.setProperty("display",
                "none", "");
            var j = this._contentElement.querySelector(".searchImageContainer"),
                d = this._contentElement.querySelector(".searchImage");
            if (!c) d.onload = function () {
                var a = j.clientHeight + 6;
                j.style.setProperty("margin-left", -0.5 * (j.clientWidth + 6) + "px");
                j.style.setProperty("margin-top", -0.5 * a + "px");
                this._onSearchImageLoaded()
            }.bind(this);
            d.src = c ? a.image : a.map_image || a.data.image_url || a.data.imageUrl;
            d = new XMLHttpRequest;
            d.open("GET", a.image, !0);
            d.onreadystatechange = function () {
                -1 != this.getResponseHeader("content-type").indexOf("image/gif") && j.style.setProperty("opacity", "1");
                this.onreadystatechange = null
            };
            d.send();
            if (c) this._contentElement.querySelector(".worldMap").src = a.data.map_image, this._onBackgroundImageLoaded();
            this._descriptionHolder.querySelector(".visualiserDescription").appendChild(this._element.querySelector(".avatarIcon"));
            this._contentHolder.appendChild(this._contentElement);
            this.finishLoad()
        };
        a._loadImage = function () {
            var a = this._labReportItem.getData(),
                b = this._contentElement.querySelector(".backgroundImage");
            b.onload = this._onBackgroundImageLoaded.bind(this);
            b.src = a.image
        };
        a._onBackgroundImageLoaded = function () {
            if (this._searchImageLoaded || !this._isMuseum) {
                var a = this._contentElement.querySelector("spinnerHolder");
                d.removeClass(a, "visible");
                d.addClass(this._contentElement, "loaded")
            }
            this._backgroundImageLoaded = !0
        };
        a._onSearchImageLoaded = function () {
            if (this._backgroundImageLoaded) {
                var a = this._contentElement.querySelector("spinnerHolder");
                d.removeClass(a, "visible");
                d.addClass(this._contentElement, "loaded")
            }
            this._searchImageLoaded = !0
        };
        a._localiseLocation = function (a) {
            var e = a;
            e || (e = "ZZ");
            2 == a.length && (a = b.siteManager.getCopyManager().getCopy("countryCodes/" + a)) && (e = a);
            return e
        };
        a._insertDescription = function () {
            this._descriptionHolder.appendChild(b.siteManager.getTemplateManager().getTemplate("labReport/visualiserDescription").cloneNode(!0));
            this._insertComparisonDetail()
        };
        a._insertComparisonDetail = function () {
            this._labReportItem.getData();
            b.siteManager.getCopyManager()
        };
        a._formatNumber = function (a, b) {
            for (var e = a.toString() + "", b = null == b ? "," : b, c = e.split("."), e = c[0], c = 1 < c.length ?
                "." + c[1] : "", d = /(\d+)(\d{3})/; d.test(e);) e = e.replace(d, "$1" + b + "$2");
            return e + c
        };
        a.show = function () {
            e.show.call(this);
            this._backgroundImageLoaded || this._loadImage()
        };
        a.destroy = function () {
            this._element = null
        };
        c.create = function (a) {
            var b = new c;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = a.TakeawayContentView,
        b = WEBLAB.namespace("WEBLAB.common.singletons"),
        d = WEBLAB.namespace("WEBLAB.common.sound").OrchestraSoundLoader;
    WEBLAB.namespace("WEBLAB.orchestra.constants");
    var c = WEBLAB.namespace("WEBLAB.common.sound").SoundManager;
    WEBLAB.namespace("WEBLAB.common");
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    var e = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        g = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem;
    WEBLAB.namespace("WEBLAB.utils.loading");
    WEBLAB.namespace("WEBLAB.orchestra.loading");
    var h = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        l = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners,
        k = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.ReportOrchestraVirtualView) {
        var j = function () {
            this._init();
            this._virtualPlayer = null
        };
        a.ReportOrchestraVirtualView = j;
        var a = a.ReportOrchestraVirtualView.prototype = new f,
            n = f.prototype;
        a._init = function () {
            n._init.call(this);
            this._playerLoaded = !1;
            this._currentContent = null;
            this._isPlaying = this._pendingLoad = !1;
            this._spinnerLayer = this._playButton = null;
            this._muteStateDidChangeCallback = e.createListenerFunction(this, this._muteStateDidChange);
            this._soundsLoaderCompleteCallback = e.createListenerFunction(this, this._soundsLoaderComplete);
            this._playbackEndedCallback = e.createListenerFunction(this, this._playbackEnded);
            if (b.siteManager) {
                var a = b.siteManager.getSoundManager();
                null !== a && (a.addEventListener(c.MUTE_CHANGED, this._muteStateDidChangeCallback), a.forceMuteEvent())
            }
            this._loadVirtualJS();
            return this
        };
        a.setElement = function (a) {
            n.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            n.setLabReportItem.call(this, a);
            if (this._labReportItem.getType() !== g.TYPE_ORCHESTRA_VIRTUAL_DATA) throw Error("Error: ReportOrchestraVirtualView not given the correct type of LabReportItem: ", a);
            h.addClass(this._element, "orchestra");
            h.addClass(this._element, "orchestraVirtual");
            this.insertDesciption("labReport/orchestraVirtualDescription")
        };
        a.load = function () {
            n.load.call(this);
            this.finishLoad()
        };
        a.insertDesciption = function (a) {
            this._descriptionHolder.appendChild(b.siteManager.getTemplateManager().getTemplate(a).cloneNode(!0));
            try {
                this._labReportItem.getData()
            } catch (e) {}
            var a = this._descriptionHolder.querySelector(".collaborationText"),
                c = b.siteManager.getCopyManager().getCopy("orchestra/labReport/takeawayDescriptionBody");
            a.innerHTML = c
        };
        a.loadPlayer = function () {
            try {
                this._playerLoaded || (void 0 !== window.webkitAudioContext ? this._loadOrchestraVirtualData(this._labReportItem) : this._displayNoChrome()),
                this._contentHolder.appendChild(this._currentContent)
            } catch (a) {
                console.error("ERROR: loading virtual player for aid: " + this._labReportItem.getId() + " : " + a.message), this.showErrorState()
            }
        };
        a._loadOrchestraVirtualData = function (a) {
            console.log("ReportOrchestraVirtualView :: _loadOrchestraVirtualData for item: ", a);
            this._currentContent ? this._currentContent.innerHTML = "" : this._currentContent = document.createElement("div");
            this._spinnerLayer = document.createElement("div");
            this._spinnerLayer.className = "spinner black";
            this._currentContent.appendChild(this._spinnerLayer);
            this._pendingLoad = !0;
            if (this._loadVirtualJS()) h.addClass(this._spinnerLayer, "visible");
            else {
                h.removeClass(this._spinnerLayer, "visible");
                var a = WEBLAB.namespace("WEBLAB.orchestra.ui.player").RecordedPlayback,
                    c = document.createElement("div");
                c.className = "player";
                this._currentContent.appendChild(c);
                this._virtualPlayer = a.create(this._currentContent, this._labReportItem.getData().data, a.PLAYBACK_SIZE_TAKEAWAY);
                this._virtualPlayer.showRecordingSnapshot();
                this._virtualPlayer.addEventListener(a.ENDED, this._playbackEndedCallback);
                b.siteManager.getSoundManager().getIsMuted() && this._virtualPlayer.mute();
                this._currentContent.appendChild(this._spinnerLayer);
                this._playButton = document.createElement("div");
                this._playButton.className = "playButton";
                this._currentContent.appendChild(this._playButton);
                l.addStandardSmallButtonListeners(this._playButton);
                var d = e.createListenerFunction(this, this.startPlayer),
                    f = e.createListenerFunction(this, this.stopPlayer),
                    g = this._playButton;
                this._playButton.addEventListener("click", function () {
                    d();
                    h.addClass(g, "hidden")
                });
                c.addEventListener("click", function () {
                    f();
                    h.removeClass(g, "hidden")
                });
                this._playerLoaded = !0;
                this._pendingLoad = !1
            }
        };
        a._loadVirtualJS = function () {
            var a = b.siteManager.getVirtualPlayerJSLoader().getNeedsLoad();
            a && (b.siteManager.getVirtualPlayerJSLoader().addEventListener("loaded", this._virtualPlayerJSLoaded.bind(this)), b.siteManager.getVirtualPlayerJSLoader().load());
            return a
        };
        a._virtualPlayerJSLoaded = function () {
            b.siteManager.getVirtualPlayerJSLoader().removeEventListener("loaded",
            this._virtualPlayerJSLoaded.bind(this));
            this._pendingLoad && this._loadOrchestraVirtualData(this._labReportItem)
        };
        a._displayNoChrome = function () {
            this._playerLoaded = !0;
            this._currentContent = b.siteManager.getTemplateManager().getTemplate("labReport/virtualOrchestraNoChrome").cloneNode(!0)
        };
        a.startPlayer = function () {
            if (!this._isPlaying) {
                this._isPlaying = !0;
                var a = b.siteManager.getOrchestraSoundLoader();
                !a.isLoaded() && !a.isLoading() || 0 == a.getSounds().length ? (a.addEventListener(d.LOADED, this._soundsLoaderCompleteCallback),
                a.loadVirtualPlayerSounds(), h.addClass(this._spinnerLayer, "visible")) : a.isLoaded() && (b.siteManager.getSoundManager().getIsMuted() ? this._virtualPlayer.mute() : this._virtualPlayer.unmute(), this._virtualPlayer.start())
            }
        };
        a.stopPlayer = function () {
            if (this._isPlaying) this._virtualPlayer.stop(), h.removeClass(this._playButton, "hidden"), this._isPlaying = !1
        };
        a._playbackEnded = function () {
            this._isPlaying = !1;
            h.removeClass(this._playButton, "hidden")
        };
        a._soundsLoaderComplete = function () {
            this._isPlaying && this._virtualPlayer.start();
            h.removeClass(this._spinnerLayer, "visible");
            h.addClass(this._spinnerLayer, "inactive")
        };
        a.show = function (a) {
            this._playerLoaded || this.loadPlayer();
            this._playButton && h.removeClass(this._playButton, "hidden");
            n.show.call(this, a)
        };
        a.hide = function (a) {
            this._playerLoaded && null !== this._virtualPlayer && (this.stopPlayer(), this._virtualPlayer.mute());
            n.hide.call(this, a)
        };
        a._muteStateDidChange = function (a) {
            this._virtualPlayer && (a.detail ? this._virtualPlayer.mute() : this._virtualPlayer.unmute())
        };
        a.unload = function () {
            n.unload.call(this)
        };
        a.destroy = function () {
            this._playButton && l.removeStandardSmallButtonListeners(this._playButton);
            this._spinnerLayer = this._playButton = null;
            k.destroyIfExists(this._virtualPlayer);
            this._virtualPlayer = null;
            this._playerLoaded = !1;
            this._element = null
        };
        j.create = function (a) {
            var b = new j;
            b.setElement(a);
            return b
        };
        j.isValidData = function (a) {
            try {
                if (!a.countryList || 0 == a.countryList.length || !a.initialLayout.instruments || 0 == a.recordingLength) return !1
            } catch (b) {
                return !1
            }
            return !0
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = a.ReportVideoView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.robots.vectorise");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    if (void 0 === a.ReportOrchestraLiveView) {
        var d = function () {
            this._init()
        };
        a.ReportOrchestraLiveView = d;
        var a = a.ReportOrchestraLiveView.prototype = new b,
            c = b.prototype;
        a._init = function () {
            c._init.call(this);
            return this
        };
        a.setElement = function (a) {
            c.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            c.setLabReportItem.call(this, a);
            this.insertDesciption("labReport/orchestraLiveDescription")
        };
        a.insertDesciption = function (a) {
            this._descriptionHolder.appendChild(f.siteManager.getTemplateManager().getTemplate(a).cloneNode(!0));
            try {
                this._labReportItem.getData()
            } catch (b) {}
            var a = this._descriptionHolder.querySelector(".collaborationText"),
                c = f.siteManager.getCopyManager().getCopy("orchestra/labReport/takeawayDescriptionBody");
            a.innerHTML = c
        };
        a.show = function () {
            c.show.call(this)
        };
        d.create = function (a) {
            var b = new d;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = a.ReportVideoView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.robots.vectorise");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    var d = WEBLAB.namespace("WEBLAB.utils.data").DateFunctions;
    if (void 0 === a.ReportRobotsVideoView) {
        var c = function () {
            this._init()
        };
        a.ReportRobotsVideoView = c;
        var a = a.ReportRobotsVideoView.prototype = new b,
            e = b.prototype;
        a._init = function () {
            e._init.call(this);
            return this
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            e.setLabReportItem.call(this, a);
            a = this._labReportItem.getData();
            this.insertDescription("labReport/sandRobotsDescription");
            this.insertTimeDescription(a.data.timeTaken);
            this.insertRobotId(a.data.robotId)
        };
        a.load = function () {
            e.load.call(this)
        };
        a.insertDescription = function (a) {
            this._descriptionHolder.appendChild(f.siteManager.getTemplateManager().getTemplate(a).cloneNode(!0))
        };
        a.insertTimeDescription = function (a) {
            a = d.getLocalisedDate(a, f.siteManager.getLanguage());
            this._descriptionHolder.querySelector(".date").innerHTML = a
        };
        a.insertRobotId = function (a) {
            if (a) {
                var b = this._descriptionHolder.querySelector(".robotInfo");
                b.innerHTML = b.innerHTML.replace(/\[(.*?)\]/, a)
            }
        };
        a.show = function () {
            e.show.call(this)
        };
        c.create = function (a) {
            var b = new c;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = a.TakeawayContentView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    var d = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem;
    WEBLAB.namespace("WEBLAB.robots.vectorise");
    var c = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        e = WEBLAB.namespace("WEBLAB.utils.data").DateFunctions;
    if (void 0 === a.ReportRobotsImageView) {
        var g = function () {
            this._init()
        };
        a.ReportRobotsImageView = g;
        var a = a.ReportRobotsImageView.prototype = new b,
            h = b.prototype;
        a._init = function () {
            h._init.call(this);
            this._currentContent = null;
            return this
        };
        a.setElement = function (a) {
            h.setElement.call(this, a);
            c.addClass(this._element, "narrowImage");
            return this
        };
        a.setLabReportItem = function (a) {
            h.setLabReportItem.call(this, a)
        };
        a.load = function () {
            h.load.call(this);
            var a = this._labReportItem.getData();
            this._labReportItem.getType() == d.TYPE_VECTOR_DRAWING && (this._loadVectorDrawing(this._labReportItem), this.insertDescription("labReport/sandRobotsVectorDescription"), this.insertTimeDescription(a.data.timeVectorProcessed));
            this._labReportItem.getType() == d.TYPE_REPORT_IMAGE && (this._loadPortraitImage(this._labReportItem), this.insertDescription("labReport/sandRobotsDescription"), this.insertTimeDescription(a.data.timeTaken), this.insertRobotId(a.data.robotId));
            this._contentHolder.appendChild(this._currentContent);
            this.finishLoad()
        };
        a.insertDescription = function (a) {
            this._descriptionHolder.appendChild(f.siteManager.getTemplateManager().getTemplate(a).cloneNode(!0))
        };
        a.insertTimeDescription = function (a) {
            a = e.getLocalisedDate(a, f.siteManager.getLanguage());
            this._descriptionHolder.querySelector(".date").innerHTML = a
        };
        a.insertRobotId = function (a) {
            if (null != a) {
                var b = this._descriptionHolder.querySelector(".robotInfo");
                b.innerHTML = b.innerHTML.replace(/\[(.*?)\]/, a + 1)
            }
        };
        a._loadVectorDrawing = function (a) {
            console.log("ShowTakeAwayContentPage :: _loadVectorDrawing for item: ", a);
            var b = document.createElement("div");
            b.className = "takeAwayDisplay vectorContainer";
            var e = new Image;
            e.src = a.getData().vectorimage;
            b.appendChild(e);
            this._currentContent = b
        };
        a._loadPortraitImage = function (a) {
            console.log("ShowTakeAwayContentPage :: _loadPortraitImage for item: ", a);
            var b = document.createElement("div");
            b.className = "takeAwayDisplay";
            var e = new Image;
            e.src = a.getData().image;
            b.appendChild(e);
            this._currentContent = b
        };
        a.show = function (a) {
            h.show.call(this, a)
        };
        a.unload = function () {
            h.unload.call(this)
        };
        a.destroy = function () {
            this._element = null
        };
        g.create = function (a) {
            var b = new g;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = a.ReportImageView;
    WEBLAB.namespace("WEBLAB.utils.data");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.robots.vectorise");
    var b = WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    var d = WEBLAB.namespace("WEBLAB.utils.data").DateFunctions;
    if (void 0 === a.ReportTeleporterSnapshotView) {
        var c = function () {
            this._init()
        };
        a.ReportTeleporterSnapshotView = c;
        var a = a.ReportTeleporterSnapshotView.prototype = new f,
            e = f.prototype;
        a._init = function () {
            e._init.call(this);
            return this
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            return this
        };
        a.setLabReportItem = function (a) {
            e.setLabReportItem.call(this, a)
        };
        a.load = function () {
            e.load.call(this);
            this.insertDescription();
            this.finishLoad()
        };
        a.insertDescription = function () {
            var g;
            this._descriptionHolder.appendChild(b.siteManager.getTemplateManager().getTemplate("labReport/periscopesDescription").cloneNode(!0));
            var a = this._labReportItem.getData().data,
                e = a.location;
            e || (e = "Periscopes_livefeed_tag_cam" + a.stream_location);
            e = b.siteManager.getCopyManager().getCopy("periscopes/locations/" + e);
            this._descriptionHolder.querySelector(".location").innerHTML = e || "UNKNOWN";
            e = d.getLocalisedDate(a.timeTaken, b.siteManager.getLanguage());
            this._descriptionHolder.querySelector(".date").innerHTML = e;
            g = (a = a.capture_location) ? a.toUpperCase() : "ZZ", a = g;
            a = b.siteManager.getCopyManager().getCopy("countryCodes/" + a);
            e = this._descriptionHolder.querySelector(".takenFrom");
            e.innerHTML = e.innerHTML.replace(/\[(.*?)\]/, "<h3 class='takenFromLocation'>" + a + "</h3>")
        };
        a.destroy = function () {
            this._element = null
        };
        c.create = function (a) {
            var b = new c;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem,
        b = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").TakeawayContentView,
        d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        c = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        e = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        g = WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    var h = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").ReportOrchestraVirtualView,
        l = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").ReportOrchestraLiveView;
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    var k = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").ReportRobotsVideoView,
        j = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").ReportRobotsImageView,
        n = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").ReportVisualiserView,
        q = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").ReportTeleporterSnapshotView,
        m = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners,
        o = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.LabReportItemCarousel) {
        var p = function () {
            this._init()
        };
        a.LabReportItemCarousel = p;
        p.DELETE_CONTENT = "labReportCarouselDeleteContent";
        p.FLAG_CONTENT = "labReportCarouselFlagContent";
        p.SHARE_PREVIEW = "labReportCarouselFlagContent";
        p.ITEM_WIDTH = 470;
        p.ITEM_HEIGHT = 300;
        a = a.LabReportItemCarousel.prototype = new c;
        a._init = function () {
            this._type = null;
            this._items = [];
            this._index = -1;
            this._itemsLoaded = 0;
            this._spinnerLayer = this._backButton = this._forwardButton = this._navElement = this._holderElement = this._maskElement = this._element = null;
            this._isSharing = !1;
            this._sharingTemplate = this._normalTemplate = null;
            this._forwardClickCallback = d.createListenerFunctionWithArguments(this, this._scrollContent, [1]);
            this._backClickCallback = d.createListenerFunctionWithArguments(this, this._scrollContent, [-1]);
            this._deleteClickCallback = d.createListenerFunction(this, this._clickDelete);
            this._sharePreviewCallback = d.createListenerFunction(this, this._sharePreviewClick);
            this._flagInappropriateCallback = d.createListenerFunction(this, this._flagInappropriateClick);
            this._completeRemoveCurrentItemCallback = d.createListenerFunction(this, this._completeRemoveCurrentItem);
            var a = g.siteManager.getTemplateManager();
            this._normalTemplate = a.getTemplate("labReport/takeAwayContentView");
            this._sharingTemplate = a.getTemplate("labReport/takeAwayShareView");
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._forwardButton && (m.removeSoundListener(this._forwardButton, "click", "common/slide/slide-right"), this._forwardButton.removeEventListener("click",
            this._forwardClickCallback));
            this._backButton && (m.removeSoundListener(this._backButton, "click", "common/slide/slide-left"), this._backButton.removeEventListener("click", this._backClickCallback));
            this._maskElement = this._element.querySelector(".takeAwayMask");
            this._holderElement = this._element.querySelector(".takeAway");
            this._navElement = this._element.querySelector(".nav");
            this._forwardButton = this._element.querySelector("button.forward");
            this._backButton = this._element.querySelector("button.back");
            this._spinnerLayer = this._element.querySelector(".spinnerLayer");
            e.addClass(this._spinnerLayer, "visible");
            this._forwardButton.addEventListener("click", this._forwardClickCallback);
            this._backButton.addEventListener("click", this._backClickCallback);
            m.addSoundListener(this._forwardButton, "click", "common/slide/slide-right", 1, "labReport");
            m.addSoundListener(this._backButton, "click", "common/slide/slide-left", 1, "labReport");
            this._maskElement.addEventListener("scroll", this._preventMaskScroll.bind(this))
        };
        a.show = function () {
            this._showSpinner();
            for (var a = 0; a < this._items.length; a++) try {
                this._items[a].load()
            } catch (b) {
                console.error("ERROR display labreportitem: " + this._items[a].getLabReportItem().getId() + " : ", b, b.stack), this._items[a].showErrorState()
            }
        };
        a.setPendingIndex = function (a) {
            this._index = a;
            0 < this._itemsLoaded && this._itemsLoaded == this._items.length && this._showItems()
        };
        a.reset = function () {
            this._holderElement.innerHTML = "";
            for (var a = 0; a < this._items.length; a++) {
                var e = this._items[a];
                e.removeEventListener(b.REPORT_SIZE, this._itemWidthCallback);
                e.removeEventListener(b.DELETE_CONTENT, this._deleteClickCallback);
                e.removeEventListener(b.SHARE_PREVIEW, this._sharePreviewCallback);
                e.removeEventListener(b.FLAG_INAPPROPRIATE, this._flagInappropriateCallback);
                e.destroy()
            }
            this._items = [];
            this._itemsLoaded = 0;
            this._showSpinner()
        };
        a.setIsMyContent = function (a) {
            for (var b = 0; b < this._items.length; b++) this._items[b].setIsMyContent(a)
        };
        a.setModeNormal = function () {
            this._isSharing = !1
        };
        a.setModeSharing = function () {
            this._isSharing = !0
        };
        a.removeCurrentItem = function () {
            this._showSpinner();
            var a = this._items[this._index];
            a.removeEventListener(b.REPORT_SIZE, this._itemWidthCallback);
            a.removeEventListener(b.DELETE_CONTENT, this._deleteClickCallback);
            a.removeEventListener(b.SHARE_PREVIEW, this._sharePreviewCallback);
            a.removeEventListener(b.FLAG_INAPPROPRIATE, this._flagInappropriateCallback);
            a.hide(!0);
            this._items.splice(this._index, 1);
            setTimeout(this._completeRemoveCurrentItemCallback, 1500);
            return 0 != this._items.length
        };
        a.flagCurrentItem = function () {
            this._items[this._index].flag()
        };
        a._completeRemoveCurrentItem = function () {
            if (this._index >= this._items.length) this._index = this._items.length - 1;
            var a = this._index;
            this._index = -1;
            this.scrollToIndex(a, 0);
            this._hideSpinner()
        };
        a.getCurrentItem = function () {
            return this._items[this._index].getLabReportItem()
        };
        a.addItems = function (a) {
            for (var b = 0; b < a.length; b++) this._addItem(a[b])
        };
        a._addItem = function (a) {
            if (this._objectHasProperties(a.getData().data)) {
                var e = a.getData(),
                    c = null,
                    d = this._isSharing ? this._sharingTemplate : this._normalTemplate,
                    g = a.getExperiment(),
                    m = a.getType();
                switch (g) {
                    case f.EXP_ORCHESTRA:
                        m == f.TYPE_ORCHESTRA_VIRTUAL_DATA ? (c = h.create(d.cloneNode(!0)), h.isValidData(e.data) || c.showErrorState()) : m == f.TYPE_REPORT_VIDEO && (c = l.create(d.cloneNode(!0)));
                        break;
                    case f.EXP_SAND_ROBOTS:
                        c = m == f.TYPE_REPORT_VIDEO ? k.create(d.cloneNode(!0)) : j.create(d.cloneNode(!0));
                        break;
                    case f.EXP_PERISCOPES:
                        c = q.create(d.cloneNode(!0));
                        break;
                    case f.EXP_DATA_VISUALISER:
                        c = n.create(d.cloneNode(!0))
                }
                c.setLabReportItem(a);
                c.addEventListener(b.REPORT_SIZE, this._itemWidthCallback);
                c.addEventListener(b.DELETE_CONTENT, this._deleteClickCallback);
                c.addEventListener(b.SHARE_PREVIEW, this._sharePreviewCallback);
                c.addEventListener(b.FLAG_INAPPROPRIATE, this._flagInappropriateCallback);
                this._holderElement.appendChild(c.getElement());
                this._items.push(c)
            } else console.error("Error adding labReportItem: " + a.getId() + " to carousel, has no data.")
        };
        a.finishAdding = function () {
            this._index = -1;
            for (var a = 0; a < this._items.length; a++) this._items[a].getElement().style.setProperty("left", a * p.ITEM_WIDTH + "px", ""), this._items[a].addEventListener(b.LOADED, this.itemLoadComplete.bind(this))
        };
        a.itemLoadComplete = function () {
            ++this._itemsLoaded == this._items.length && this._showItems()
        };
        a._showItems = function () {
            this.scrollToIndex(this._index);
            e.addClass(this._holderElement, "visible");
            e.addClass(this._navElement, "visible");
            this._hideSpinner()
        };
        a.scrollToIndex = function (a, b) {
            b || (b = 0);
            0 > a && (a = 0);
            a >= this._items.length && (a = this._items.length - 1);
            for (var c = 0; c < this._items.length; c++) {
                c != a && this._items[c].hide();
                var d = (c - (a - b)) * p.ITEM_WIDTH,
                    f = d + -1 * b * p.ITEM_WIDTH;
                (function (a, b) {
                    var e = b ? 1 : 0;
                    (new TWEEN.Tween({
                        envelope: d,
                        opacityEnvelope: b ? 0 : 1
                    })).to({
                        envelope: f,
                        opacityEnvelope: e
                    }, 150).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(function () {
                        a.getElement().style.setProperty("left", this.envelope + "px", "");
                        a.getElement().style.setProperty("opacity", this.opacityEnvelope, "")
                    }).start()
                })(this._items[c], c == a)
            }
            this._items[a].show();
            var g = this._items[a].getElement(),
                c = (p.ITEM_HEIGHT - g.clientHeight) / 2;
            0 > c && (c = 0);
            this._items[a].getElement().style.setProperty("top", c + "px", "");
            var h = g.querySelector(".group").clientHeight,
                j = this._items[a].getContentWidth();
            if ("labReport/takeAwayContentView" == g.getAttribute("name")) var l = c + h / 2;
            else if ("labReport/takeAwayShareView" == g.getAttribute("name")) l = g.querySelector(".social").clientHeight, l = c + h / 2 + l;
            j != parseInt(this._navElement.style.getPropertyValue("width")) && (this._navElement.style.setProperty("width", j + "px", ""), this._navElement.style.setProperty("top", l + "px", ""), this._spinnerLayer.style.setProperty("top", l + "px", ""));
            this._index = a;
            e.removeClass(this._backButton, "inactive");
            e.removeClass(this._forwardButton,
                "inactive");
            0 == this._index && e.addClass(this._backButton, "inactive");
            this._index == this._items.length - 1 && e.addClass(this._forwardButton, "inactive")
        };
        a._clickDelete = function () {
            this.dispatchCustomEvent(p.DELETE_CONTENT, null)
        };
        a._flagInappropriateClick = function () {
            this.dispatchCustomEvent(p.FLAG_CONTENT, null)
        };
        a._sharePreviewClick = function () {
            this.dispatchCustomEvent(p.SHARE_PREVIEW, null)
        };
        a._scrollContent = function (a) {
            this.scrollToIndex(this._index + a, a)
        };
        a._preventMaskScroll = function () {
            this._maskElement.scrollLeft = 0;
            this._maskElement.scrollTop = 0
        };
        a._showSpinner = function () {
            e.addClass(this._spinnerLayer, "visible");
            e.removeClass(this._spinnerLayer, "inactive")
        };
        a._hideSpinner = function () {
            e.removeClass(this._spinnerLayer, "visible");
            e.addClass(this._spinnerLayer, "inactive")
        };
        a._objectHasProperties = function (a) {
            var b = 0,
                e;
            for (e in a) b++;
            return 0 != b
        };
        a.hide = function () {};
        a.close = function () {
            for (var a = 0; a < this._items.length; a++) this._items[a].unload();
            e.removeClass(this._holderElement, "visible");
            this._index = -1;
            this._itemsLoaded = 0
        };
        a.destroy = function () {
            for (var a = 0; a < this._items.length; a++) this._items[a].destroy();
            m.removeSoundListener(this._forwardButton, "click", "common/slide/slide-right");
            m.removeSoundListener(this._backButton, "click", "common/slide/slide-left");
            this._maskElement.removeEventListener("scroll", this._preventMaskScroll.bind(this));
            o.destroyIfExists(this._forwardButton);
            o.destroyIfExists(this._backButton)
        };
        p.create = function () {
            return new p
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    WEBLAB.namespace("WEBLAB.utils.data");
    var f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    if (void 0 === a.TakeawayThumbnailButton) {
        var c = function () {
            this._init()
        };
        a.TakeawayThumbnailButton = c;
        a = a.TakeawayThumbnailButton.prototype = new f;
        a._init = function () {
            this._labReportItem = this._element = null;
            this._completeShowTimeoutId = this._completeHideTimeoutId = -1;
            this._bottomMask = this._topMask = null;
            this._clickCallback = b.createListenerFunction(this, this._click);
            return this
        };
        a.setElement = function (a) {
            this._element && this._element.removeEventListener("click", this._clickCallback);
            this._element = a;
            this._element.addEventListener("click", this._clickCallback);
            this._topMask = document.createElement("div");
            this._bottomMask = document.createElement("div");
            this._topMask.className = "mask top";
            this._bottomMask.className = "mask bottom";
            a = document.createElement("div");
            a.className = "placeholderBoxContent";
            this._topMask.appendChild(a.cloneNode(!0));
            this._bottomMask.appendChild(a);
            return this
        };
        a.setLabReportItem = function (a) {
            this._labReportItem = a
        };
        a.getLabReportItem = function () {
            return this._labReportItem
        };
        a.setThumbnail = function (a, b, c) {
            var d = document.createElement("div");
            d.className = "thumbnail staticImage " + (b ? "border" : "");
            d.appendChild(a);
            if (c) a = document.createElement("div"), a.className = "playButton", d.appendChild(a);
            this.setElement(d)
        };
        a.onThumbnailLoaded = function () {
            d.addClass(this._element,
                "loaded");
            this.dispatchCustomEvent("loaded", null)
        };
        a.setShowPrompt = function (a) {
            a ? (d.addClass(this._element, "prompt"), this._element.appendChild(this._topMask), this._element.appendChild(this._bottomMask)) : (this._topMask.parentNode && this._topMask.parentNode.removeChild(this._topMask), this._bottomMask.parentNode && this._topMask.parentNode.removeChild(this._bottomMask));
            this.dispatchCustomEvent("loaded", null)
        };
        a.setVideoProcessing = function () {
            d.addClass(this._element, "processing");
            this.dispatchCustomEvent("loaded",
            null)
        };
        a.getElement = function () {
            return this._element
        };
        a._click = function () {
            this.dispatchCustomEvent("click", this._labReportItem)
        };
        a.show = function () {
            clearTimeout(this._completeShowTimeoutId);
            clearTimeout(this._completeHideTimeoutId)
        };
        a.hide = function () {};
        a.destroy = function () {
            this._element = null
        };
        c.create = function () {
            return new c
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.items"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem,
        b = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").TakeawayThumbnailButton,
        d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        c = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        e = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        g = WEBLAB.namespace("WEBLAB.common.singletons"),
        h = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners,
        l = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.LabReportThumbCarousel) {
        var k = function () {
            this._init()
        };
        a.LabReportThumbCarousel = k;
        k.THUMBNAIL_CLICK = "thumbnailClick";
        k.EMPTY_THUMBNAIL_CLICK = "emptyThumbnailClick";
        k.ITEM_WIDTH = 156;
        var a = a.LabReportThumbCarousel.prototype = new c,
            j = c.prototype;
        a._init = function () {
            this._type = null;
            this._thumbnailButtons = [];
            this._loadingThumbnails = [];
            this._index = -2;
            this._isMyReport = !0;
            this._finishedAdding = !1;
            this._loadingCount = 0;
            this._spinnerLayer = null;
            this._thumbnailClickCallback = d.createListenerFunction(this,
            this._thumbnailClick);
            this._emptyThumbnailClickCallback = d.createListenerFunction(this, this._emptyThumbnailClick);
            this._forwardClickCallback = d.createListenerFunctionWithArguments(this, this._scrollThumbs, [1]);
            this._backClickCallback = d.createListenerFunctionWithArguments(this, this._scrollThumbs, [-1]);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._holderElement = this._element.querySelector(".thumbnails");
            this._emptyThumbnailTemplate = this._element.querySelector(".thumbnail");
            this._emptyThumbnailTemplate.parentElement.removeChild(this._emptyThumbnailTemplate);
            this._videoProcessingTemplate = g.siteManager.getTemplateManager().getTemplate("labReport/videoProcessingThumbnail");
            this._forwardButton = this._element.querySelector("button.forward");
            this._backButton = this._element.querySelector("button.back");
            this._spinnerLayer = this._element.querySelector(".spinnerLayer");
            e.addClass(this._spinnerLayer, "visible");
            this._forwardButton.addEventListener("click", this._forwardClickCallback);
            this._backButton.addEventListener("click", this._backClickCallback);
            h.addSoundListener(this._forwardButton,
                "click", "common/slide/slide-right", 1, "labReport");
            h.addSoundListener(this._backButton, "click", "common/slide/slide-left", 1, "labReport");
            e.addClass(this._backButton, "inactive");
            e.addClass(this._forwardButton, "inactive")
        };
        a.reset = function () {
            this._holderElement.innerHTML = "";
            for (var a = 0; a < this._thumbnailButtons; a++) h.removeRandomSoundListener(this._thumbnailButtons[a], "click", h.STANDARD_BIG_BUTTON_CLICK), this._thumbnailButtons[a].removeEventListener("click", this._thumbnailClickCallback), this._thumbnailButtons[a].removeEventListener("loaded",
            this._thumbnailLoaded.bind(this)), this._thumbnailButtons[a].destroy();
            this._showLoadingState();
            this._thumbnailButtons = [];
            this._finishedAdding = !1;
            this._loadingCount = 0
        };
        a.setIsMyReport = function (a) {
            this._isMyReport = a
        };
        a.addItem = function (a) {
            var e = new b.create;
            e.addEventListener("loaded", this._thumbnailLoaded.bind(this));
            e.setLabReportItem(a);
            var c = a.getData();
            switch (a.getType()) {
                case f.TYPE_VECTOR_DRAWING:
                    var d = new Image;
                    e.setThumbnail(d, !0);
                    d.onload = e.onThumbnailLoaded.bind(e);
                    d.src = c.vectorimagethumbnail;
                    d.className = "vectorDrawing";
                    break;
                case f.TYPE_ORCHESTRA_VIRTUAL_DATA:
                    d = new Image;
                    e.setThumbnail(d, !1);
                    d.onload = e.onThumbnailLoaded.bind(e);
                    d.src = c.image;
                    break;
                case f.TYPE_REPORT_VIDEO:
                    if ((c.thumbnail || c.imagethumbnail) && "processing" != c.video) d = new Image, e.setThumbnail(d, !0, !0), d.onload = e.onThumbnailLoaded.bind(e), d.src = c.thumbnail || c.imagethumbnail;
                    else if (this._isMyReport) a = a.getExperiment() == f.EXP_ORCHESTRA ? "videoProcessingThumbnailOrchestra" : "videoProcessingThumbnailSketchbots", a = g.siteManager.getTemplateManager().getTemplate("labReport/" + a), e.setThumbnail(a.cloneNode(!0), !0, !1), e.onThumbnailLoaded(), e.setVideoProcessing();
                    else return;
                    break;
                default:
                    d = new Image, e.setThumbnail(d, !0), d.onload = e.onThumbnailLoaded.bind(e), d.src = c.thumbnail || c.imagethumbnail, d.className = a.getExperiment()
            }
            this._holderElement.appendChild(e.getElement());
            e.addEventListener("click", this._thumbnailClickCallback);
            h.addRandomSoundListener(e, "click", h.STANDARD_BIG_BUTTON_CLICK, "labReport");
            this._thumbnailButtons.push(e)
        };
        a.finishAdding = function () {
            var a = 2 - this._thumbnailButtons.length;
            0 > a && (a = 0);
            this._addEmptyThumbnails(a);
            for (a = 0; a < this._thumbnailButtons.length; a++) this._thumbnailButtons[a].getElement().style.setProperty("left", a * k.ITEM_WIDTH + "px", "");
            this._index = 0;
            this._setInitialState();
            (this._finishedAdding = !0) && this._loadingCount >= this._thumbnailButtons.length && this._hideLoadingState()
        };
        a._addEmptyThumbnails = function (a, c) {
            for (var d = 0; d < a; d++) {
                var f = new b.create;
                f.addEventListener("loaded", this._thumbnailLoaded.bind(this));
                f.setElement(this._emptyThumbnailTemplate.cloneNode(!0));
                f.setShowPrompt(!0);
                f.addEventListener("click", this._emptyThumbnailClickCallback);
                this._holderElement.appendChild(f.getElement());
                c ? (e.addClass(f.getElement(), "loading"), this._loadingThumbnails.push(f)) : this._thumbnailButtons.push(f)
            }
        };
        a._thumbnailLoaded = function () {
            this._loadingCount++;
            this._finishedAdding && this._loadingCount >= this._thumbnailButtons.length && this._hideLoadingState()
        };
        a._thumbnailClick = function (a) {
            this.dispatchCustomEvent(k.THUMBNAIL_CLICK, a.detail)
        };
        a._emptyThumbnailClick = function () {
            this.dispatchCustomEvent(k.EMPTY_THUMBNAIL_CLICK,
            null)
        };
        a._setInitialState = function () {
            e.removeClass(this._backButton, "inactive");
            e.removeClass(this._forwardButton, "inactive");
            0 == this._index && e.addClass(this._backButton, "inactive");
            this._index == this._thumbnailButtons.length - 2 && e.addClass(this._forwardButton, "inactive")
        };
        a._showLoadingState = function () {
            e.addClass(this._spinnerLayer, "visible")
        };
        a._hideLoadingState = function () {
            e.removeClass(this._spinnerLayer, "visible");
            for (var a = 0; a < this._thumbnailButtons.length; a++) e.addClass(this._thumbnailButtons[a].getElement(),
                "visible")
        };
        a._scrollThumbs = function (a) {
            this._index + 2 * a <= this._thumbnailButtons.length - 2 && (a *= 2);
            var b = this._index + a;
            if (b != this._index) {
                b >= this._thumbnailButtons.length && (b -= a);
                0 > b && (b = 0);
                for (var c = 0; c < this._thumbnailButtons.length; c++) {
                    c != b && this._thumbnailButtons[c].hide();
                    var d = this._thumbnailButtons[c],
                        f = (c - (b - a)) * k.ITEM_WIDTH,
                        g = f + -1 * a * k.ITEM_WIDTH,
                        h = parseInt(d.getElement().style.getPropertyValue("opacity") || 0),
                        j = c == b || c == b + 1 ? 1 : 0;
                    (function (a) {
                        (new TWEEN.Tween({
                            envelope: f
                        })).to({
                            envelope: g
                        }, 300).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(function () {
                            a.getElement().style.setProperty("left",
                            this.envelope + "px", "")
                        }).start();
                        (new TWEEN.Tween({
                            envelope: h
                        })).to({
                            envelope: j
                        }, 100).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(function () {
                            a.getElement().style.setProperty("opacity", this.envelope, "")
                        }).start()
                    })(d)
                }
                this._index = b;
                e.removeClass(this._backButton, "inactive");
                e.removeClass(this._forwardButton, "inactive");
                0 == this._index && e.addClass(this._backButton, "inactive");
                this._index == this._thumbnailButtons.length - 2 && e.addClass(this._forwardButton, "inactive")
            }
        };
        a.destroy = function () {
            h.removeSoundListener(this._forwardButton,
                "click", "common/slide/slide-right");
            h.removeSoundListener(this._backButton, "click", "common/slide/slide-left");
            l.destroyIfExists(this._forwardButton);
            l.destroyIfExists(this._backButton);
            j.destroy.call(this)
        };
        k.create = function (a) {
            var b = new k;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage;
    WEBLAB.namespace("WEBLAB.common.ui.labReport");
    WEBLAB.namespace("WEBLAB.utils.events");
    if (void 0 === a.TakeAwayContentPage) {
        var b = function () {
            this._init()
        };
        a.TakeAwayContentPage = b;
        var a = a.TakeAwayContentPage.prototype = new f,
            d = f.prototype;
        a._init = function () {
            this._takeAwayContent = null;
            d._init.call(this);
            return this
        };
        a.setTakeAwayContent = function (a) {
            this._takeAwayContent = a
        };
        a.getTakeAwayContent = function () {
            return this._takeAwayContent
        };
        a.getTakeAwayThumbnail = function () {
            return this._takeAwayContent.getThumbnail()
        };
        a.displayTakeAwayContent = function (a) {
            this._takeAwayContent.displayTakeAwayContent(a)
        };
        a.show = function () {
            d.show.call(this);
            this.displayTakeAwayContent(this._contentElement)
        };
        b.create = function (a) {
            var e = new b;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.pages"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage,
        b = WEBLAB.namespace("WEBLAB.common.singletons"),
        d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        c = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        e = WEBLAB.namespace("WEBLAB.common.ui").UserSignInPrompt,
        g = WEBLAB.namespace("WEBLAB.common").LoginManager;
    WEBLAB.namespace("WEBLAB.utils.url");
    var h = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners;
    if (void 0 === a.ConfirmSaveTakeAwayPage) {
        var l = function () {
            this._init()
        };
        a.ConfirmSaveTakeAwayPage = l;
        l.SAVE_WAS_APPROVED = "saveWasApproved";
        l.SAVE_WAS_NOT_APPROVED = "saveWasNotApproved";
        var a = a.ConfirmSaveTakeAwayPage.prototype = new f,
            k = f.prototype;
        a._init = function () {
            k._init.call(this);
            this._doSaveButton = this._doNotSaveButton = this._thumbnailContent = this._thumbnailContainer = this._code = this._item = this._signInPrompt = null;
            this._doSaveButtonCallback = d.createListenerFunction(this, this._doSaveButtonClicked);
            this._doNotSaveButtonCallback = d.createListenerFunction(this, this._doNotSaveButtonClicked);
            this._oAuthCallback = d.createListenerFunction(this, this._oAuthReturned);
            this._oAuthErrorCallback = d.createListenerFunction(this, this._oAuthError);
            this._isPendingLogin = !1;
            this._pendingOAuthTimeoutId = null;
            this._requiresOAuth = this._isPendingOAuth = !1;
            this._loginPopup = null;
            this._loginStatusCallback = d.createListenerFunction(this, this._loginStatusChanged);
            return this
        };
        a.getCode = function () {
            return this._code
        };
        a.setElement = function (a) {
            k.setElement.call(this,
            a);
            a = this._element.querySelector("*[data-weblab-type='userLoginPrompt']");
            this._signInPrompt = e.create(a);
            this._thumbnailContainer = this._element.querySelector(".thumbnailHolder");
            this._subtitleHolder = this._element.querySelector(".saveSubtitle");
            this._doSaveButton = this._element.querySelector("#yesDoSave");
            this._doNotSaveButton = this._element.querySelector("#doNotSave");
            this._spinner = this._element.querySelector(".spinner");
            this._spinnerCopy = this._element.querySelector(".spinnerCopy");
            this._doSaveButton.addEventListener("click",
            this._doSaveButtonCallback);
            this._doNotSaveButton.addEventListener("click", this._doNotSaveButtonCallback);
            h.addStandardSmallButtonListeners(this._doSaveButton, "labReport");
            h.addStandardSmallButtonListeners(this._doNotSaveButton, "labReport");
            return this
        };
        a.setupSave = function (a, e, c, d, f) {
            this.cancelHide();
            this._subtitleHolder.innerHTML = a;
            b.siteManager.getLoginManager();
            0 < d ? this._thumbnailContainer.style.setProperty("width", d + "px", "") : this._thumbnailContainer.style.setProperty("width", "305px", "");
            0 < f ? this._thumbnailContainer.style.setProperty("height", f + "px", "") : this._thumbnailContainer.style.setProperty("min-height", "100px", "");
            null != this._thumbnailContent && this._thumbnailContainer.removeChild(this._thumbnailContent);
            this._thumbnailContent = e;
            this._thumbnailContainer.appendChild(this._thumbnailContent);
            if (this._requiresOAuth = c || !1) a = b.siteManager.getCopyManager(), e = document.createElement("div"), e.innerHTML = "<p class='small'>" + a.getCopy("labReport/youTubePrompt/promptSignedIn") + "</p>", c = document.createElement("div"),
            c.innerHTML = "<p class='small'>" + a.getCopy("labReport/youTubePrompt/promptNotSignedIn") + "</p>", d = document.createElement("div"), d.innerHTML = "<p class='small black'>" + a.getCopy("labReport/youTubePrompt/promptDisallowed") + "</p>", this._signInPrompt.setYouTubePrompt(e, c, d), this._signInPrompt.showYouTubePrompt(!1)
        };
        a._doSaveButtonClicked = function () {
            this.hideForSave(!0);
            var a = b.siteManager.getLoginManager(),
                e = a.getIsLoggedIn();
            if (a.getHasOAuthToken() || "" != a.getOAuthCode()) this._requiresOAuth = !1;
            a.addEventListener(g.STATUS_CHANGED,
            this._loginStatusCallback);
            console.log("_doSaveButtonClicked :: this._requiresOAuth = " + this._requiresOAuth + ", isLoggedIn = " + e);
            console.log("_doSaveButtonClicked :: __requiresOAuth is currently " + window.__requiresOAuth);
            if (this._requiresOAuth) a.enableOAuthCallback(this._oAuthReturned.bind(this), this._oAuthError.bind(this)), this._pendingOAuthTimeoutId = setTimeout(this._oAuthError, 108E6);
            if (e) console.log("_doSaveButtonClicked :: is Logged in"), this._requiresUserInput = this._isPendingLogin = !1, this._requiresOAuth ? (this._isPendingOAuth = !0, console.log("_doSaveButtonClicked :: opening callbackurl: ", g.CALL_BACK_URL), this._loginPopup = window.open(g.CALL_BACK_URL), setTimeout(this.checkLoginWindowClosed.bind(this), 500)) : (a.disableOAuthCallback(), console.log("_doSaveButtonClicked :: calling SAVE_WAS_APPROVED"), this.dispatchCustomEvent(l.SAVE_WAS_APPROVED, null));
            else {
                console.log("_doSaveButtonClicked :: is NOT Logged in");
                if (this._requiresOAuth) this._isPendingOAuth = !0;
                this._isPendingLogin = !0;
                console.log("_doSaveButtonClicked :: logging in");
                a.login();
                this._loginPopup = a.getLoginWindow();
                setTimeout(this.checkLoginWindowClosed.bind(this), 500)
            }
        };
        a.checkLoginWindowClosed = function () {
            console.log("checkLoginWindowClosed :: calling...");
            this._loginPopup && (this._loginPopup.closed ? (this._isPendingOAuth && (console.log("checkLoginWindowClosed :: login window was closed whilst pendingAuth is true"), this._oAuthError("Auth window was closed")), console.log("checkLoginWindowClosed :: login window was closed, but pendingAuth is false so that's okay.")) : setTimeout(this.checkLoginWindowClosed.bind(this), 500))
        };
        a._doNotSaveButtonClicked = function () {
            console.log("_doNotSaveButtonClicked");
            this.hideForSave(!1);
            this._requiresUserInput = !1;
            this.dispatchCustomEvent(l.SAVE_WAS_NOT_APPROVED, null);
            this.dispatchCustomEvent(f.CLOSE_LAB_REPORT, null)
        };
        a._oAuthReturned = function (a) {
            console.log("_oAuthReturned :: code : " + a);
            console.log("_oAuthReturned :: _isPendingLogin = ", this._isPendingLogin);
            this._checkUserChannel(a)
        };
        a._checkUserChannel = function (a) {
            console.log("_checkUserChannel called with code: " + a);
            var e = new XMLHttpRequest;
            e.onreadystatechange = function () {
                switch (e.readyState) {
                    case 4:
                        this._onCheckUserChannel(e.responseText)
                }
            }.bind(this);
            e.open("GET", "/general/checkLinkedAccount?code=" + encodeURIComponent(a) + "&redirect_uri=" + b.siteManager.getLabReportManager().getOAuthRedirectURI());
            e.send(null)
        };
        a._onCheckUserChannel = function (a) {
            this._requiresOAuth = this._isPendingOAuth = !1;
            clearTimeout(this._pendingOAuthTimeoutId);
            console.log("_onCheckUserChannel : result = " + a);
            a = JSON.parse(a);
            "OK" == a.status.message && !this._isPendingLogin ? (this.dispatchCustomEvent(l.SAVE_WAS_APPROVED, null), this._isPendingOAuth = !1) : "NOACCOUNT" == a.status.message && (b.siteManager.getLabReportManager().addEventListener(LabReportManager.CREATE_CHANNEL_RESULT, this._onCreateChannelResult.bind(this)), b.siteManager.getLabReportManager().showCreateChannelPage())
        };
        a._onCreateChannelResult = function (a) {
            this._isPendingOAuth = !1;
            b.siteManager.getLabReportManager().removeEventListener(LabReportManager.CREATE_CHANNEL_RESULT, this._onCreateChannelResult.bind(this));
            a.detail && !this._isPendingLogin ? this.dispatchCustomEvent(l.SAVE_WAS_APPROVED, null) : this.dispatchCustomEvent(l.SAVE_WAS_NOT_APPROVED, null)
        };
        a._oAuthError = function (a) {
            console.log("ConfirmSaveTakeAwayPage :: OAuth request error:", a);
            clearTimeout(this._pendingOAuthTimeoutId);
            this._isPendingOAuth = !1;
            b.siteManager.getLoginManager().disableOAuthCallback();
            b.siteManager.getLoginManager().removeEventListener(g.STATUS_CHANGED, this._loginStatusCallback);
            this._signInPrompt.showYouTubePrompt(!0);
            this.unhideFromSave()
        };
        a._loginStatusChanged = function () {
            var a = b.siteManager.getLoginManager();
            console.log("_loginStatusChanged :: status = " + a.getIsLoggedIn());
            this._isPendingLogin && a.getIsLoggedIn() ? (a.removeEventListener(g.STATUS_CHANGED, this._loginStatusCallback), this._isPendingLogin = !1, this._isPendingOAuth || this._doSaveButtonClicked()) : this._isPendingLogin && this.unhideFromSave()
        };
        a.hideForSave = function (a) {
            c.addClass(this._doSaveButton, "hidden");
            c.addClass(this._doNotSaveButton, "hidden");
            c.addClass(this._signInPrompt.getElement(),
                "hidden");
            c.addClass(this._subtitleHolder, "hidden");
            c.removeClass(this._spinner, "hidden");
            a && c.removeClass(this._spinnerCopy, "hidden");
            this._thumbnailContent && this._thumbnailContent.style.setProperty("opacity", 0.25, "")
        };
        a.unhideFromSave = function () {
            c.removeClass(this._doSaveButton, "hidden");
            c.removeClass(this._doNotSaveButton, "hidden");
            c.removeClass(this._signInPrompt.getElement(), "hidden");
            c.removeClass(this._subtitleHolder, "hidden");
            c.addClass(this._spinner, "hidden");
            c.addClass(this._spinnerCopy,
                "hidden");
            this._thumbnailContent && this._thumbnailContent.style.setProperty("opacity", 1, "")
        };
        a.saveError = function () {
            console.log("saveError :: called");
            b.siteManager.getSoundManager().playSound("common/error", !1, 1, "labReport");
            this._subtitleHolder.innerHTML = "<p>" + b.siteManager.getCopyManager().getCopy("labReport/confirmSavePage/subtitleTryAgain") + "</p>";
            this.unhideFromSave()
        };
        a.show = function () {
            this._contentElement.parentNode.style.setProperty("display", "none", "");
            this.unhideFromSave();
            this._requiresUserInput = !0;
            k.show.call(this)
        };
        a.hide = function () {
            this._contentElement.parentNode.style.setProperty("display", "block", "");
            b.siteManager.getLoginManager().disableOAuthCallback();
            b.siteManager.getLoginManager().removeEventListener(g.STATUS_CHANGED, this._loginStatusCallback);
            this._requiresUserInput && this.dispatchCustomEvent(l.SAVE_WAS_NOT_APPROVED, null);
            b.siteManager.getLoginManager().removeEventListener(g.STATUS_CHANGED, this._loginStatusCallback);
            k.hide.call(this)
        };
        a.destroy = function () {
            null != this._thumbnailContent && this._thumbnailContainer.removeChild(this._thumbnailContent);
            this._thumbnailContent = null;
            h.removeStandardSmallButtonListeners(this._doSaveButton, "labReport");
            h.removeStandardSmallButtonListeners(this._doNotSaveButton, "labReport");
            k.destroy.call(this)
        };
        l.create = function (a) {
            var b = new l;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.pages"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage,
        b = WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.utils.events");
    var d = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.common");
    WEBLAB.namespace("WEBLAB.utils.url");
    WEBLAB.namespace("WEBLAB.utils.events");
    if (void 0 === a.CreateYouTubeChannelPage) {
        var c = function () {
            this._init()
        };
        c.STATUS_OK =
            "usernameOK";
        c.STATUS_CHECKING = "usernameCHECKING";
        c.STATUS_NOPE = "usernameNOPE";
        a.CreateYouTubeChannelPage = c;
        c.CHANNEL_WAS_CREATED = "channelWasCreated";
        c.CHANNEL_WAS_NOT_CREATED = "channelWasNotCreated";
        var a = a.CreateYouTubeChannelPage.prototype = new f,
            e = f.prototype;
        a._init = function () {
            e._init.call(this);
            this._suggestionsBox = this._currentInputValue = this._inputField = this._statusBox = null;
            this._suggestionsList = [];
            this._lastSuggestionHint = this._suggestionsListElement = null;
            this._isCurrentlyRequestingSuggestions = !1;
            this._spinner = this._cancelButton = this._confirmButton = this._lastSuggestionRequestTime = this._pendingSuggestionHint = null;
            this._showingSuggestionBox = !1;
            return this
        };
        a.setElement = function (a) {
            e.setElement.call(this, a);
            this._inputField = this._element.querySelector("#usernameInputField");
            this._inputField.addEventListener("input", this._onInputFieldChange.bind(this));
            this._statusBox = this._element.querySelector("#usernameStatusBox");
            this._suggestionsBox = this._element.querySelector("#suggestionsBox");
            this._suggestionsListElement = this._element.querySelector("ul.suggestionsList");
            this._confirmButton = this._element.querySelector("#yesDoSave");
            this._cancelButton = this._element.querySelector("#cancel");
            this._spinner = this._element.querySelector(".spinnerSmall");
            this._confirmButton.addEventListener("click", this._onCreateButtonClicked.bind(this));
            this._cancelButton.addEventListener("click", this._onCancelButtonClicked.bind(this));
            return this
        };
        a._onInputFieldChange = function () {
            this._currentInputValue = this._inputField.value;
            "" !== this._currentInputValue ? this._showSuggestionBox() : this._hideSuggestionBox();
            this._currentInputValue = this._currentInputValue.replace(" ", "");
            this._currentInputValue = this._currentInputValue.replace(/[^a-zA-Z0-9 :]/g, "");
            this._inputField.value = this._currentInputValue;
            this._suggestionsList.sort(this._sortSuggestions.bind(this));
            this._updateSuggestionList();
            if (this._currentInputValue !== this._lastSuggestionHint && 1 < this._currentInputValue.length) this._isCurrentlyRequestingSuggestions ? this._pendingSuggestionHint = this._currentInputValue : (this._getSuggestionList(this._currentInputValue), this._setStatusIcon(c.STATUS_CHECKING))
        };
        a._updateSuggestionList = function () {
            this._suggestionsListElement.innerHTML = "";
            for (var a = !1, b = 5 < this._suggestionsList.length ? 5 : this._suggestionsList.length, e = 0; e < b; e++) {
                var d = this._suggestionsList[e],
                    f = document.createElement("li");
                f.setAttribute("index", e);
                var n = document.createElement("p");
                n.innerHTML = d;
                f.appendChild(n);
                f.addEventListener("click", this._suggestionListItemClicked.bind(this));
                this._suggestionsListElement.appendChild(f);
                this._suggestionsList[e] == this._inputField.value && (a = !0, this._setListItemSelected(e), this._setStatusIcon(c.STATUS_OK))
            }
            a || this._setStatusIcon(c.STATUS_NOPE)
        };
        a._suggestionListItemClicked = function (a) {
            a = parseInt(a.target.getAttribute("index"));
            this._setListItemSelected(a);
            this._inputField.value = this._suggestionsList[a];
            this._currentInputValue = this._inputField.value;
            this._setStatusIcon(c.STATUS_OK)
        };
        a._getSuggestionList = function (a) {
            this._lastSuggestionHint = a;
            this._isCurrentlyRequestingSuggestions = !0;
            var b = new XMLHttpRequest;
            b.onreadystatechange = function () {
                switch (b.readyState) {
                    case 4:
                        this._onSuggestionList(b.responseText)
                }
            }.bind(this);
            b.open("GET", "https://gdata.youtube.com/feeds/api/suggest/username?hint=" + encodeURIComponent(a) + "&v=2&fields=entry/title&alt=json&key=AI39si74Rxz18gOw7d46MSom-52ViwHmraPiOCVYszEF0qBXApZoLFJXiZpW6OcrZn-3KKBE3PthCS-qejT4eP_NNLavTfdKHQ");
            b.send(null)
        };
        a._onSuggestionList = function (a) {
            try {
                var b = JSON.parse(a);
                if (b) {
                    for (var a = [], e = 0; e < b.feed.entry.length; e++) a.push(b.feed.entry[e].title.$t);
                    this._suggestionsList = a;
                    this._updateSuggestionList();
                    this._isCurrentlyRequestingSuggestions = !1;
                    this._pendingSuggestionHint == this._lastSuggestionHint ? this._pendingSuggestionHint = null : null !== this._pendingSuggestionHint && this._getSuggestionList(this._pendingSuggestionHint)
                }
            } catch (d) {
                this._setStatusIcon(c.STATUS_NOPE)
            }
        };
        a._setListItemSelected = function (a) {
            for (var b = this._suggestionsListElement.querySelectorAll("li"), e = 0; e < b.length; e++) d.removeClass(b[e], "selected");
            a < b.length && 0 <= a ? d.addClass(b[a], "selected") : this._setStatusIcon(c.STATUS_NOPE)
        };
        a._onCreateButtonClicked = function () {
            this._hideForSave();
            var a = new XMLHttpRequest;
            a.onreadystatechange = function () {
                switch (a.readyState) {
                    case 4:
                        this._onChannelCreateResponse(a.responseText)
                }
            }.bind(this);
            a.open("GET", "/general/createYouTubeAccount?username=" + encodeURIComponent(this._currentInputValue) + "&redirect_uri=" + b.siteManager.getLabReportManager().getOAuthRedirectURI());
            a.send(null)
        };
        a._onChannelCreateResponse = function (a) {
            try {
                "OK" == JSON.parse(a).status.message ? this.dispatchCustomEvent(c.CHANNEL_WAS_CREATED) : this._onError()
            } catch (b) {
                this._onError()
            }
        };
        a._onCancelButtonClicked = function () {
            this.dispatchCustomEvent(c.CHANNEL_WAS_NOT_CREATED);
            this.dispatchCustomEvent(f.CLOSE_LAB_REPORT, null)
        };
        a._onError = function () {
            this._unhideFromSave();
            this._onInputFieldChange(null)
        };
        a._hideForSave = function () {
            d.addClass(this._confirmButton, "hidden");
            d.addClass(this._cancelButton, "hidden");
            d.removeClass(this._spinner, "hidden");
            this._inputField.setAttribute("disabled", "disabled")
        };
        a._unhideFromSave = function () {
            d.removeClass(this._confirmButton, "hidden");
            d.removeClass(this._cancelButton, "hidden");
            d.addClass(this._spinner, "hidden");
            this._inputField.setAttribute("disabled", "")
        };
        a._sortSuggestions = function (a, b) {
            var e = this._calculateStringDistance(this._currentInputValue, a),
                c = this._calculateStringDistance(this._currentInputValue, b);
            return e == c ? 0 : e > c ? 1 : -1
        };
        a._setStatusIcon = function (a) {
            d.removeClass(this._statusBox, "ok");
            d.removeClass(this._statusBox, "checking");
            d.removeClass(this._statusBox,
                "nope");
            switch (a) {
                case c.STATUS_OK:
                    d.addClass(this._statusBox, "ok");
                    this._hideSuggestionBox();
                    this._setConfirmButtonState(!0);
                    break;
                case c.STATUS_CHECKING:
                    d.addClass(this._statusBox, "checking");
                    this._showSuggestionBox();
                    this._setConfirmButtonState(!1);
                    break;
                case c.STATUS_NOPE:
                    d.addClass(this._statusBox, "nope"), this._showSuggestionBox(), this._setConfirmButtonState(!1)
            }
        };
        a._setConfirmButtonState = function (a) {
            a ? d.removeClass(this._confirmButton, "inactive") : d.addClass(this._confirmButton, "inactive")
        };
        a._calculateStringDistance = function (a, b) {
            var e, c = a,
                d = c.length,
                f = b,
                q = f.length;
            if (d < q) {
                e = c;
                var c = f,
                    f = e,
                    m = d,
                    d = q,
                    q = m
            }
            m = [
                []
            ];
            for (e = 0; e < q + 1; e++) m[0][e] = e;
            for (var o = 1; o < d + 1; o++) {
                m[o] = [];
                m[o][0] = o;
                for (var p = 1; p < q + 1; p++) e = c.charAt(o - 1) == f.charAt(p - 1) ? 0 : 1, m[o][p] = this._getMinimum(m[o - 1][p] + 1, m[o][p - 1] + 1, m[o - 1][p - 1] + e)
            }
            return m[d][q]
        };
        a._getMinimum = function (a, b, e) {
            return a < b && a < e ? a : b < a && b < e ? b : e
        };
        a._showSuggestionBox = function () {
            if (!this._showingSuggestionBox) d.addClass(this._suggestionsBox, "visible"), d.addClass(this._statusBox,
                "visible"), this._showingSuggestionBox = !0
        };
        a._hideSuggestionBox = function () {
            if (this._showingSuggestionBox) d.removeClass(this._suggestionsBox, "visible"), this._showingSuggestionBox = !1
        };
        a.show = function () {
            this._contentElement.parentNode.style.setProperty("display", "none", "");
            this._inputField.value = b.siteManager.getLoginManager().name;
            this._onInputFieldChange(null);
            this._requiresUserInput = !0;
            e.show.call(this)
        };
        a.hide = function () {
            this._hideSuggestionBox();
            this._contentElement.parentNode.style.setProperty("display",
                "block", "");
            if (this._requiresUserInput) this._requiresUserInput = !1, this.dispatchCustomEvent(c.CHANNEL_WAS_NOT_CREATED, null);
            e.hide.call(this)
        };
        a._doNotSaveButtonClicked = function () {
            console.log("user cancelled channel create");
            this._requiresUserInput = !1;
            this.dispatchCustomEvent(c.CHANNEL_WAS_NOT_CREATED, null);
            this.dispatchCustomEvent(f.CLOSE_LAB_REPORT, null)
        };
        a.destroy = function () {
            e.destroy.call(this)
        };
        c.create = function (a) {
            var b = new c;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.pages"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage;
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    var b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    var d = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItemCarousel,
        c = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners,
        e = WEBLAB.namespace("WEBLAB.utils").Utils;
    if (void 0 === a.ShowTakeAwayContentPage) {
        var g = function () {
            this._init()
        };
        a.ShowTakeAwayContentPage = g;
        g.DELETE_CONTENT = "showTakeAwayDeleteContent";
        g.FLAG_CONTENT = "showTakeAwayFlagContent";
        g.SHARE_DONE = "sharingPageDone";
        var a = a.ShowTakeAwayContentPage.prototype = new f,
            h = f.prototype;
        a._init = function () {
            h._init.call(this);
            this._isSharingMode = this._isMyContent = !1;
            this._flagButton = this._deleteButton = this._itemCarousel = this._carouselHolder = null;
            this._deleteContentCallback = b.createListenerFunction(this, this._deleteContentClicked);
            this._flagContentCallback = b.createListenerFunction(this, this._flagContentClicked);
            this._doneButtonCallback = b.createListenerFunction(this, this._doneButtonClicked);
            this._itemCarousel = d.create();
            return this
        };
        a.setElement = function (a) {
            h.setElement.call(this, a);
            this._carouselHolder = this._element.querySelector(".itemCarousel");
            this._itemCarousel.setElement(this._carouselHolder);
            this._isSharingMode ? this._itemCarousel.setModeSharing() : this._itemCarousel.setModeNormal();
            this._itemCarousel.addEventListener(d.DELETE_CONTENT,
            this._deleteContentCallback);
            this._itemCarousel.addEventListener(d.FLAG_CONTENT, this._flagContentCallback);
            this._backToOverviewButton && c.removeStandardSmallButtonListeners(this._backToOverviewButton, "labReport");
            this._backToOverviewButton = this._element.querySelector("#backToOverview");
            c.addStandardSmallButtonListeners(this._backToOverviewButton, "labReport");
            this._doneButton = this._element.querySelector("#done");
            this._backToOverviewButton && this._backToOverviewButton.addEventListener("click", this._showFullLabReportCallback);
            this._doneButton && (this._doneButton.addEventListener("click", this._doneButtonCallback), c.addStandardSmallButtonListeners(this._doneButton));
            return this
        };
        a.getCurrentItem = function () {
            return this._itemCarousel.getCurrentItem()
        };
        a.confirmDeleteContent = function () {
            this._itemCarousel.removeCurrentItem() || this.dispatchCustomEvent(f.SHOW_LAB_REPORT, null)
        };
        a.confirmFlagContent = function () {
            this._itemCarousel.flagCurrentItem()
        };
        a.setIsMyLabTagId = function (a) {
            this._isMyContent = a;
            this._itemCarousel.setIsMyContent(this._isMyContent)
        };
        a.setModeNormal = function () {
            this._itemCarousel.setModeNormal();
            this._isSharingMode = !1;
            this.setElement(this._normalTemplate)
        };
        a.setModeSharing = function () {
            this._itemCarousel.setModeSharing();
            this._isSharingMode = !0;
            this.setElement(this._savedTemplate)
        };
        a.setLabReportItems = function (a) {
            this._itemCarousel.reset();
            this._itemCarousel.addItems(a);
            this._itemCarousel.finishAdding();
            this._itemCarousel.setIsMyContent(this._isMyContent)
        };
        a.showItemIndex = function (a) {
            this._itemCarousel.setPendingIndex(a)
        };
        a.setTemplates = function (a, b) {
            this._normalTemplate = a;
            this._savedTemplate = b
        };
        a._deleteContentClicked = function () {
            this.dispatchCustomEvent(g.DELETE_CONTENT, null)
        };
        a._flagContentClicked = function () {
            this.dispatchCustomEvent(g.FLAG_CONTENT, null)
        };
        a._doneButtonClicked = function () {
            this.dispatchCustomEvent(g.SHARE_DONE, null);
            this._closeLabReportCallback()
        };
        a.show = function () {
            h.show.call(this);
            this._itemCarousel.show()
        };
        a.hide = function () {
            this._itemCarousel.close();
            h.hide.call(this)
        };
        a.destroy = function () {
            this._backToOverviewButton && c.removeStandardSmallButtonListeners(this._backToOverviewButton);
            this._doneButton && c.removeStandardSmallButtonListeners(this._doneButton);
            e.destroyIfExists(this._normalTemplate);
            e.destroyIfExists(this._savedTemplate);
            e.destroyIfExists(this._itemCarousel);
            h.destroy.call(this)
        };
        g.create = function (a, b) {
            var e = new g;
            e.setElement(a);
            e.setTemplates(a, b);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.pages"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage;
    WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.common");
    if (void 0 === a.LabReportErrorPage) {
        var b = function () {
            this._init()
        };
        a.LabReportErrorPage = b;
        var a = a.LabReportErrorPage.prototype = new f,
            d = f.prototype;
        a._init = function () {
            d._init.call(this);
            this._isMyLabReport = !0;
            this._othersReportSubtitle = this._myReportSubtitle = null;
            return this
        };
        a.setElement = function (a) {
            d.setElement.call(this, a);
            this._myReportSubtitle = this._element.querySelector("*[data-weblab-type='labReportSubtitle'].mine");
            this._othersReportSubtitle = this._element.querySelector("*[data-weblab-type='labReportSubtitle'].others");
            return this
        };
        a.getSubtitle = function () {
            return this._isMyLabReport ? this._myReportSubtitle : this._othersReportSubtitle
        };
        a.setLabReportMine = function (a) {
            this._isMyLabReport = a
        };
        a.destroy = function () {
            d.destroy.call(this)
        };
        b.create = function (a) {
            var e = new b;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.pages"),
        f = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage;
    WEBLAB.namespace("WEBLAB.common.singletons");
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.common");
    if (void 0 === a.TakeAwayErrorPage) {
        var b = function () {
            this._init()
        };
        a.TakeAwayErrorPage = b;
        b.BACK_TO_LAB_REPORT = "takeawayErrorBackToLabReport";
        var a = a.TakeAwayErrorPage.prototype = new f,
            d = f.prototype;
        a._init = function () {
            d._init.call(this);
            this._backButton = null;
            return this
        };
        a.setElement = function (a) {
            d.setElement.call(this, a);
            this._backButton = this._element.querySelector("#backToOverview");
            this._backButton.addEventListener("click", this._onBackClick.bind(this));
            return this
        };
        a._onBackClick = function () {
            this.dispatchCustomEvent(b.BACK_TO_LAB_REPORT, null)
        };
        a.destroy = function () {
            d.destroy.call(this)
        };
        b.create = function (a) {
            var e = new b;
            e.setElement(a);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.labReport.pages"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportPage,
        d = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportThumbCarousel,
        c = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportItem;
    WEBLAB.namespace("WEBLAB.common.ui.labReport.items");
    var e = WEBLAB.namespace("WEBLAB.common.ui.labReport.items").LabReportSocialPanel,
        g = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        h = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    WEBLAB.namespace("WEBLAB.utils.events");
    WEBLAB.namespace("WEBLAB.utils");
    if (void 0 === a.ShowLabReportPage) {
        var l = function () {
            this._init()
        };
        a.ShowLabReportPage = l;
        l.THUMBNAIL_CLICK = "showLabReportPageThumbnailClick";
        l.LAUNCH_EXPERIMENT = "showLabReportPageLaunchExperiment";
        l.DELETE_ALL = "showLabReportPageDeleteAll";
        var a = a.ShowLabReportPage.prototype = new b,
            k = b.prototype;
        a._init = function () {
            k._init.call(this);
            this._currentLabTagId = -1;
            this._isMyLabTagId = !1;
            this._dataVisualiserCarouselHolder = this._sandRobotsCarouselHolder = this._periscopesCarouselHolder = this._orchestraCarouselHolder = this._socialPanel = this._experimentsContainer = this._deleteAllButton = this._footerBar = this._currentLabReport = null;
            this._launchOrchestraCallback = g.createListenerFunction(this, this._launchOrchestra);
            this._launchPeriscopesCallback = g.createListenerFunction(this, this._launchPeriscopes);
            this._launchSandRobotsCallback = g.createListenerFunction(this, this._launchSandRobots);
            this._launchDataVisualiserCallback = g.createListenerFunction(this, this._launchDataVisualiser);
            this._dataVisualiserThumbCarousel = this._sandRobotsThumbCarousel = this._periscopesThumbCarousel = this._orchestraThumbCarousel = null;
            this._thumbnailClickCallback = g.createListenerFunction(this, this._thumbnailClick);
            this._showExperimentsCallback = g.createListenerFunction(this, this._showExperiments);
            this._finishedShowingExperimentsCallback = g.createListenerFunction(this, this._finishedShowingExperiments);
            this._deleteAllCallback = g.createListenerFunction(this,
            this._deleteAllClicked);
            return this
        };
        a.setElement = function (a) {
            k.setElement.call(this, a);
            this._experimentsContainer = this._element.querySelector(".experimentTakeAways");
            this._orchestraCarouselHolder = this._element.querySelector("#orchestra.experiment");
            this._periscopesCarouselHolder = this._element.querySelector("#periscopes.experiment");
            this._sandRobotsCarouselHolder = this._element.querySelector("#sandRobots.experiment");
            this._dataVisualiserCarouselHolder = this._element.querySelector("#visualiser.experiment");
            this._orchestraThumbCarousel = new d.create(this._orchestraCarouselHolder);
            this._periscopesThumbCarousel = new d.create(this._periscopesCarouselHolder);
            this._sandRobotsThumbCarousel = new d.create(this._sandRobotsCarouselHolder);
            this._dataVisualiserThumbCarousel = new d.create(this._dataVisualiserCarouselHolder);
            this._orchestraThumbCarousel.addEventListener(d.THUMBNAIL_CLICK, this._thumbnailClickCallback);
            this._periscopesThumbCarousel.addEventListener(d.THUMBNAIL_CLICK, this._thumbnailClickCallback);
            this._sandRobotsThumbCarousel.addEventListener(d.THUMBNAIL_CLICK,
            this._thumbnailClickCallback);
            this._dataVisualiserThumbCarousel.addEventListener(d.THUMBNAIL_CLICK, this._thumbnailClickCallback);
            this._orchestraThumbCarousel.addEventListener(d.EMPTY_THUMBNAIL_CLICK, this._launchOrchestraCallback);
            this._periscopesThumbCarousel.addEventListener(d.EMPTY_THUMBNAIL_CLICK, this._launchPeriscopesCallback);
            this._sandRobotsThumbCarousel.addEventListener(d.EMPTY_THUMBNAIL_CLICK, this._launchSandRobotsCallback);
            this._dataVisualiserThumbCarousel.addEventListener(d.EMPTY_THUMBNAIL_CLICK,
            this._launchDataVisualiserCallback);
            this._footerBar = this._element.querySelector(".footer");
            this._deleteAllButton = this._element.querySelector("button.delete");
            this._deleteAllLink = this._element.querySelector("#deleteAllContent a");
            this._deleteAllButton.addEventListener("click", this._deleteAllCallback);
            this._deleteAllLink.addEventListener("click", this._deleteAllCallback);
            return this
        };
        a.setUserId = function (a) {
            this._currentLabTagId = a;
            a = f.siteManager.getDocumentOrigin() + "/" + f.siteManager.getLanguage() + "/sharing/" + this._currentLabTagId;
            if (!this._socialPanel) this._socialPanel = e.create(this._footerBar.querySelector(".social"), a, e.MODE_LAB_REPORT);
            this._socialPanel.setSharingUrl(a, e.MODE_LAB_REPORT)
        };
        a.setIsMyLabTagId = function (a) {
            (this._isMyLabTagId = a) ? h.addClass(this._element, "myReport") : h.removeClass(this._element, "myReport");
            this._orchestraThumbCarousel.setIsMyReport(a);
            this._periscopesThumbCarousel.setIsMyReport(a);
            this._sandRobotsThumbCarousel.setIsMyReport(a);
            this._dataVisualiserThumbCarousel.setIsMyReport(a)
        };
        a.setLabReportItems = function (a) {
            this._currentLabReport = a;
            this.loadCarousels();
            0 == a.numberOfItems ? h.removeClass(this._footerBar, "visible") : h.addClass(this._footerBar, "visible")
        };
        a.loadCarousels = function () {
            this._currentLabReport && (this._orchestraThumbCarousel.reset(), this._periscopesThumbCarousel.reset(), this._sandRobotsThumbCarousel.reset(), this._dataVisualiserThumbCarousel.reset(), this._addItemsToCarousel(this._currentLabReport[c.EXP_ORCHESTRA], this._orchestraThumbCarousel), this._addItemsToCarousel(this._currentLabReport[c.EXP_PERISCOPES],
            this._periscopesThumbCarousel), this._addItemsToCarousel(this._currentLabReport[c.EXP_SAND_ROBOTS], this._sandRobotsThumbCarousel), this._addItemsToCarousel(this._currentLabReport[c.EXP_DATA_VISUALISER], this._dataVisualiserThumbCarousel), this._orchestraThumbCarousel.finishAdding(), this._periscopesThumbCarousel.finishAdding(), this._sandRobotsThumbCarousel.finishAdding(), this._dataVisualiserThumbCarousel.finishAdding())
        };
        a._addItemsToCarousel = function (a, b) {
            for (var e = 0; e < a.length; e++) b.addItem(a[e])
        };
        a._thumbnailClick = function (a) {
            this.dispatchCustomEvent(l.THUMBNAIL_CLICK, a.detail)
        };
        a.show = function () {
            k.show.call(this);
            this.loadCarousels();
            this._socialPanel.show();
            setTimeout(this._showExperimentsCallback, 50)
        };
        a.hide = function () {
            h.removeClass(this._experimentsContainer, "visible");
            this.clearCarousels();
            k.hide.call(this)
        };
        a.clearCarousels = function () {
            this._orchestraThumbCarousel.reset();
            this._periscopesThumbCarousel.reset();
            this._sandRobotsThumbCarousel.reset();
            this._dataVisualiserThumbCarousel.reset();
            this._currentLabTagId = this._currentLabReport = null
        };
        a._showExperiments = function () {
            this._dataVisualiserCarouselHolder.addEventListener(this._whichTransition(), this._finishedShowingExperimentsCallback);
            h.addClass(this._experimentsContainer, "visible")
        };
        a._finishedShowingExperiments = function () {
            this._dataVisualiserCarouselHolder.removeEventListener(this._whichTransition(), this._finishedShowingExperimentsCallback);
            null == this._currentLabReport && this.dispatchCustomEvent(b.LOAD_LAB_REPORT)
        };
        a._whichTransition = function () {
            var a, b = document.createElement("fakeelement"),
                e = {
                    transition: "transitionEnd",
                    OTransition: "oTransitionEnd",
                    MSTransition: "msTransitionEnd",
                    MozTransition: "transitionend",
                    WebkitTransition: "webkitTransitionEnd"
                };
            for (a in e) if (void 0 !== b.style[a]) return e[a]
        };
        a._launchOrchestra = function () {
            var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav").MainNav.URL_NAVIGATE_ORCHESTRA,
                a = "/" + f.siteManager.getLanguage() + a;
            this.dispatchCustomEvent(l.LAUNCH_EXPERIMENT, a)
        };
        a._launchPeriscopes = function () {
            var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav").MainNav.URL_NAVIGATE_PERISCOPES,
                a = "/" + f.siteManager.getLanguage() + a;
            this.dispatchCustomEvent(l.LAUNCH_EXPERIMENT, a)
        };
        a._launchSandRobots = function () {
            var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav").MainNav.URL_NAVIGATE_SKETCHBOTS,
                a = "/" + f.siteManager.getLanguage() + a;
            this.dispatchCustomEvent(l.LAUNCH_EXPERIMENT, a)
        };
        a._launchDataVisualiser = function () {
            var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav").MainNav.URL_NAVIGATE_VISUALISER,
                a = "/" + f.siteManager.getLanguage() + a;
            this.dispatchCustomEvent(l.LAUNCH_EXPERIMENT, a)
        };
        a._deleteAllClicked = function (a) {
            a.preventDefault();
            this.dispatchCustomEvent(l.DELETE_ALL, null);
            return !1
        };
        a.destroy = function () {
            k.destroy.call(this)
        };
        l.create = function (a) {
            var b = new l;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav");
    WEBLAB.namespace("WEBLAB.utils.events");
    if (void 0 === a.MainNavButton) a.MainNavButton = function (a, b, d) {
        this.nav = a;
        this.element = b;
        this.index = d;
        this.over = !1;
        this.normalIcon = this.element.getElementsByClassName("up")[0];
        this.darkIcon = this.element.getElementsByClassName("dark")[0];
        this.overIcon = this.element.getElementsByClassName("over")[0];
        var c = this;
        this.setHighlight = function () {
            this.element.classList.add("highlight");
            setTimeout(function () {
                c.element.classList.remove("highlight")
            },
            700)
        };
        this.highlight = function (a) {
            setTimeout(function () {
                c.setHighlight()
            }, a)
        };
        this.element.addEventListener("click", function (b) {
            b.preventDefault();
            a.navItemSelected(c)
        });
        this.element.addEventListener("mouseover", function (b) {
            b.preventDefault();
            a.navItemHovered(c)
        });
        return this
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav"),
        f = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        d = WEBLAB.namespace("WEBLAB.utils.style").StyleUtil;
    WEBLAB.namespace("WEBLAB.common.ui.mainNav");
    var c = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        e = WEBLAB.namespace("WEBLAB.common"),
        g = WEBLAB.namespace("WEBLAB.utils.data").CookieFunctions;
    WEBLAB.namespace("WEBLAB.utils.animation");
    var h = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds;
    WEBLAB.namespace("WEBLAB.common.sound");
    var l = WEBLAB.namespace("WEBLAB.utils.events").SoundListeners,
        k = WEBLAB.namespace("WEBLAB.common.constants").ExperimentIds;
    if (void 0 === a.MainNav) a.MainNav = function (b, e) {
        var h = this;
        this.isHomeMode = b;
        this.autoCloseMenu = e;
        this.confirmNavigateCallbackList = [];
        this.pendingNavigationURL = null;
        this.element = document.getElementById("menu");
        this.front = document.getElementById("menuFront");
        this.opener = document.getElementById("menuOpener");
        this.footer = document.getElementById("mainNavFooter");
        this.styleUtil = d.create();
        this.currentLoadingElementIndex = 0;
        this.imgsUrl = "/files/images/home/";
        this.open = !this.autoCloseMenu;
        this.selectedLanguage = null;
        this.isLocked = !1;
        this.buttons = [];
        var k = document.getElementsByClassName("experimentButton"),
            o = document.getElementById("staticMenu").className,
            p;
        for (p = 0; p < k.length; p++) this.buttons[p] = new a.MainNavButton(this, k[p], p), l.addStandardSmallButtonListeners(this.buttons[p].element), -1 < this.buttons[p].element.getAttribute("data-url").indexOf(o) && f.addClass(this.buttons[p].element,
            "active");
        var r = document.getElementsByClassName("weblabLogo");
        for (p = 0; p < r.length; p++) k = r[p].getAttribute("data-url"), r[p].addEventListener("click", c.createListenerFunctionWithArguments(this, this._onInfoButtonClicked, [k]));
        r = document.getElementsByClassName("menuInfoButton");
        for (p = 0; p < r.length; p++) l.addStandardSmallButtonListeners(r[p], "mainNav"), k = r[p].getAttribute("data-url"), -1 < k.indexOf(o) && f.addClass(r[p], "active"), r[p].addEventListener("click", c.createListenerFunctionWithArguments(this, this._onInfoButtonClicked, [k]));
        this.infoArrowSVG = document.getElementById("arrowPoly");
        this.infoArrowSVG.setAttribute("transform", "rotate(0 5 3)");
        this._globalUI = document.querySelector(".globalUI");
        this._labReportClickCallback = c.createListenerFunction(this, this._clickLabReport);
        this._labReportButton = document.getElementById("labReportButton");
        l.addStandardSmallButtonListeners(this._labReportButton, "mainNav");
        this._labReportButton.addEventListener("click", this._labReportClickCallback);
        o = document.getElementsByClassName("soundButton");
        for (p = 0; p < o.length; p++) o[p].addEventListener("mouseover", c.createListenerFunction(this, this._onSoundButtonOver)), o[p].addEventListener("click", c.createListenerFunction(this, this._onSoundButtonClicked));
        this.isMuted = g.getCookie("mute") && "true" === g.getCookie("mute") ? !0 : !1;
        this._updateMutedState();
        document.getElementById("loginLinks").getElementsByTagName("h6")[0].addEventListener("click", this._labReportClickCallback);
        l.addStandardSmallButtonListeners(document.getElementById("loginLinks").getElementsByTagName("h6")[0],
            "mainNav");
        this.isHomeMode ? (f.addClass(this._globalUI, "mainMenu"), f.addClass(h.element, "splash")) : this.autoCloseMenu ? (this.front.addEventListener("mouseover", c.createListenerFunction(this, this._over)), this.opener.addEventListener("mouseover", c.createListenerFunction(this, this._over)), this.front.addEventListener("mouseout", c.createListenerFunction(this, this._out))) : this._open();
        this._loginElement = document.getElementById("loginLink");
        this._logoutElement = document.getElementById("logoutLink");
        this._loginSpinner = document.getElementById("loginSpinner");
        this._loginContainer = document.getElementById("loginContainer");
        this._loginLinks = document.getElementById("loginLinks");
        f.addClass(this._loginContainer, "hidden");
        this._confirmSignInChange = null;
        this._loginElement.addEventListener("click", function (a) {
            h._loginClicked(a)
        });
        this._logoutElement.addEventListener("click", function (a) {
            h._logoutClicked(a)
        });
        document.getElementById("infoToggleButton").addEventListener("mouseover", function () {
            h._more()
        });
        this._languageDrop = document.getElementById("languageDrop");
        this._languageDrop.addEventListener("change", function () {
          alert('此语言开发中，敬请期待。');
            // h._changeLanguage(this.options[this.selectedIndex].id)
        });
        return this
    }, b = a.MainNav.prototype = new b, a.MainNav.URL_NAVIGATE_ORCHESTRA = "/universal-orchestra", a.MainNav.URL_NAVIGATE_PERISCOPES = "/teleporter", a.MainNav.URL_NAVIGATE_SKETCHBOTS = "/sketchbots", a.MainNav.URL_NAVIGATE_VISUALISER = "/data-tracer", a.MainNav.URL_NAVIGATE_LAB_TAG_GALLERY = "/lab-tag-explorer", a.MainNav.CONFIRM_QUIT_SECTION = "confirmQuitSection",
    a.MainNav.CANCEL_QUIT_SECTION = "cancelQuitSection", b._over = function (a) {
        clearTimeout(this.timer);
        0 < a.clientX && 0 < a.clientY && !this.open && (this._less(), this._open())
    }, b._out = function () {
        if (this.open && !this.isLocked) {
            var a = this;
            this.timer = setTimeout(function () {
                a._close()
            }, 1E3)
        }
    }, b._open = function () {
        f.addClass(this._globalUI, "mainMenu");
        f.addClass(this.element, "open");
        this.open = !0
    }, b.highlightButtons = function (a) {
        var b;
        for (b = 0; b < this.buttons.length; b++) this.buttons[b].highlight(900 * b + 1E3);
        "undefined" != typeof a && (this._globalUI.querySelector("#menuBackgroundBlocker").addEventListener("click", this._cancelHighlightButtons.bind(this)), f.addClass(this._globalUI.querySelector("#menuBackgroundBlocker"), "enabled"), f.addClass(this._globalUI, "highlightingButtons", 100), f.removeClass(this._globalUI, "highlightingButtons", 5300), f.removeClass(this._globalUI.querySelector("#menuBackgroundBlocker"), "enabled", 7E3), this._showExperimentPrompt(a))
    }, b._cancelHighlightButtons = function () {
        this._showExperimentPrompt.active = !1;
        f.removeClass(this._globalUI,
            "highlightingButtons");
        f.removeClass(this._globalUI.querySelector("#menuBackgroundBlocker"), "enabled");
        f.addClass(this.element.querySelector(".tryAnotherExperimentPrompt"), "out");
        f.removeClass(this.element.querySelector(".tryAnotherExperimentPrompt"), "visible", 100);
        this._globalUI.querySelector("#menuBackgroundBlocker").removeEventListener("click", this._cancelHighlightButtons.bind(this));
        this.unlock()
    }, b._showExperimentPrompt = function (a) {
        this._showExperimentPrompt.active = !0;
        var b = this.element.querySelector(".tryAnotherExperimentPrompt");
        b.className = "tryAnotherExperimentPrompt";
        var e = "";
        switch (a) {
            case k.ORCHESTRA:
                e = "orchestra";
                break;
            case k.PERISCOPES:
                e = "teleporter";
                break;
            case k.SAND_ROBOTS:
                e = "sketchbots";
                break;
            case k.DATA_VISUALISER:
                e = "datatracer";
                break;
            case k.LABTAGS:
                e = "labtags"
        }
        f.addClass(b, e);
        f.removeClass(b, "out");
        setTimeout(function () {
            this._showExperimentPrompt.active && f.addClass(b, "visible")
        }.bind(this), 1500);
        f.removeClass(b, "visible", 4500);
        f.addClass(b, "out", 5500);
        f.removeClass(b, "out", 6E3)
    }, b._showExperimentPrompt.active = !1, b._close = function () {
        f.removeClass(this._globalUI, "mainMenu");
        f.removeClass(this.element, "open");
        this.open = !1
    }, b._loginClicked = function (a) {
        if (null === this._confirmSignInChange || this._confirmSignInChange(!0)) this.showLoginSpinner(!0), this.dispatchCustomEvent("loginClicked", !0);
        a.preventDefault()
    }, b._logoutClicked = function (a) {
        (null === this._confirmSignInChange || this._confirmSignInChange(!1)) && this.dispatchCustomEvent("loginClicked", !1);
        a.preventDefault()
    }, b.removeLabTagLoader = function () {
        this.footer.className =
            "noLabTagLoader"
    }, b.showLoginSpinner = function (a) {
        a ? (f.removeClass(this._loginSpinner, "hidden"), f.addClass(this._loginContainer, "hidden")) : (f.addClass(this._loginSpinner, "hidden"), f.removeClass(this._loginContainer, "hidden"))
    }, b.setAsLoggedIn = function (a) {
        this.showLoginSpinner(!1);
        a ? (f.addClass(this._loginElement, "hidden"), f.removeClass(this._logoutElement, "hidden")) : (f.removeClass(this._loginElement, "hidden"), f.addClass(this._logoutElement, "hidden"));
        this._loginLinks.style.top = 16 - 0.5 * this._loginLinks.clientHeight +
            "px"
    }, b.setEmail = function (a) {
        var b = a = a.split("@")[0];
        20 < a.length && (b = a.substring(0, 17), b += "...");
        document.getElementById("userEmail").innerHTML = b
    }, b._onSoundButtonOver = function (a) {
        this.open || a.stopPropagation()
    }, b._onSoundButtonClicked = function () {
        this.isMuted = !this.isMuted;
        this._updateMutedState()
    }, b._updateMutedState = function () {
        for (var a = this.isMuted ? f.addClass : f.removeClass, b = 0; b < document.getElementsByClassName("soundButton").length; b++) a(document.getElementsByClassName("soundButton")[b], "muted");
        this.dispatchCustomEvent("muted", this.isMuted)
    }, b._more = function () {
        var a = this.element,
            b = document.getElementById("menuFrontUpper");
        f.addClass(a, "offset");
        b.style.marginTop = "-140px"
    }, b._less = function () {
        f.removeClass(this.element, "offset");
        document.getElementById("menuFrontUpper").style.marginTop = "0px"
    }, b._clickLabReport = function () {
        this.dispatchCustomEvent("labReportButtonClicked")
    }, b._changeLanguage = function (a) {
        var b = /\/([a-z]{2})(-[A-Z]{2})?(\/|$)/gi,
            e = document.location.href,
            e = e.match(b) ? e.replace(b,
                "/" + a + "/") : document.location.protocol + "//" + document.location.host + "/" + a + document.location.pathname;
        this._navigate(e)
    }, b._languageChanged = function () {
        document.location.reload(!0)
    }, b.lock = function () {
        this.isLocked = !0
    }, b.unlock = function () {
        this.isLocked = !1;
        this.autoCloseMenu && this._out()
    }, b.setLabTag = function (a) {
        this._labReportButton.firstChild && this._labReportButton.removeChild(this._labReportButton.firstChild);
        this._labReportButton.appendChild(a)
    }, b.animateInLabTag = function () {
        this.currentLabTagTop = 60;
        this.currentLabTagLeft = -240;
        this._labReportButtonScale = 0.75;
        this._updateLabTagScale();
        this._scaleTween = (new TWEEN.Tween(this)).onComplete(this._onLabTagScaleComplete.bind(this)).onUpdate(this._updateLabTagScale.bind(this));
        this._scaleDataIndex = 0;
        this._scaleData = [{
            scale: 1.5,
            duration: 1E3,
            easing: TWEEN.Easing.Quartic.EaseIn
        }, {
            scale: 1,
            duration: 1E3,
            easing: TWEEN.Easing.Elastic.EaseOut
        }];
        this._scaleLabTag();
        (new TWEEN.Tween(this)).to({
            currentLabTagTop: -6
        }, 1E3).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this._updateLabTagPosition.bind(this)).start();
        (new TWEEN.Tween(this)).to({
            currentLabTagLeft: 7
        }, 1E3).easing(TWEEN.Easing.Quadratic.EaseOut).onComplete(this._onLabTagPositionComplete.bind(this)).start()
    }, b._updateLabTagPosition = function () {
        this._labReportButton.style.left = this.currentLabTagLeft + "px";
        this._labReportButton.style.top = this.currentLabTagTop + "px"
    }, b._onLabTagPositionComplete = function () {
        this._labReportButtonScale = 0.75;
        e.SiteManager.getSingleton().getSoundManager().playSound("home/lab-tag-creation/lab-tag-creation-c")
    }, b._scaleLabTag = function () {
        console.log("_scaleLabTag");
        var a = this._scaleData[this._scaleDataIndex].easing;
        this._scaleTween.to({
            _labReportButtonScale: this._scaleData[this._scaleDataIndex].scale
        }, this._scaleData[this._scaleDataIndex].duration).easing(a).start()
    }, b._updateLabTagScale = function () {
        var a = Math.round(100 * this._labReportButtonScale) / 100;
        this._labReportButton.style.setProperty("-khtml-transform", "scale(" + a + ", " + a + ")", "");
        this._labReportButton.style.setProperty("-moz-transform", "scale(" + a + ", " + a + ")", "");
        this._labReportButton.style.setProperty("-ms-transform",
            "scale(" + a + ", " + a + ")", "");
        this._labReportButton.style.setProperty("-webkit-transform", "scale(" + a + ", " + a + ")", "");
        this._labReportButton.style.setProperty("-o-transform", "scale(" + a + ", " + a + ")", "");
        this._labReportButton.style.setProperty("transform", "scale(" + a + ", " + a + ")", "")
    }, b._onLabTagScaleComplete = function () {
        console.log("_onLabTagScaleComplete");
        this._scaleDataIndex++;
        this._scaleDataIndex < this._scaleData.length && this._scaleLabTag()
    }, b._onInfoButtonClicked = function (a) {
        this._navigate(this.selectedLanguage ?
            "/" + this.selectedLanguage + a : a)
    }, b.navItemSelected = function (a) {
        this._navigate(this.selectedLanguage ? "/" + this.selectedLanguage + a.element.getAttribute("data-url") : a.element.getAttribute("data-url"))
    }, b.navigateToExperiment = function (a) {
        this._navigate(a)
    }, b._navigate = function (a) {
        e.SiteManager.getSingleton().getTracker().trackEvent(h.GENERAL, "MainNavigationLinkClicked", "Navigate to " + a);
        this.pendingNavigationURL = a;
        if (0 !== this.confirmNavigateCallbackList.length) for (var b = 0; b < this.confirmNavigateCallbackList.length; b++) {
            var c = {
                confirmed: !0
            };
            this.confirmNavigateCallbackList[b].call(this, c, a);
            if (!c.confirmed) return
        }
        document.location.href = this.pendingNavigationURL
    }, b.navigateFromFooter = function (a) {
        this._navigate(a)
    }, b.addConfirmNavigateCallback = function (a) {
        this.confirmNavigateCallbackList.push(a)
    }, b.addConfirmSigninChangeCallback = function (a) {
        this._confirmSignInChange = a
    }, b.navItemHovered = function (a) {
        this._less();
        this.dispatchEvent({
            type: "experimentHovered",
            id: a.element.id,
            index: a.index
        })
    }, b.deselectAllItems = function () {
        for (var a = 0; a < this.buttons.length; a++) f.removeClass(this.buttons[a].element, "active")
    }, b.selectSection = function (a) {
        f.addClass(this.buttons[a].element, "active")
    }, b.focusExperiment = function (a) {
        for (var b = this.element.querySelectorAll(".focused"), e = 0; e < b.length; e++) f.removeClass(b[e], "focused");
        f.addClass(this.buttons[a].element, "focused")
    }, b.focusExperiments = function (a) {
        for (var b = 0; b < this.buttons.length; b++) this.buttons[b].darkIcon.style.opacity = a[b]
    }, b.selectLanguage = function (a) {
        e.SiteManager.getSingleton().getTracker().trackEvent(h.GENERAL,
            "LanguageUsed", "Language used " + a);
        this.selectedLanguage = a;
        var b = this._languageDrop.options.namedItem(a);
        void 0 !== b ? b.selected = "selected" : console.error("Can't select language (" + a + ")")
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.weblab.common.ui.page"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = WEBLAB.namespace("WEBLAB.common.sound").SoundManager,
        d = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        c = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        e = WEBLAB.namespace("WEBLAB.utils.animation").DomElementPositionTween,
        g = WEBLAB.namespace("WEBLAB.utils.animation").DomElementOpacityTween,
        h = WEBLAB.namespace("WEBLAB.utils.animation").DomElementInDomTween;
    if (void 0 === a.TabbedContentPage) {
        var l = function () {
            this._init()
        };
        a.TabbedContentPage = l;
        var a = l.prototype = new d,
            k = d.prototype;
        a._init = function () {
            this._element = null;
            this._pages = {};
            this._currentSubtitle = this._currentPage = this._currentPageName = null;
            this._currentPlayers = [];
            this._subtitles = {};
            this._moveLength = -20
        };
        a.setElement = function (a, d) {
            console.log("WEBLAB.weblab.common.ui.page.TabbedContentPage::setElement");
            console.log(a, d);
            this._element = a;
            this._element.style.setProperty("height", "100%", "");
            this._currentPageName = d;
            this._element.style.setProperty("height", "100%", "");
            for (var l = this._element.querySelectorAll(".tabbedPage"), k = l.length, o = 0; o < k; o++) {
                var p = l[o],
                    r = p.getAttribute("name"),
                    t = this._element.querySelector(".tabButton[name='" + r + "']"),
                    x = c.createListenerFunctionWithArguments(this, this.changePage, [r]);
                t.addEventListener("click", x, !1);
                var v = g.create(p, 0),
                    w = e.create(p, this._moveLength, 0),
                    y = h.create(p, p.parentNode, !1),
                    p = {
                        element: p,
                        button: t,
                        buttonListenerFunction: x,
                        alphaAnimation: v,
                        positionAnimation: w,
                        inDomAnimation: y
                    };
                this._pages[r] = p;
                if (this._currentPageName === r) v.setStartOpacity(1), w.setStartPosition(0, 0), y.setStartInDom(!0), this._currentPage = p;
                v.update();
                w.update();
                y.update()
            }
            l = this._element.querySelectorAll(".header p.grey");
            for (k = 0; k < l.length; k++) o = l[k], this._subtitles[o.getAttribute("name")] = o;
            this._currentSubtitle = this._element.querySelector(".header p.grey.selected");
            f.siteManager.getSoundManager().addEventListener(b.STATE_CHANGED, this._muteChanged.bind(this), !1);
            return this
        };
        a.show = function () {
            this._element.style.removeProperty("height")
        };
        a.hide = function () {
            this.stopAllPlayers();
            this._element.style.setProperty("height", "100%", "")
        };
        a.changePage = function (a) {
            this._currentPageName !== a && this._performChangePage(a)
        };
        a.setupVideoForCurrentPage = function () {
            for (var a = 0; a < this._currentPlayers.length; a++) this._currentPlayers[a].stopVideo(), this._currentPlayers[a] = null;
            this._currentPlayers = [];
            for (var b = this._currentPage.element.querySelectorAll(".technologyVideo"), e = [], a = 0; a < b.length; a++) e.push(b[a].getAttribute("videoId"));
            for (a = 0; a < b.length; a++) {
                var c = b[a];
                null != c.getAttribute("videoId") || void 0 != c.getAttribute("videoId") ? e = c.getAttribute("videoId") : (e = c.attributes[2], e = e.value);
                c = c.getAttribute("id");
                new YT.Player(c, {
                    height: "306",
                    width: "544",
                    videoId: e,
                    playerVars: {
                        rel: 0,
                        autohide: 1,
                        showinfo: 0,
                        modestbranding: 1
                    },
                    events: {
                        onReady: this._onPlayerReady.bind(this)
                    }
                })
            }
        };
        a._onPlayerReady = function (a) {
            this._currentPlayers.push(a.target)
        };
        a.stopAllPlayers = function () {
            for (var a = 0; a < this._currentPlayers.length; a++) this._currentPlayers[a] && this._currentPlayers[a].stopVideo()
        };
        a.mute = function () {
            for (var a = 0; a < this._currentPlayers.length; a++) {
                var b = this._currentPlayers[a];
                try {
                    b && b.setVolume(0)
                } catch (e) {
                    console.error("Could not set volume of player")
                }
            }
        };
        a.unmute = function () {
            for (var a = 0; a < this._currentPlayers.length; a++) {
                var b = this._currentPlayers[a];
                try {
                    b && b.setVolume(100)
                } catch (e) {
                    console.error("Could not set volume of player")
                }
            }
        };
        a._performHidePage = function () {
            if (null !== this._currentPage) {
                var a = this._currentPage.element,
                    b = this._currentSubtitle;
                this._currentPage.button.classList.remove("selected");
                a.style.setProperty("position", "absolute", "");
                b.classList.remove("selected");
                this._currentPage.alphaAnimation.animateTo(0, 0.3, TWEEN.Easing.Quadratic.EaseOut, 0);
                this._currentPage.positionAnimation.animateTo(this._moveLength, 0, 0.3, TWEEN.Easing.Quadratic.EaseOut, 0);
                this._currentPage.inDomAnimation.animateTo(!1, 0.3)
            }
        };
        a._performChangePage = function (a) {
            this._performHidePage();
            this._currentPageName = a;
            this._currentPage = this._pages[this._currentPageName];
            this._currentSubtitle = this._subtitles[this._currentPageName];
            var a = this._currentPage.element,
                b = this._currentSubtitle;
            this._currentPage.button.classList.add("selected");
            a.style.removeProperty("position");
            b.classList.add("selected");
            this._currentPage.alphaAnimation.animateTo(1, 0.3, TWEEN.Easing.Quadratic.EaseOut, 0.3);
            this._currentPage.positionAnimation.animateTo(0, 0, 0.3, TWEEN.Easing.Quadratic.EaseOut, 0.3);
            this._currentPage.inDomAnimation.animateTo(!0, 0);
            this.setupVideoForCurrentPage()
        };
        a._muteChanged = function () {
            if (0 === f.siteManager.getSoundManager().getCurrentVolume("tech")) for (var a = 0; a < this._currentPlayers.length; a++) {
                var b = this._currentPlayers[a];
                try {
                    b && b.stopVideo()
                } catch (e) {
                    console.error("Could not stop video")
                }
            }
        };
        a.destroy = function () {
            f.siteManager.getSoundManager().removeEventListener(b.STATE_CHANGED, this._muteChanged.bind(this), !1);
            k.destroy.call(this)
        };
        l.create = function (a, b) {
            console.log("WEBLAB.weblab.common.ui.page.TabbedContentPage::create");
            var e = new l;
            e.setElement(a, b);
            return e
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.error");
    WEBLAB.namespace("WEBLAB.common.constants");
    var f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    if (void 0 === a.ExperimentErrorPage) {
        var b = function () {};
        a.ExperimentErrorPage = b;
        a = b.prototype = new f;
        a.show = function (a) {
            this.template = a;
            document.getElementById("sectionCenteredContent").appendChild(this.template)
        };
        a.hide = function () {
            document.getElementById("sectionCenteredContent").removeChild(this.template)
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.technology"),
        f = WEBLAB.namespace("WEBLAB.common.singletons"),
        b = WEBLAB.namespace("WEBLAB.common.sound").SoundManager,
        d = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        c = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils.style");
    var e = WEBLAB.namespace("WEBLAB.weblab.common.ui.page").TabbedContentPage,
        g = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds,
        h = WEBLAB.namespace("WEBLAB.common.constants").ExperimentIds;
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    if (void 0 === a.TransitionUtil) {
        var l = function () {
            this._init()
        };
        a.TransitionUtil = l;
        a = l.prototype = new d;
        a._init = function () {
            this._pressOpenButtonCallback = c.createListenerFunction(this, this._pressOpenButton);
            this._pressCloseButtonCallback = c.createListenerFunction(this, this._pressCloseButton);
            this._mouseMoveCallback = c.createListenerFunction(this, this._mouseMove);
            this._mouseReleaseCallback = c.createListenerFunction(this, this._mouseRelease);
            this._tweenUpdateCallback = c.createListenerFunction(this, this._tweenUpdate);
            this._tweenCompleteCallback = c.createListenerFunction(this, this._tweenComplete);
            this._isOpening = this.isOpen = !1;
            this._startDragTime = -1;
            this._sectionEnvelope = 1;
            this._clickTime = 0.5;
            this._minDragLength = 0.25;
            this._dragOffset = 0;
            this._browserTech = this._wasMuted = !1;
            this._players = [];
            this._tween = (new TWEEN.Tween(this)).onUpdate(this._tweenUpdateCallback).onComplete(this._tweenCompleteCallback);
            this._sectionElement = document.querySelector(".section");
            this._technologyElement = document.querySelector(".technologyHolder");
            this._technologyPage = e.create(this._technologyElement, "science");
            this._openTechnologyButton = document.getElementById("staticTechnologySlider");
            if (null !== this._openTechnologyButton) this._technologyBackButton = document.getElementById("technologyBackButton"), this._technologyBackButton.classList.add("hidden"), this._openTechnologyButton.addEventListener("mousedown", this._pressOpenButtonCallback, !1), this._technologyBackButton.addEventListener("mousedown", this._pressCloseButtonCallback, !1);
            this._setupVideo(); - 1 != window.location.hash.split("#").indexOf("browserTech") && this._technologyPage.changePage("browserTechnology")
        };
        a._setupVideo = function () {
            var a = this;
            window.onYouTubePlayerAPIReady = function () {
                a._technologyPage.setupVideoForCurrentPage()
            };
            var b = document.createElement("script");
            b.src = "http://www.youtube.com/player_api";
            var e = document.getElementsByTagName("script")[0];
            e.parentNode.insertBefore(b, e)
        };
        a.mute = function () {
            this._technologyPage.mute()
        };
        a.unmute = function () {
            this._technologyPage.unmute()
        };
        a.hide = function () {
            if (this.isOpen) this._isOpening = !1, this._tween.to({
                _sectionEnvelope: 1
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).start()
        };
        a.show = function () {
            if (!this.isOpen) this._technologyElement.style.setProperty("display", "block", ""), this._isOpening = !0, this._tween.to({
                _sectionEnvelope: 0
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).start()
        };
        a.showBrowserTech = function () {
            this._browserTech = !0;
            console.log("this._browserTech : ", this._browserTech)
        };
        a._startDrag = function (a) {
            this._dragOffset = Math.round(this._sectionEnvelope * document.body.scrollWidth) - a.pageX;
            this._tween.stop();
            this._startDragTime = 0.0010 * Date.now();
            window.addEventListener("mousemove", this._mouseMoveCallback, !1);
            window.addEventListener("mouseup", this._mouseReleaseCallback, !1)
        };
        a._pressOpenButton = function (a) {
            this._technologyElement.style.setProperty("display", "block", "");
            this._startDrag(a)
        };
        a._pressCloseButton = function (a) {
            this._startDrag(a)
        };
        a._mouseMove = function (a) {
            this._sectionEnvelope = Math.max(0, Math.min(1, (a.clientX + this._dragOffset) / document.body.scrollWidth));
            this._update()
        };
        a._mouseRelease = function (a) {
            0.0010 * Date.now() - this._startDragTime < this._clickTime ? this.isOpen ? (this._isOpening = !1, f.siteManager.getSoundManager().playSound("common/technology-slide/technology-slide-out"), this._tween.to({
                _sectionEnvelope: 1
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).start()) : (this._isOpening = !0, f.siteManager.getSoundManager().playSound("common/technology-slide/technology-slide-in"), this._tween.to({
                _sectionEnvelope: 0
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).start()) : (this._sectionEnvelope = Math.max(0, Math.min(1, (a.clientX + this._dragOffset) / document.body.scrollWidth)), this.isOpen ? this._sectionEnvelope > this._minDragLength ? (this._isOpening = !1, f.siteManager.getSoundManager().playSound("common/technology-slide/technology-slide-out"), this._tween.to({
                _sectionEnvelope: 1
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).start()) : (this._isOpening = !0, this._tween.to({
                _sectionEnvelope: 0
            }, 200).easing(TWEEN.Easing.Quadratic.EaseIn).start()) : this._sectionEnvelope < 1 - this._minDragLength ? (this._isOpening = !0, f.siteManager.getSoundManager().playSound("common/technology-slide/technology-slide-in"), this._tween.to({
                _sectionEnvelope: 0
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).start()) : (this._isOpening = !1, this._tween.to({
                _sectionEnvelope: 1
            }, 200).easing(TWEEN.Easing.Quadratic.EaseIn).start()));
            window.removeEventListener("mousemove", this._mouseMoveCallback, !1);
            window.removeEventListener("mouseup", this._mouseReleaseCallback, !1);
            this._startDragTime = -1
        };
        a._tweenUpdate = function () {
            this._update()
        };
        a._tweenComplete = function () {
            if (this._isOpening) {
                if (!this.isOpen) this.isOpen = !0, f.siteManager.getSoundManager().setTechOpen(!0), f.siteManager.getSoundManager().addEventListener(b.STATE_CHANGED, this._muteChanged.bind(this), !1), this._openTechnologyButton.classList.add("hidden"), this._technologyBackButton.classList.remove("hidden"), this._technologyPage.show(), document.location.href = "#tech", this._trackTechnologyShow()
            } else if (this.isOpen) this.isOpen = !1, f.siteManager.getSoundManager().removeEventListener(b.STATE_CHANGED,
            this._muteChanged.bind(this), !1), f.siteManager.getSoundManager().setTechOpen(!1), this._openTechnologyButton.classList.remove("hidden"), this._technologyBackButton.classList.add("hidden"), this._technologyElement.style.setProperty("display", "none", ""), this._technologyPage.hide(), window.scroll(0, 0), document.location.href = "#"
        };
        a._muteChanged = function () {
            0 === f.siteManager.getSoundManager().getCurrentVolume("tech") && this._technologyPage.stopAllPlayers()
        };
        a._trackTechnologyShow = function () {
            f.SiteManagerBasic.getTracker().trackEvent(this._getTrackingIdForExperiment(),
                "TechnologySectionShow", "User clicked on the 'how it works' tab")
        };
        a._getTrackingIdForExperiment = function () {
            switch (f.SiteManagerBasic.sectionId) {
                case h.ORCHESTRA:
                    return g.ORCHESTRA;
                case h.LABTAGS:
                    return g.LABTAGS;
                case h.SAND_ROBOTS:
                    return g.SAND_ROBOTS;
                case h.DATA_VISUALISER:
                    return g.DATA_VISUALISER;
                case h.PERISCOPES:
                    return g.PERISCOPES
            }
            return g.GENERAL
        };
        a._update = function () {
            var a = Math.round((1 - this._sectionEnvelope) * document.body.scrollWidth),
                b = document.body.scrollWidth - a;
            this._sectionElement.style.setProperty("left", -1 * a + "px", "");
            this._technologyBackButton.style.setProperty("left", b + "px", "");
            this._openTechnologyButton.style.setProperty("right", a + "px", "")
        };
        a.update = function () {
            this._update()
        };
        l.create = function () {
            return new l
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui.mainNav").MainNav,
        f = WEBLAB.namespace("WEBLAB.common"),
        b = WEBLAB.namespace("WEBLAB.common.singletons"),
        d = WEBLAB.namespace("WEBLAB.common.ui.dialog").DialogManager;
    WEBLAB.namespace("WEBLAB.common.sound");
    var c = WEBLAB.namespace("WEBLAB.common.sound").OrchestraSoundLoader,
        e = WEBLAB.namespace("WEBLAB.common.sound").VirtualPlayerJSLoader;
    WEBLAB.namespace("WEBLAB.common");
    var g = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportManager,
        h = WEBLAB.namespace("WEBLAB.common.ui.labReport").LabReportOAuthHelper;
    WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.common.server");
    var l = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        k = WEBLAB.namespace("WEBLAB.common").LoginManager,
        j = WEBLAB.namespace("WEBLAB.common").SiteManagerBasic,
        n = WEBLAB.namespace("WEBLAB.common.ui.dialog").Dialog,
        q = WEBLAB.namespace("WEBLAB.common.ui.dialog").SimpleDialog,
        m = WEBLAB.namespace("WEBLAB.common.ui.technology").TransitionUtil,
        o = WEBLAB.namespace("WEBLAB.utils.loading").JsonLoader,
        p = WEBLAB.namespace("WEBLAB.common.ui.error").ExperimentErrorPage;
    WEBLAB.namespace("WEBLAB.utils.browser");
    var r = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds;
    if (void 0 === f.SiteManager) {
        var t = function () {
            this._init()
        };
        f.SiteManager = t;
        f = t.prototype = new j;
        f._init = function () {
            this._technologyTransitionUtil = this._technologyTemplateId = this._scrollHolder = this._sectionElement = this._globalUiElement = this._labReportHolderElement = this._dialogHolderElement = this._overlayHolderElement = this._labReportOAuthHelper = this._virtualPlayerJSLoader = this._orchestraSoundLoader = this._loginManager = this._serverCalls = this._labReportManager = this._dialogManager = null;
            this._startFunctions = [];
            this._onLoaderHiddenCallback = l.createListenerFunction(this, this._onLoaderHidden);
            this._windowResizeCallback = l.createListenerFunction(this, this._windowResize);
            this._windowScrollCallback = l.createListenerFunction(this, this._windowScroll);
            this.mainNav = null;
            this.autoCloseMenu = !0;
            this._hasStarted = !1;
            return this
        };
        f.setup = function (a, b, e, c) {
            console.log("SiteManager.setup");
            this._overlayHolderElement = b;
            this._dialogHolderElement = e;
            this._labReportHolderElement = c;
            this._holderElement = a;
            this._globalUiElement = b;
            this._sectionElement = a.querySelector(".section");
            a = b.querySelector("#globalDialogLayer");
            b = b.querySelector("#labReportDialogLayer");
            this._dialogManager = d.create(e, a, b);
            this._labReportManager = g.create();
            this._labReportOAuthHelper = h.createSingleton();
            return this
        };
        f.setupFromBasic = function (a) {
            this._soundManager = a.getSoundManager();
            this._templateManager = a.getTemplateManager();
            this.setLanguage(a.getLanguage());
            this._labTagGeneratorManager = a.getLabTagGeneratorManager();
            this._copyManager = a.getCopyManager();
            this._imageManager = a.getImageManager();
            this._jsonManager = a.getJsonManager();
            this._loginManager = a.getLoginManager();
            this._gaTracker = a.getTracker();
            this.sectionId = a.sectionId;
            a.addLoaderHiddenFunction(this._onLoaderHiddenCallback);
            this.webGLDetection = a.webGLDetection
        };
        f.setTechnologyTemplateId = function (a) {
            this._technologyTemplateId = a
        };
        f.getDialogManager = function () {
            return this._dialogManager
        };
        f.getLabReportManager = function () {
            return this._labReportManager
        };
        f.getLabReportOAuthHelper = function () {
            return this._labReportOAuthHelper
        };
        f.getOrchestraSoundLoader = function () {
            if (!this._orchestraSoundLoader) this._orchestraSoundLoader = c.createSingleton();
            return c.getSingleton()
        };
        f.getVirtualPlayerJSLoader = function () {
            if (!this._virtualPlayerJSLoader) this._virtualPlayerJSLoader = e.createSingleton();
            return this._virtualPlayerJSLoader
        };
        f.lookupCountryCode = function (a) {
            var b = "";
            a || (a = "ZZ");
            a && (b = this.getCopyManager().getCopy("countryCodes/" + a));
            return b
        };
        f.start = function () {
            this._labReportManager.setup(this._labReportHolderElement);
            this._labReportManager.addEventListener(g.LAB_REPORT_OPEN, this._onLabReportOpened.bind(this));
            this._setupMenu();
            this._setupTechnology();
            this._startWindowListeners();
            this._checkViewportDimensionsEven();
            this.getLoginManager().addEventListener(k.STATUS_CHANGED, this._onLoginStatusChecked.bind(this), !1);
            this.getLoginManager().addEventListener(k.NEEDS_LAB_TAG_IMAGE, this._uploadLabTagImage.bind(this), !1);
            this.getLoginManager().triggerEvents()
        };
        f.importantDialogShowing = function () {
            this._technologyTransitionUtil && this._technologyTransitionUtil.hide();
            this._labReportManager.hide()
        };
        f.showTech = function () {
            this._technologyTransitionUtil && this._technologyTransitionUtil.show()
        };
        f._uploadLabTagImage = function () {
            console.log("Generating 课件台访客 Image");
            var a = this.getLabTag(84, this.getLabTagId()).toDataURL("image/png"),
                a = a.replace(/^data:image\/(png|jpg);base64,/, ""),
                b = new o.create("/general/setLabTagImage"),
                e = new FormData;
            e.append("labTagId", this.getLabTagId());
            e.append("image", a);
            e.append("base64", 1);
            b.addEventListener(o.LOADED,
            this._onLabTagImageSent.bind(this), !1);
            b.load("POST", e)
        };
        f._onLabTagImageSent = function (a) {
            console.log(a.detail)
        };
        f.getLabTagId = function () {
            return this.getLoginManager().labTagId
        };
        f.getEmail = function () {
            return this.getLoginManager().email
        };
        f.getCountry = function () {
            var a = this.getLoginManager().country;
            return a ? a : "ZZ"
        };
        f.getName = function () {
            return this.getLoginManager().name
        };
        f.getDocumentOrigin = function () {
            return document.location.origin || document.location.protocol + "//" + document.location.host
        };
        f.navigateToExperimentURL = function (a) {
            this.mainNav.navigateToExperiment(a)
        };
        f.addConfirmNavigateCallback = function (a) {
            this.mainNav.addConfirmNavigateCallback(a)
        };
        f.addConfirmSigninChangeCallback = function (a) {
            this.mainNav.addConfirmSigninChangeCallback(a)
        };
        f._createConfirmLogOutDialog = function () {
            var a = this.getTemplateManager().getTemplate("common/signOutDialog"),
                a = q.create(a);
            a.setDialogLevel(n.DIALOG_LEVEL_GLOBAL);
            return a
        };
        f._onLoginStatusChecked = function () {
            console.log("SiteManager LOGIN STATUS CHECKED! Logged in: " + this.getLoginManager().isLoggedIn +
                " LabTagId: " + this.getLabTagId());
            this.mainNav.setLabTag(this.getLabTag(45, this.getLabTagId()));
            this.getName() && this.mainNav.setEmail(this.getName());
            this.mainNav.setAsLoggedIn(this.getLoginManager().isLoggedIn);
            this.getLoginManager().isLoggedIn ? this.getTracker().trackEvent(r.GENERAL, "Login Completed", "User login process completed") : this.getTracker().trackEvent(r.GENERAL, "Logout Completed", "User logout process completed");
            console.log("this._hasStarted", this._hasStarted);
            if (!this._hasStarted) if (this._confirmLogOutDialog = this._createConfirmLogOutDialog(), this._confirmLogOutDialog.addEventListener(q.CONFIRM, this._onConfirmLogOut.bind(this), !1), console.log("this.sectionId: ", this.sectionId), void 0 !== this.sectionId && 5 > this.sectionId) {
                this._touchLabTag();
                console.log("Checking Experiment status..");
                this.t0 = (new Date).getTime();
                var a = new o.create("/general/getExperimentStatus?ExperimentId=" + this.sectionId);
                a.addEventListener(o.LOADED, this._onCheckExperimentStatus.bind(this), !1);
                a.addEventListener(o.ERROR, this._onCheckExperimentStatusError.bind(this), !1);
                a.load()
            } else this._performStart()
        };
        f._onCheckExperimentStatus = function (a) {
            var b = a.detail.status;
            console.log("ExperimentStatus.response", a.detail, (new Date).getTime() - this.t0);
            a = -1 == window.location.hash.split("#").indexOf("error") ? !1 : !0;
            1 === b.ok && !a ? (console.log("ExperimentStatus: OK"), this._performStart()) : (console.log("ExperimentStatus: " + b.message), this.getTracker().trackEvent(r.GENERAL, "ExperimentStatusFail", "Experiment closed", this.sectionId), this.showErrorPage())
        };
        f.showErrorPage = function () {
            if (5 > this.sectionId) {
                this._errorPage = new p;
                var a = this.getTemplateManager().getTemplate("common/error"),
                    b = this;
                j.getSingleton().addLoaderHiddenFunction(function () {
                    b._errorPage.show(a)
                });
                j.getSingleton().hideLoader()
            }
        };
        f._touchLabTag = function () {
            console.log("_touchLabTag");
            var a = -60 * (new Date).getTimezoneOffset(),
                a = new o.create("/general/touchLabTag?ExperimentId=" + this.sectionId + "&labTagId=" + this.getLabTagId() + "&utc_offset_sec=" + a);
            a.addEventListener(o.LOADED, function (a) {
                console.log("课件台访客 Touched", a.detail)
            }, !1);
            a.addEventListener(o.ERROR, function (a) {
                console.log("Error on 课件台访客 Touched", a)
            }, !1);
            a.load()
        };
        f._onCheckExperimentStatusError = function () {
            console.log("ERROR on check experiment status.. ");
            this._performStart()
        };
        f._performStart = function () {
            this._hasStarted = !0;
            for (var a = this._startFunctions, b = a.length, e = 0; e < b; e++)(0, a[e])()
        };
        f._setupTechnology = function () {
            if (null !== this._technologyTemplateId) document.getElementById("technologyContentHolder").appendChild(this.getTemplateManager().getTemplate(this._technologyTemplateId)),
            this._technologyTransitionUtil = m.create()
        };
        f._setupMenu = function () {
            document.getElementById("staticMenu").appendChild(this.getTemplateManager().getTemplate("mainNav"));
            this.mainNav = new a(this.homeMode, this.autoCloseMenu);
            this.mainNav.selectLanguage(this.getLanguage());
            this.mainNav.addEventListener("labReportButtonClicked", l.createListenerFunction(this, this._onLabReportClicked));
            this.mainNav.addEventListener("loginClicked", l.createListenerFunction(this, this._onLoginClicked));
            this.mainNav.addEventListener("muted",
            l.createListenerFunction(this.getSoundManager(), this.getSoundManager().mute))
        };
        f._onConfirmLogOut = function () {
            this.mainNav.showLoginSpinner(!0);
            this.getLoginManager().logout()
        };
        f.externalLogin = function () {
            this.mainNav.showLoginSpinner(!0);
            this.getLoginManager().login()
        };
        f.externalLogout = function () {
            this._onConfirmLogOut()
        };
        f._onLoginClicked = function (a) {
            a.preventDefault();
            a.detail ? this.getLoginManager().login() : this.getDialogManager().showDialog(this._confirmLogOutDialog)
        };
        f._onLabReportClicked = function () {
            this.getTracker().trackEvent(r.GENERAL,
                "LabReportClicked", "User clicks 课件台 Report in Navigation");
            this._labReportManager.toggle(this.getLabTagId());
            this.mainNav.lock()
        };
        f._onLabReportOpened = function () {
            this._labReportClosedListener = l.createListenerFunction(this, this._onLabReportClosed);
            this._labReportManager.addEventListener(g.LAB_REPORT_CLOSE, this._labReportClosedListener)
        };
        f._onLabReportClosed = function () {
            this._labReportManager.removeEventListener(g.LAB_REPORT_CLOSE, this._labReportClosedListener);
            console.log("this._labReportManager CLOSED ",
            this._labReportManager.labReportDidSave);
            this._labReportManager.labReportDidSave ? (this.mainNav._open(), this.mainNav.lock(), this.mainNav.highlightButtons(this._labReportManager.getNextExperiment()), setTimeout(this.mainNav.unlock.bind(this.mainNav), 4200)) : this.mainNav.unlock()
        };
        f._onLoaderHidden = function () {
            this._overlayHolderElement.classList.remove("unloaded")
        };
        f._startWindowListeners = function () {
            window.addEventListener("scroll", this._windowScrollCallback, !1);
            window.addEventListener("resize", this._windowResizeCallback, !1)
        };
        f.setScrollHolder = function (a) {
            this._scrollHolder = a;
            this._scrollHolder.addEventListener("scroll", this._windowScrollCallback, !1)
        };
        f._windowResize = function () {
            this._checkViewportDimensionsEven();
            this._updateScroll();
            this._technologyTransitionUtil && this._technologyTransitionUtil.update()
        };
        f._windowScroll = function () {
            this._updateScroll()
        };
        f._updateScroll = function () {
            var a = this._globalUiElement,
                b = a.clientHeight,
                e = a.clientWidth,
                c = this._sectionElement,
                d = c.clientHeight,
                f = window.innerHeight,
                g = document.body.clientWidth,
                h = document.body.clientHeight,
                l = window.pageXOffset,
                k = window.pageYOffset;
            if (null !== this._scrollHolder) h = this._scrollHolder.scrollHeight, k = this._scrollHolder.scrollTop;
            var m = e - g,
                j = b - h;
            f < b ? (b = Math.round(Math.min(k, j)), a.style.setProperty("top", -1 * b + "px", "")) : a.style.removeProperty("top");
            g < e ? (b = Math.round(Math.min(l, m)), a.style.setProperty("left", -1 * b + "px", "")) : a.style.removeProperty("left");
            null === this._scrollHolder && (h > d ? (b = Math.round(Math.max(0, k - j)), c.style.setProperty("top", b + "px", "")) : c.style.removeProperty("top"))
        };
        f.destroy = function () {
            this._virtualPlayerJSLoader.destroy();
            this._orchestraSoundLoader.destroy()
        };
        t.createSingleton = function (a, e, c, d, f) {
            if (void 0 === b.siteManager) b.siteManager = new t, b.siteManager.setup(e, c, d, f), b.siteManager.setupFromBasic(a);
            return b.siteManager
        };
        t.getSingleton = function () {
            return b.siteManager
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.utils.data");
    var f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    if (void 0 === a.SectionTitle) {
        var d = function () {
            this._init()
        };
        a.SectionTitle = d;
        a = d.prototype = new b;
        a._init = function () {
            this._nameTitleAnimationElement = this._numberTitleAnimationElement = this._iconElement = this._element = null;
            this._animationValues = {
                iconEnvelope: 0,
                numberTitleEnvelope: 0,
                nameTitleEnvelope: 0
            };
            this._updateTimeCallback = f.createListenerFunction(this, this._updateTime);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._iconElement = this._element.querySelector(".experimentIcon");
            this._numberTitleAnimationElement = this._element.querySelector(".experimentNumberTitle .animationLayer");
            this._nameTitleAnimationElement = this._element.querySelector(".experimentNameTitle .animationLayer");
            this._updateTime();
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.show = function () {
            (new TWEEN.Tween(this._animationValues)).to({
                iconEnvelope: 1
            },
            650).easing(TWEEN.Easing.Quadratic.EaseIn).onUpdate(this._updateTimeCallback).start();
            (new TWEEN.Tween(this._animationValues)).to({
                numberTitleEnvelope: 1
            }, 300).delay(200).easing(TWEEN.Easing.Quadratic.EaseInOut).onUpdate(this._updateTimeCallback).start();
            (new TWEEN.Tween(this._animationValues)).to({
                nameTitleEnvelope: 1
            }, 300).delay(300).easing(TWEEN.Easing.Quadratic.EaseInOut).onUpdate(this._updateTimeCallback).start()
        };
        a.hide = function () {};
        a._updateTime = function () {
            this._iconElement.style.setProperty("opacity",
            this._animationValues.iconEnvelope, "");
            var a = "translateX(" + Math.floor(-1.25 * this._numberTitleAnimationElement.clientWidth * (1 - this._animationValues.numberTitleEnvelope)) + "px)";
            this._numberTitleAnimationElement.style.setProperty("-webkit-transform", a, "");
            this._numberTitleAnimationElement.style.setProperty("-moz-transform", a, "");
            this._numberTitleAnimationElement.style.setProperty("transform", a, "");
            this._numberTitleAnimationElement.style.setProperty("opacity", this._animationValues.numberTitleEnvelope,
                "");
            a = "translateY(" + Math.floor(-1.25 * this._nameTitleAnimationElement.clientHeight * (1 - this._animationValues.nameTitleEnvelope)) + "px)";
            this._nameTitleAnimationElement.style.setProperty("-webkit-transform", a, "");
            this._nameTitleAnimationElement.style.setProperty("-moz-transform", a, "");
            this._nameTitleAnimationElement.style.setProperty("transform", a, "")
        };
        a.destroy = function () {};
        d.create = function (a) {
            var b = new d;
            b.setElement(a);
            return b
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.common.ui");
    WEBLAB.namespace("WEBLAB.utils.data");
    var f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher;
    if (void 0 === a.SectionTitleLineContent) {
        var d = function () {
            this._init()
        };
        a.SectionTitleLineContent = d;
        a = d.prototype = new b;
        a._init = function () {
            this._contentElement = this._lineElement = this._element = null;
            this._animationValues = {
                lineEnvelope: 0,
                contentEnvelope: 0
            };
            this._updateTimeCallback = f.createListenerFunction(this,
            this._updateTime);
            return this
        };
        a.setElement = function (a) {
            this._element = a;
            this._lineElement = this._element.querySelector(".line");
            this._contentElement = this._element.querySelector(".content .animationLayer");
            this._updateTime();
            return this
        };
        a.getElement = function () {
            return this._element
        };
        a.show = function (a) {
            (new TWEEN.Tween(this._animationValues)).to({
                lineEnvelope: 1
            }, 400).delay(1E3 * a).easing(TWEEN.Easing.Quadratic.EaseIn).onUpdate(this._updateTimeCallback).start();
            (new TWEEN.Tween(this._animationValues)).to({
                contentEnvelope: 1
            },
            300).delay(50 + 1E3 * a).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this._updateTimeCallback).start()
        };
        a.hide = function () {
            (new TWEEN.Tween(this._animationValues)).to({
                lineEnvelope: 0
            }, 400).delay(1E3 * aDelay).easing(TWEEN.Easing.Quadratic.EaseIn).onUpdate(this._updateTimeCallback).start();
            (new TWEEN.Tween(this._animationValues)).to({
                contentEnvelope: -1
            }, 300).delay(50 + 1E3 * aDelay).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this._updateTimeCallback).start()
        };
        a.changeContent = function () {};
        a._updateTime = function () {
            this._lineElement.style.setProperty("opacity", this._animationValues.lineEnvelope, "");
            var a = "translate(0px, " + -1.25 * this._contentElement.clientHeight * (1 - this._animationValues.contentEnvelope) + "px)";
            this._contentElement.style.setProperty("-webkit-transform", a, "");
            this._contentElement.style.setProperty("-moz-transform", a, "");
            this._contentElement.style.setProperty("transform", a, "");
            this._contentElement.style.setProperty("opacity", this._animationValues.contentEnvelope, "")
        };
        a.destroy = function () {};
        d.create = function (a) {
            var b = new d;
            b.setElement(a);
            return b
        }
    }
})();
THREE.Ray = function (a, f) {
    function b(a, b, e) {
        m.sub(e, a);
        r = m.dot(b);
        t = o.add(a, p.copy(b).multiplyScalar(r));
        return x = e.distanceTo(t)
    }
    function d(a, b, e, c) {
        m.sub(c, b);
        o.sub(e, b);
        p.sub(a, b);
        v = m.dot(m);
        w = m.dot(o);
        y = m.dot(p);
        z = o.dot(o);
        u = o.dot(p);
        A = 1 / (v * z - w * w);
        B = (z * y - w * u) * A;
        C = (v * u - w * y) * A;
        return 0 <= B && 0 <= C && 1 > B + C
    }
    this.origin = a || new THREE.Vector3;
    this.direction = f || new THREE.Vector3;
    this.intersectScene = function (a) {
        return this.intersectObjects(a.children)
    };
    this.intersectObjects = function (a, b) {
        var e, c, d = [];
        for (e = 0, c = a.length; e < c; e++) Array.prototype.push.apply(d, this.intersectObject(a[e], b));
        d.sort(function (a, b) {
            return a.distance - b.distance
        });
        return d
    };
    var c = new THREE.Vector3,
        e = new THREE.Vector3,
        g = new THREE.Vector3,
        h = new THREE.Vector3,
        l = new THREE.Vector3,
        k = new THREE.Vector3,
        j = new THREE.Vector3,
        n = new THREE.Vector3,
        q = new THREE.Vector3;
    this.intersectObject = function (a, f) {
        for (var m, p = [], o = 0, r = a.children.length; o < r; o++) Array.prototype.push.apply(p, this.intersectObject(a.children[o]));
        if (a instanceof THREE.Sprite) {
            o = b(this.origin, this.direction, a.matrixWorld.getPosition());
            if (o > (f || 10)) return [];
            m = {
                distance: o,
                point: a.position,
                face: null,
                object: a
            };
            p.push(m)
        } else if (a instanceof THREE.Particle) {
            o = b(this.origin, this.direction, a.matrixWorld.getPosition());
            if (o > a.scale.x) return [];
            m = {
                distance: o,
                point: a.position,
                face: null,
                object: a
            };
            p.push(m)
        } else if (a instanceof THREE.Mesh) {
            o = b(this.origin, this.direction, a.matrixWorld.getPosition());
            r = THREE.Frustum.__v1.set(a.matrixWorld.getColumnX().length(), a.matrixWorld.getColumnY().length(),
            a.matrixWorld.getColumnZ().length());
            if (o > a.geometry.boundingSphere.radius * Math.max(r.x, Math.max(r.y, r.z))) return p;
            var t, x, v = a.geometry,
                w = v.vertices,
                u;
            a.matrixRotationWorld.extractRotation(a.matrixWorld);
            for (o = 0, r = v.faces.length; o < r; o++) if (m = v.faces[o], l.copy(this.origin), k.copy(this.direction), u = a.matrixWorld, j = u.multiplyVector3(j.copy(m.centroid)).subSelf(l), n = a.matrixRotationWorld.multiplyVector3(n.copy(m.normal)), t = k.dot(n), !(1.0E-4 > Math.abs(t)) && (x = n.dot(j) / t, !(0 > x) && (a.doubleSided || (a.flipSided ? 0 < t : 0 > t)))) if (q.add(l, k.multiplyScalar(x)), m instanceof THREE.Face3) c = u.multiplyVector3(c.copy(w[m.a].position)), e = u.multiplyVector3(e.copy(w[m.b].position)), g = u.multiplyVector3(g.copy(w[m.c].position)), d(q, c, e, g) && (m = {
                distance: l.distanceTo(q),
                point: q.clone(),
                face: m,
                object: a
            }, p.push(m));
            else if (m instanceof THREE.Face4 && (c = u.multiplyVector3(c.copy(w[m.a].position)), e = u.multiplyVector3(e.copy(w[m.b].position)), g = u.multiplyVector3(g.copy(w[m.c].position)), h = u.multiplyVector3(h.copy(w[m.d].position)),
            d(q, c, e, h) || d(q, e, g, h))) m = {
                distance: l.distanceTo(q),
                point: q.clone(),
                face: m,
                object: a
            }, p.push(m)
        }
        return p
    };
    var m = new THREE.Vector3,
        o = new THREE.Vector3,
        p = new THREE.Vector3,
        r, t, x, v, w, y, z, u, A, B, C
};
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.threejs");
    if (void 0 === a.ProjectorUtils) {
        var f = function () {};
        f.projector = new THREE.Projector;
        f.v0 = new THREE.Vector3;
        f.v1 = new THREE.Vector3;
        f.v2 = new THREE.Vector3;
        f.dot = null;
        f.intersect = null;
        f.distance = null;
        a.ProjectorUtils = f;
        f.translate2Dto3D = function (a, d, c, e, f, h) {
            a = new THREE.Vector3(2 * (a / c) - 1, 2 * -(d / e) + 1, 0.5);
            this.projector.unprojectVector(a, f);
            return (new THREE.Ray(f.position, a.subSelf(f.position).normalize())).intersectObject(h)
        };
        f.transformMouse = function (a,
        d) {
            var c = a.currentTarget,
                e = new THREE.Vector2;
            e.x = 2 * ((a.clientX - c.offsetLeft) / d.clientWidth) - 1;
            e.y = 2 * -((a.clientY - c.offsetTop) / d.clientHeight) + 1;
            return e
        };
        f.transformMouseOnRect = function (a, d) {
            var c = new THREE.Vector2;
            c.x = 2 * ((a.clientX - d.x) / d.width) - 1;
            c.y = 2 * -((a.clientY - d.y) / d.height) + 1;
            return c
        };
        f.getRay = function (a, d, c, e) {
            a = new THREE.Vector3(a, d, 0.5);
            this.projector.unprojectVector(a, e);
            return new THREE.Ray(e.position, a.subSelf(e.position).normalize())
        };
        f.getObjectsIntersectedByMouse = function (a, d, c,
        e, f) {
            return this.getRay(a, d, c, e).intersectObjects(f)
        };
        f.getObjectsIntersectedByDistanceToMouse = function (a, d, c, e, f, h) {
            return this.getRay(a, d, c, e).intersectObjects(f, h)
        };
        f.getObjectIntersectedByMouse = function (a, d, c, e, f) {
            return this.getRay(a, d, c, e).intersectObject(f)
        };
        f.getObjectIntersectedByDistanceToMouse = function (a, d, c, e, f, h) {
            return this.getRay(a, d, c, e).intersectObject(f, h)
        };
        f.getDistanceFromPoint = function (a, d, c, e) {
            a = new THREE.Vector3(a, d, 0.5);
            this.projector.unprojectVector(a, c);
            return this.getDistanceFromIntersection(c.position,
            a.subSelf(c.position).normalize(), e.matrixWorld.getPosition())
        };
        f.getDistanceFromIntersection = function (a, d, c) {
            this.v0.sub(c, a);
            this.dot = this.v0.dot(d);
            this.intersect = this.v1.add(a, this.v2.copy(d).multiplyScalar(this.dot));
            return this.distance = c.distanceTo(this.intersect)
        };
        f.toScreenXY = function (a, d, c) {
            a = this.projector.projectVector(a.clone(), d);
            d = new THREE.Vector2;
            d.x = Math.round((a.x + 1) * (c.clientWidth / 2));
            d.y = Math.round((-a.y + 1) * (c.clientHeight / 2));
            return d
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.utils.threejs"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils").Utils,
        c = WEBLAB.namespace("WEBLAB.utils.threejs").ProjectorUtils;
    if (void 0 === a.MouseInteractionHandler) a.MouseInteractionHandler = function () {
        this._projector = new THREE.Projector;
        this._mouse = new THREE.Vector2;
        this.objectSelected = this._objectClicked = this._objectIntersected = null
    }, a = a.MouseInteractionHandler.prototype = new f, a.setupMouseInteractionHandler = function (a, b, c, d, f) {
        this._camera = a;
        this._element = b;
        this._intersectionPlane = c;
        this._objects = d;
        this._isDraggable = f
    }, a._onMouseMove = function (a) {
        a.preventDefault();
        this._mouse = c.transformMouse(a, this._element);
        if (this._isDraggable && this._objectClicked) a = c.getObjectIntersectedByMouse(this._mouse.x, this._mouse.y, this._element, this._camera, this._intersectionPlane), this._objectClicked.position.copy(a[0].point), this.dispatchCustomEvent("onMouseDrag", a[0].object), this._element.style.cursor =
            "move";
        else if (a = c.getObjectsIntersectedByDistanceToMouse(this._mouse.x, this._mouse.y, this._element, this._camera, this._objects, 25), 0 < a.length) {
            if (this._objectIntersected != a[0].object) this.dispatchCustomEvent("onMouseOver", a[0].object), this._objectIntersected = a[0].object, this._element.style.cursor = "pointer"
        } else if (this._objectIntersected) this.dispatchCustomEvent("onMouseOut", this._objectIntersected), this._objectIntersected = null, this._element.style.cursor = "auto"
    }, a._onMouseUp = function (a) {
        a.preventDefault();
        a = c.getObjectsIntersectedByDistanceToMouse(this._mouse.x, this._mouse.y, this._element, this._camera, this._objects, 25);
        0 < a.length && this.dispatchCustomEvent("onMouseUp", a[0].object);
        if (this._isDraggable) this._objectClicked = null, this._element.style.cursor = "auto"
    }, a._onMouseDown = function (a) {
        a.preventDefault();
        a = c.getObjectsIntersectedByDistanceToMouse(this._mouse.x, this._mouse.y, this._element, this._camera, this._objects, 25);
        if (0 < a.length) {
            if (this.dispatchCustomEvent("onMouseDown", a[0].object), this._isDraggable) this._objectClicked = a[0].object, this.objectSelected = a[0].object, this._intersectionPlane.position.copy(this._objectClicked.position)
        } else if (this._isDraggable) this.objectSelected = this._objectClicked = null, this.dispatchCustomEvent("onMouseDown", null)
    }, a.addListeners = function () {
        this._onMouseUpListener = b.createListenerFunction(this, this._onMouseUp);
        d.addListener(this._element, "mouseup", this._onMouseUpListener);
        this._onMouseDownListener = b.createListenerFunction(this, this._onMouseDown);
        d.addListener(this._element, "mousedown",
        this._onMouseDownListener);
        this._onMouseMoveListener = b.createListenerFunction(this, this._onMouseMove);
        d.addListener(this._element, "mousemove", this._onMouseMoveListener)
    }, a.removeListeners = function () {
        d.removeListener(this._element, "mouseup", this._onMouseUpListener);
        d.removeListener(this._element, "mousedown", this._onMouseDownListener);
        d.removeListener(this._element, "mousemove", this._onMouseMoveListener)
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.generator"),
        f = WEBLAB.namespace("WEBLAB.labtags.singletons"),
        b = WEBLAB.labtags.generator.Generator;
    if (void 0 === a.LabTagsSpriteGenerator) {
        a.LabTagsSpriteGenerator = function () {
            this.generator = new b;
            this.setup(2048, 80, 10)
        };
        var d = a.LabTagsSpriteGenerator.prototype;
        d.setup = function (a, b, d) {
            this._webGLTextureMaxSize = a;
            this._labTagHeight = this._labTagWidth = b;
            this._numFrames = d;
            this._labtagSpriteWidth = this._numFrames * this._labTagWidth;
            this._labtagSpriteheight = this._labTagHeight
        };
        d.createSprite = function (a) {
            var b = document.createElement("canvas");
            b.width = this._labtagSpriteWidth;
            b.height = this._labtagSpriteheight;
            this.generator.setScale(0.22 * this._labTagWidth);
            this.generator.setCanvas(b);
            for (var a = this.generator.decodeID(a), d = 0; d < this._numFrames; d++) this.generator.drawAvatar(this.generator.shapesForSpec(a.spec), this._labTagWidth / 2 + this._labTagWidth * d, this._labtagSpriteheight / 2, 1, d / (this._numFrames - 1));
            return this.createTextureFromCanvas(b)
        };
        d.createTextureFromCanvas = function (a) {
            var b = 'data:image/gif;base64,<%= ret='';File.open("#{Rails.root}/app/assets/images/wl/wl.gif") do |f|;ret=Base64.strict_encode64(f.read);end;ret %>',
            // var b = a.toDataURL("image/png"),
                d = new Image,
                f = new THREE.Texture(d);
            d.onload = function () {
                f.needsUpdate = !0;
                f.magFilter = THREE.NearestMipMapNearestFilter;
                f.minFilter = THREE.NearestMipMapNearestFilter
            };
            d.src = b;
            a.width = a.height = 0;
            return f
        };
        d.createSpriteFromArray = function (a) {
            if (this._webGLTextureMaxSize < this._labtagSpriteWidth || this._webGLTextureMaxSize < this._labtagSpriteheight) console.log(" Error: _webGLTextureMaxSize is too small to fit a single 课件台访客 Sprite");
            else {
                var b = {
                    textures: [],
                    map: []
                }, d = Math.floor(this._webGLTextureMaxSize / this._labTagHeight),
                    f = Math.floor(this._webGLTextureMaxSize / (this._labTagWidth * this._numFrames)),
                    l = 0,
                    k = Math.ceil(a.length / (d * f)),
                    j, n, q, m, o, p;
                (new Date).getTime();
                for (m = 0; m < k; m++) {
                    var r, t, x;
                    m == k - 1 ? (n = (a.length - d * f * (k - 1)) / d, r = Math.ceil(n), t = d, x = Math.round((n - Math.floor(n)) * d), 0 === x && (x = d)) : (r = f, t = d);
                    var v = document.createElement("canvas");
                    v.width = this._labtagSpriteWidth * r;
                    v.height = this._labtagSpriteheight * (m == k - 1 && 1 == r ? x : t);
                    this.generator.setScale(0.22 * this._labTagWidth);
                    this.generator.setCanvas(v);
                    for (q = 0; q < r; q++) {
                        o = this._labTagWidth * this._numFrames * q;
                        m == k - 1 && q == r - 1 && (t = x);
                        for (n = 0; n < t; n++) {
                            j = this.generator.decodeID(a[l]);
                            p = this.generator.shapesForSpec(j.spec);
                            for (j = 0; j < this._numFrames; j++) this.generator.drawAvatar(p, o + this._labTagWidth / 2 + this._labTagWidth * j, this._labtagSpriteheight / 2 + this._labTagHeight * n, 1, 1 == this._numFrames ? 0 : j / (this._numFrames - 1));
                            j = {};
                            j.labTagId = a[l];
                            j.textureIndex = m;
                            j.row = n;
                            j.col = q;
                            j.totalRows = v.height / this._labtagSpriteheight;
                            j.maxRows = d;
                            j.totalCols = r;
                            b.map.push(j);
                            l++
                        }
                    }
                    b.textures.push(this.createTextureFromCanvas(v))
                }
                b.numFrames = this._numFrames;
                b.labTagWidth = this._labTagWidth;
                return b
            }
        };
        d.destroy = function () {};
        a.LabTagsSpriteGenerator.createSingleton = function () {
            if (void 0 === f.LabTagsSpriteGenerator) f.LabTagsSpriteGenerator = new a.LabTagsSpriteGenerator;
            return f.LabTagsSpriteGenerator
        };
        a.LabTagsSpriteGenerator.getSingleton = function () {
            return f.LabTagsSpriteGenerator
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.boids");
    if (void 0 === a.FloorGrid) a.FloorGrid = function (a, b, d) {
        THREE.Object3D.call(this);
        var c = a * b / 2,
            e = a * d / 2,
            g = new THREE.LineBasicMaterial({
                color: 4080964,
                opacity: 0.15
            }),
            h = new THREE.Geometry;
        for (i = 0; i <= b; i++) h.vertices.push(new THREE.Vector3(i * a - c, 0, -e)), h.vertices.push(new THREE.Vector3(i * a - c, 0, e));
        for (i = 0; i <= d; i++) h.vertices.push(new THREE.Vector3(-c, 0, i * a - e)), h.vertices.push(new THREE.Vector3(c, 0, i * a - e));
        this.add(new THREE.Line(h, g, THREE.LinePieces))
    }, (a.FloorGrid.prototype = new THREE.Object3D).destroy = function () {}
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.boids");
    if (void 0 === a.DebugArrow) a.DebugArrow = function (a, b) {
        THREE.Object3D.call(this);
        this.arrowScale = a || 1;
        var d = new THREE.Geometry;
        d.vertices = [new THREE.Vector3, new THREE.Vector3(20, 0, 0)];
        var c = new THREE.LineBasicMaterial({
            color: b,
            opacity: 1,
            linewidth: 1
        });
        this.line = new THREE.Line(d, c);
        this.add(this.line);
        d = new THREE.CylinderGeometry(0, 4, 14);
        c = new THREE.MeshBasicMaterial({
            color: b
        });
        d = new THREE.Mesh(d, c);
        d.rotation.set(0.5 * Math.PI, 0, 0);
        this.cone = new THREE.Object3D;
        this.cone.add(d);
        this.add(this.cone)
    }, (a.DebugArrow.prototype = new THREE.Object3D).lookAt = function (a, b) {
        var d = a.clone().multiplyScalar(this.arrowScale),
            c = (new THREE.Vector3).sub(b, d);
        c.multiplyScalar(2);
        this.line.geometry.vertices[0].position = d;
        this.line.geometry.vertices[1].position = b;
        this.line.geometry.__dirtyVertices = !0;
        this.cone.position = b;
        this.cone.lookAt(c.addSelf(d))
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.boids"),
        f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        b = WEBLAB.namespace("WEBLAB.utils").Utils;
    WEBLAB.namespace("WEBLAB.utils.threejs");
    if (void 0 === a.Path) a.Path = function (a, b, e, f) {
        this._isEditable = !0;
        this.radius = a || 20;
        this.points = [];
        this.isInitialized = !1;
        this.objects = [];
        this._container3D = new THREE.Object3D;
        this._element = f;
        if (this._isEditable) this._color = b, this._line = null
    }, a = a.Path.prototype, a.addToParent = function (a) {
        a.add(this._container3D)
    },
    a.onMouseDownIntersectionCallback = function () {
        this._objectClicked.material.color.setHex(16711680);
        for (i = 0; i < this.objects.length; i++) this.objects[i] !== this._objectClicked && this.objects[i].material.color.setHex(this._color);
        this._element.style.cursor = "move"
    }, a.onMouseDownNoIntersectionCallback = function () {
        for (i = 0; i < this.objects.length; i++) this.objects[i].material.color.setHex(this._color)
    }, a.onMouseOverCallback = function (a) {
        if (this._objectIntersected) this._objectIntersected.material.color.setHex(this._objectIntersected.currentHex),
        a.currentHex = this._objectIntersected.material.color.getHex();
        this._element.style.cursor = "pointer"
    }, a.onMouseOutCallback = function () {
        this._element.style.cursor = "auto"
    }, a.onDragCallback = function (a) {
        this._objectSelected.position.copy(a.point.subSelf(this._offset));
        this.drawLines()
    }, a.onMouseUpCallback = function () {
        this._element.style.cursor = "auto"
    }, a.addPointsFromArray = function (a) {
        this.points = a;
        if (this._isEditable) {
            for (a = 0; a < this.points.length; a++) {
                var b = new THREE.Mesh(new THREE.PlaneGeometry(15, 15), new THREE.MeshBasicMaterial({
                    color: this._color,
                    opacity: 0.15
                }));
                b.position = this.points[a];
                b.pathColor = this._color;
                b.pathIndex = a;
                b.rotation.set(Math.PI / 2, 0, 0);
                this._container3D.add(b);
                this.objects.push(b)
            }
            b = new THREE.Geometry;
            b.dynamic = !0;
            b.__dirtyVertices = !0;
            for (a = 0; a < this.points.length; a++) b.vertices.push(new THREE.Vector3);
            a = new THREE.LineBasicMaterial({
                color: this._color,
                opacity: 0.15,
                linewidth: 1,
                transparent: !0,
                alphaTest: 0.15
            });
            this._line = new THREE.Line(b, a);
            this._line.dynamic = !0;
            this._container3D.add(this._line);
            this.drawLines()
        }
        this.isInitialized = !0
    }, a._onKeyPressed = function (a) {
        switch (a.keyCode) {
            case 80:
                this.printPoints();
                break;
            case 187:
                this._objectClicked && (this._objectClicked.position.z += 50, this.drawLines());
                break;
            case 189:
                this._objectClicked && (this._objectClicked.position.z -= 50, this.drawLines())
        }
    }, a.printPoints = function () {
        for (var a = "[", b = 0; b < this.points.length; b++) a += "new THREE.Vector3(" + this.points[b].x + ", " + this.points[b].y + ", " + this.points[b].z + "), ";
        console.log(a + "]")
    }, a.drawLines = function () {
        if (this._isEditable) {
            for (var a = 0; a < this.points.length; a++) this._line.geometry.vertices[a] = this.points[a];
            this._line.geometry.__dirtyVertices = !0;
            this._line.geometry.dynamic = !0
        }
    }, a.show = function (a) {
        if (this._isEditable && this._line) {
            this._line.visible = a;
            for (i = 0; i < this.objects.length; i++) this.objects[i].visible = a
        }
    }, a.addListeners = function () {
        this._onKeyPressedListener = f.createListenerFunction(this, this._onKeyPressed);
        b.addListener(document, "keydown", this._onKeyPressedListener)
    }, a.removeListeners = function () {
        b.removeListener(document, "keydown", this._onKeyPressedListener)
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.boids"),
        f = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        b = WEBLAB.namespace("WEBLAB.utils").Utils,
        d = WEBLAB.namespace("WEBLAB.utils.threejs").MouseInteractionHandler,
        c = WEBLAB.namespace("WEBLAB.labtags.boids").Path;
    if (void 0 === a.PathsManager) a.PathsManager = function (a, b, f, l, k) {
        this.camera = f;
        this.container = l;
        f = [];
        l = [];
        f = a;
        l = b;
        this.museumPath = new c(30, 4080964, this.camera, this.container, k);
        this.museumPath.addPointsFromArray(f);
        this.onlinePath = new c(30, 4080964, this.camera, this.container, k);
        this.onlinePath.addPointsFromArray(l);
        this._pathObjects = [];
        this._pathObjects = this._pathObjects.concat(this.museumPath.objects);
        this._pathObjects = this._pathObjects.concat(this.onlinePath.objects);
        this._pathsMouseInteractionHandler = new d;
        this._pathsMouseInteractionHandler.setupMouseInteractionHandler(this.camera, this.container, k, this._pathObjects, !0)
    }, a = a.PathsManager.prototype, a.addToParent = function (a) {
        this.onlinePath.addToParent(a);
        this.museumPath.addToParent(a)
    },
    a.show = function (a) {
        this.onlinePath.show(a);
        this.museumPath.show(a)
    }, a._onPathMouseDown = function (a) {
        if (a = a.detail) {
            for (i = 0; i < this._pathObjects.length; i++) this._pathObjects[i].material.color.setHex(this._pathObjects[i].pathColor);
            a.material.color.setHex(16711680)
        } else for (i = 0; i < this._pathObjects.length; i++) this._pathObjects[i].material.color.setHex(this._pathObjects[i].pathColor)
    }, a._onPathMouseDrag = function () {
        this.drawLines()
    }, a.drawLines = function () {
        this.museumPath.drawLines();
        this.onlinePath.drawLines()
    },
    a.printPoints = function () {
        this.museumPath.printPoints();
        this.onlinePath.printPoints()
    }, a._onKeyPressed = function (a) {
        switch (a.keyCode) {
            case 80:
                this.printPoints();
                break;
            case 187:
                this._pathsMouseInteractionHandler.objectSelected && (this._pathsMouseInteractionHandler.objectSelected.position.z += 50, console.log("z", this._pathsMouseInteractionHandler.objectSelected.position.z), this.drawLines());
                break;
            case 189:
                this._pathsMouseInteractionHandler.objectSelected && (this._pathsMouseInteractionHandler.objectSelected.position.z -= 50, console.log("z", this._pathsMouseInteractionHandler.objectSelected.position.z), console.log("index", this._pathsMouseInteractionHandler.objectSelected.pathIndex), this.drawLines())
        }
    }, a.addListeners = function () {
        this._onKeyPressedListener = f.createListenerFunction(this, this._onKeyPressed);
        b.addListener(document, "keydown", this._onKeyPressedListener);
        this._pathsMouseInteractionHandler.addListeners()
    }, a.removeListeners = function () {
        b.removeListener(document, "keydown", this._onKeyPressedListener);
        this._pathsMouseInteractionHandler.removeListeners()
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.boids");
    WEBLAB.namespace("WEBLAB.common");
    if (void 0 === a.LabTagSprite) a.LabTagSprite = function (a, b, d) {
        this.textureMap = b.map[a];
        this.texture = b.textures[this.textureMap.textureIndex];
        this.sprite = new THREE.Sprite({
            map: this.texture,
            useScreenCoordinates: !1
        });
        this.labTagWidth = b.labTagWidth;
        this.numFrames = b.numFrames;
        this.currentFrame = 0;
        this.initUV();
        this.currentScale = this.setScale(d || 0.9)
    }, a = a.LabTagSprite.prototype, a.initUV = function () {
        var a = this.textureMap.totalRows,
            b = this.textureMap.row;
        this.col = this.textureMap.col;
        this.numHorizontalLabTags = this.textureMap.totalCols * this.numFrames;
        this.sprite.uvOffset.x = 1 - 1 / this.numHorizontalLabTags * (this.numHorizontalLabTags - this.col * this.numFrames);
        this.sprite.uvScale.x = 1 / this.numHorizontalLabTags;
        this.sprite.uvOffset.y = 1 - 1 / a * (a - b);
        this.sprite.uvScale.y = 1 / a;
        this.sprite.scale.x = this.sprite.scale.y = 1 / this.numHorizontalLabTags
    }, a.setScale = function (a) {
        this.currentScale = a;
        this.sprite.scale.x = this.sprite.scale.y = a / this.numHorizontalLabTags;
        return a
    }, a.updateUV = function (a) {
        if (this.currentFrame !== a && a < this.numFrames) this.currentFrame = a, this.sprite.uvOffset.x = 1 - 1 / this.numHorizontalLabTags * (this.numHorizontalLabTags - this.col * this.numFrames - this.currentFrame)
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.boids"),
        f = WEBLAB.namespace("WEBLAB.labtags.boids").DebugArrow,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.common").SiteManager,
        c = WEBLAB.namespace("WEBLAB.labtags.boids").LabTagSprite;
    THREE.Vector3.prototype.limit = function (a) {
        a < this.length() && this.setLength(a)
    };
    if (void 0 === a.LabTagBoid) a.LabTagBoid = function (a, d, f, l) {
        this.data = l;
        this.container3D = new THREE.Object3D;
        this._updateUVListener = b.createListenerFunction(this,
        this.updateUV);
        this._updateMouseOverListener = b.createListenerFunction(this, this.updateMouseOver);
        this._setDebug(!1);
        this._initSteeringParams();
        this._isFullAvatar = !1;
        this._currentFrame = 8;
        this._tweenFrame = 0;
        this.location = new THREE.Vector3;
        this.velocity = new THREE.Vector3;
        this.acceleration = new THREE.Vector3;
        this.spriteContainer = new c(a, d, f);
        this.particle = this.spriteContainer.sprite;
        this.particle.boid = this;
        this.container3D.add(this.particle);
        this._numFrames = d.numFrames;
        this.defaultScale = this._currentScale = this.spriteContainer.currentScale;
        this.blockMouseEvents = this.isConnected = this.isSlowedDown = this.isMouseOver = !1;
        this.lineLength = 0;
        this.connectionTween = (new TWEEN.Tween(this)).onUpdate(this.updateConnection.bind(this)).onComplete(this.completeConnection.bind(this)).easing(TWEEN.Easing.Cubic.EaseOut);
        this.overTween = (new TWEEN.Tween(this)).onUpdate(this._updateMouseOverListener).onComplete(this.releaseOverTween.bind(this));
        this.isSelected = this.overTweenRunning = !1;
        this.id = d.map[a].labTagId;
        this.cc = "AA";
        if (this.data) a = new THREE.Geometry, a.vertices = [new THREE.Vector3, new THREE.Vector3(20, 0, 0)], d = new THREE.LineBasicMaterial({
            color: 0,
            opacity: 1,
            linewidth: 1
        }), this.connectionLine = new THREE.Line(a, d);
        this._youMode = this.needsToUpdateLine = !1;
        this.scaleMultiplyer = 2;
        this.currentOpacity = 1
    }, a = a.LabTagBoid.prototype, a.initConnections = function (a) {
        this._circleAtlasNumFrames = 24;
        this._circleAtlasOffset = 1 / this._circleAtlasNumFrames;
        this.connectionCircle = new THREE.Sprite({
            map: a,
            useScreenCoordinates: !1,
            affectedByDistance: !1
        });
        this.connectionCircle.uvOffset.x = 1 - this._circleAtlasOffset * (this._circleAtlasNumFrames - 0);
        this.connectionCircle.uvScale.x = this._circleAtlasOffset;
        this.connectionCircle.scale.x = this.connectionCircle.scale.y = 0.017;
        this.connectionCircle.position = this.particle.position;
        this._tweenCircleFrame = this._currentCircleFrame = 0
    }, a._setScale = function (a) {
        this.spriteContainer.setScale(a)
    }, a._initSteeringParams = function () {
        this.arriveRadius = 200;
        this._pathIndex = -1;
        this._pathTargetIndex = 0;
        this.cohesionRadius = this.alignRadius = this.separateRadius = 40;
        this.wanderPosition = new THREE.Vector3;
        this.wanderSpherePosition = new THREE.Vector3;
        this.wanderTarget = new THREE.Vector3;
        this.wanderTheta = this.wanderCount = 0;
        this.wanderCount = -1;
        this.wanderPhi = 0;
        var a = 2 * Math.PI;
        this.orbitDelta = new THREE.Vector3(Math.random() * a, Math.random() * a, Math.random() * a);
        this.orbitSpeed = new THREE.Vector3(0.021, 0.021, 0.021)
    }, a.updateSteeringParams = function (a) {
        this.maxSpeed = a.maxSpeed;
        this.maxForce = a.maxForce;
        this.pathPredictionLength = a.pathPredictionLength;
        this.pathLineOffset = a.pathLineOffset;
        this.wanderRadius = a.wanderRadius;
        this.wanderDistance = a.wanderDistance;
        this.wanderChange = a.wanderChange;
        this.wanderFrequency = a.wanderFrequency
    }, a.onMouseOver = function () {
        if (!this.isMouseOver && !this.blockMouseEvents) {
            this.maxSpeed = 0;
            this.overTweenRunning && this.overTween.stop();
            this.overTweenRunning = !0;
            this.overTween.to({
                _tweenFrame: this._numFrames - 1,
                _currentScale: this.defaultScale * this.scaleMultiplyer
            }, 1E3).easing(TWEEN.Easing.Elastic.EaseOut).start();
            this.isMouseOver = !0;
            var a = 1 + Math.round(7 * Math.random());
            d.getSingleton().getSoundManager().playSound("labtags/labtag/rollover" + a, !1, 1)
        }
    }, a.onMouseOut = function () {
        if (this.isMouseOver && !this.blockMouseEvents) this.overTweenRunning && this.overTween.stop(), this.overTweenRunning = !0, this.overTween.to({
            _tweenFrame: 0,
            _currentScale: this.defaultScale
        }, 1E3).easing(TWEEN.Easing.Elastic.EaseIn).start(), this.isMouseOver = !1, this.isSelected && this._unselectAnimation(), this.isSelected = !1
    }, a.updateMouseOver = function () {
        this._setScale(this._currentScale);
        this.updateUV()
    }, a.releaseOverTween = function () {
        this.overTweenRunning = !1
    }, a.onMouseClick = function () {
        var a = 1 + Math.round(2 * Math.random());
        d.getSingleton().getSoundManager().playSound("labtags/small-btn/click" + a, !1, 1);
        this.selectAnimationRunning = !0;
        this.overTweenRunning && this.overTween.stop();
        this.isSelected = !0;
        this._selectAnimation()
    }, a._selectAnimation = function () {
        var a = this,
            b = this.defaultScale * this.scaleMultiplyer;
        (new TWEEN.Tween({
            scaleFactor: b
        })).to({
            scaleFactor: 2 * b
        }, 300).onUpdate(function () {
            a._setScale(this.scaleFactor)
        }).easing(TWEEN.Easing.Quadratic.EaseOut).delay(0).start();
        (new TWEEN.Tween({
            opacityFactor: 1
        })).to({
            opacityFactor: 0
        }, 300).onUpdate(function () {
            a.particle.opacity = this.opacityFactor
        }).onComplete(function () {
            a.selectAnimationRunning = !1
        }).easing(TWEEN.Easing.Quadratic.EaseOut).start()
    }, a._unselectAnimation = function () {
        var a = this;
        this.particle.opacity = 0;
        this.selectAnimationRunning = !0;
        (new TWEEN.Tween({
            opacityFactor: 0
        })).to({
            opacityFactor: 1
        }, 300).onUpdate(function () {
            console.log("setting opacity:", this.opacityFactor, " opacity is currently : ", a.particle.opacity);
            a.particle.opacity = this.opacityFactor
        }).onComplete(function () {
            a.selectAnimationRunning = !1
        }).easing(TWEEN.Easing.Quadratic.EaseOut).start()
    }, a.updateConnection = function () {
        this.updateCircle()
    }, a.completeConnection = function () {
        if (!this.isConnected && (this.removeCircle(), this.needsToUpdateLine)) this.container3D.remove(this.connectionLine), this.needsToUpdateLine = !1
    }, a.updateCircle = function () {
        var a = Math.floor(this._tweenCircleFrame);
        if (this._currentCircleFrame !== a && a < this._circleAtlasNumFrames - 1) this._currentCircleFrame = a, this.connectionCircle.uvOffset.x = 1 - this._circleAtlasOffset * (this._circleAtlasNumFrames - this._currentCircleFrame)
    }, a.hideCircle = function () {
        this.connectionTween.stop();
        this.connectionTween.to({
            _tweenCircleFrame: 23,
            lineLength: 0
        }, 400).start()
    }, a.removeCircle = function () {
        this.container3D.remove(this.connectionCircle)
    }, a.showCircle = function () {
        this._tweenCircleFrame = 0;
        this.container3D.add(this.connectionCircle);
        this.connectionTween.stop();
        this.connectionTween.to({
            _tweenCircleFrame: 12,
            lineLength: 1
        }, 400).start()
    },
    a.drawConnectionLine = function () {
        var a = this.particle.position.clone(),
            b = this.connectPosition.clone(),
            c = Math.min(1, Math.abs((a.z - -500) / 500)),
            d = Math.min(1, Math.abs((b.z - -500) / 500)),
            c = 40 + 25 * (1 - c),
            d = 40 + 25 * (1 - d),
            f = b.clone().subSelf(a).normalize();
        Math.atan2(b.y - a.y, b.x - a.x);
        a.addSelf(f.clone().multiplyScalar(c));
        b.subSelf(f.clone().multiplyScalar(d));
        c = b.clone().subSelf(a).multiplyScalar(this.lineLength);
        b = new THREE.Vector2(b.x, b.y);
        d = new THREE.Vector2(a.x, a.y);
        10 < b.distanceTo(d) ? (this.connectionLine.geometry.vertices[0] = a, this.connectionLine.geometry.vertices[1] = a.clone().addSelf(c)) : (this.connectionLine.geometry.vertices[0] = a, this.connectionLine.geometry.vertices[1] = a);
        this.connectionLine.geometry.verticesNeedUpdate = !0
    }, a.connect = function (a) {
        if (!this.isConnected) this.slowDown(!0, 1), this.isConnected = !0, a ? (this.connectPosition = a, this.container3D.add(this.connectionLine), this.needsToUpdateLine = !0) : this.needsToUpdateLine = !1, this.showCircle()
    }, a.disconnect = function () {
        if (this.isConnected) this.isConnected = !1, this.hideCircle()
    },
    a.slowDown = function (a, b) {
        if (!this.isMouseOver && !this.isConnected) if (a && !this.isSlowedDown) this.maxSpeed = b, this.isSlowedDown = !0;
        else if (!a && this.isSlowedDown) this.maxSpeed = b, this.isSlowedDown = !1
    }, a._setDebug = function (a) {
        this._isDebug = a;
        this._isDebugPath = !0;
        this._isDebugWander = !1;
        if (this._isDebug) {
            if (this._isDebugPath) this.pathTargetArrow = new f(1, 16711680), this.container3D.add(this.pathTargetArrow), this.pathNormalArrow = new f(1, 255), this.container3D.add(this.pathNormalArrow), this.pathSpiralArrow = new f(1,
            65433), this.container3D.add(this.pathSpiralArrow), this.pathSpiralTargetArrow = new f(1, 10092288), this.container3D.add(this.pathSpiralTargetArrow), this.pathDirArrow = new f(1, 65280), this.container3D.add(this.pathDirArrow), this.pathPredictArrow = new f(1, 0), this.container3D.add(this.pathPredictArrow);
            if (this._isDebugWander) {
                var a = new THREE.SphereGeometry(1, 10, 10),
                    b = new THREE.MeshNormalMaterial({
                        opacity: 0.5,
                        transparent: !0
                    });
                this.wanderSphere = new THREE.Mesh(a, b);
                this.container3D.add(this.wanderSphere);
                this.wanderTargetArrow = new f(1, 16711680);
                this.container3D.add(this.wanderTargetArrow)
            }
        }
    }, a.setPosition = function (a) {
        this.location = this.particle.position = a
    }, a.addToParent = function (a) {
        a.add(this.container3D)
    }, a.removeFromParent = function (a) {
        a.remove(this.container3D)
    }, a.changeFrame = function (a) {
        this.particle.uvOffset.x = 1 - 1 / this._numHorizontalLabTags * (this._numHorizontalLabTags - this._col * this._numFrames - a)
    }, a.update = function (a) {
        this.velocity.addSelf(this.acceleration);
        this.velocity.limit(this.maxSpeed);
        this.location.addSelf(this.velocity);
        if (!this.orbitMode && 0.1 < Math.abs(this.velocity.x) + Math.abs(this.velocity.y)) {
            var b = Math.atan2(-this.velocity.y, -this.velocity.x) + 0.5 * Math.PI;
            b > this.particle.rotation + Math.PI ? this.particle.rotation += 2 * Math.PI : b < this.particle.rotation - Math.PI && (this.particle.rotation -= 2 * Math.PI);
            this.particle.rotation += 0.1 * (b - this.particle.rotation)
        }
        this.acceleration.set(0, 0, 0);
        this.needsToUpdateLine && this.drawConnectionLine(a);
        if (this.connectionCircle) this.connectionCircle.position.x = this.particle.position.x, this.connectionCircle.position.y = this.particle.position.y, this.connectionCircle.position.z = this.particle.position.z - 2
    }, a.applyForce = function (a) {
        this.acceleration.addSelf(a)
    }, a.steer = function (a, b) {
        var c = new THREE.Vector3;
        c.sub(a, this.velocity);
        c.limit(this.maxForce);
        c.multiplyScalar(b || 1);
        this.applyForce(c)
    }, a.seek = function (a, b) {
        var c = new THREE.Vector3;
        c.sub(a, this.location);
        c.normalize();
        c.multiplyScalar(this.maxSpeed);
        this.steer(c, b)
    }, a.fleeing = function (a, b) {
        var c = new THREE.Vector2(0, 0);
        c.sub(this.location, a);
        c.normalize();
        c.multiplyScalar(this.maxSpeed);
        this.steer(c, b)
    }, a.arrive = function (a, b) {
        var c = new THREE.Vector3;
        c.sub(a, this.location);
        var d = c.length();
        c.normalize();
        d < this.arriveRadius ? c.multiplyScalar(this.maxSpeed * d / this.arriveRadius) : c.multiplyScalar(this.maxSpeed);
        this.steer(c, b)
    }, a.reposition = function (a, b, c) {
        if (this.location[c] > b[c] + 50) this.location.y = a.y, this.location.x = a.x, this.location.z = a.z, this.reset()
    }, a.repositionSplash = function (a, b) {
        if (this.location.y < b.y - 50) this.location.y = a.y, this.location.x = a.x, this.location.z = a.z, this.reset()
    },
    a.reset = function () {
        this.velocity.multiplyScalar(0);
        this._pathTargetIndex = 0;
        this._isFullAvatar = !1;
        this._currentFrame = 8;
        this._tweenFrame = 0;
        this.updateUV();
        this.particle.opacity = 0;
        this.isConnected && this.disconnect()
    }, a.updateUV = function () {
        this.spriteContainer.updateUV(Math.ceil(this._tweenFrame))
    }, a.primitiveToAvatar = function () {
        (new TWEEN.Tween(this)).to({
            _tweenFrame: this._numFrames - 1
        }, 2E3).onUpdate(this.updateUV).start()
    }, a.avatarToPrimitive = function () {
        (new TWEEN.Tween(this)).to({
            _tweenFrame: 0
        }, 2E3).onUpdate(this.updateUV).start()
    },
    a.depthSorting = function (a, b, c, d) {
        if (!this.selectAnimationRunning && (this.particle.opacity = (this.particle.position.z - a) / (b - a), this.currentOpacity = this.particle.opacity, this.isMouseOver)) this.particle.opacity = 1;
        if (d) if (this.particle.position.z > c) {
            if (!this._isFullAvatar) this._isFullAvatar = !0, this.primitiveToAvatar()
        } else if (this._isFullAvatar) this.avatarToPrimitive(), this._isFullAvatar = !1
    }, a.gravity = function (a) {
        this.steer(new THREE.Vector3(0, -this.maxForce * a, 0))
    }, a.wander = function (a) {
        this.wanderCount += 1;
        if (0 === this.wanderCount % this.wanderFrequency) {
            this.wanderPhi += (2 * Math.random() - 1) * this.wanderChange;
            this.wanderTheta += (2 * Math.random() - 1) * this.wanderChange;
            var b = Math.cos(this.wanderTheta) * Math.cos(this.wanderPhi) * this.wanderRadius,
                c = Math.cos(this.wanderTheta) * Math.sin(this.wanderPhi) * this.wanderRadius,
                d = Math.sin(this.wanderTheta) * this.wanderRadius;
            this.wanderPosition.set(b, c, d)
        }
        b = this.velocity.clone();
        b.normalize();
        b.setLength(this.wanderDistance);
        this.wanderSpherePosition = this.location.clone();
        this.wanderSpherePosition.addSelf(b);
        this.wanderTarget.add(this.wanderSpherePosition, this.wanderPosition);
        if (this._isDebug && this._isDebugWander) this.wanderSphere.position = this.wanderSpherePosition, this.wanderSphere.lookAt(this.location), this.wanderSphere.scale.set(this.wanderRadius, this.wanderRadius, this.wanderRadius), this.wanderTargetArrow.lookAt(this.location, this.wanderTarget);
        this.seek(this.wanderTarget, a)
    }, a.followFlowField = function (a, b) {
        var c = a.lookUp(this.location);
        c.multiplyScalar(this.maxSpeed);
        this.steer(c, b)
    }, a.getNormalPoint = function (a, b, c) {
        a = a.clone();
        a.subSelf(b);
        c = c.clone();
        c.subSelf(b);
        c.normalize();
        c.multiplyScalar(a.dot(c));
        b = b.clone();
        b.addSelf(c);
        return b
    }, a.followPath = function (a, b) {
        var c = this.velocity.clone();
        c.normalize();
        c.multiplyScalar(this.pathPredictionLength);
        var d = this.location.clone();
        d.addSelf(c);
        for (var c = 1E7, f, j, n, q = -1, m = 0, o = a.points.length - 1; m < o; m++) {
            var p = a.points[m].clone();
            n = a.points[m + 1].clone();
            var r = this.getNormalPoint(d, p, n);
            if (r.x < Math.min(p.x, n.x) || r.x > Math.max(p.x, n.x) || r.y < Math.min(p.y, n.y) || r.y > Math.max(p.y, n.y)) r = n.clone();
            var t = d.distanceTo(r);
            t < c && (q = m, c = t, f = r.clone(), n = n.clone(), n.subSelf(p), n.normalize(), n.multiplyScalar(this.pathLineOffset), j = r.clone(), j.addSelf(n))
        }
        if (c > a.radius) {
            if (this._pathIndex != q) this._pathIndex = q;
            this.seek(j, b);
            this._isDebug && this._isDebugPath && (this.pathTargetArrow.lookAt(this.location, j), this.pathNormalArrow.lookAt(d, f), this.pathDirArrow.lookAt(f, j), this.pathPredictArrow.lookAt(this.location, d))
        }
    }, a.followSequentialPath = function (a, b) {
        var c = this.velocity.clone();
        c.normalize();
        c.multiplyScalar(this.pathPredictionLength);
        var d = this.location.clone();
        d.addSelf(c);
        for (var c = 1E7, f, j, n, q = -1, m = 0, o = a.points.length - 1; m < o; m++) {
            var p = a.points[m].clone();
            n = a.points[m + 1].clone();
            var r = this.getNormalPoint(d, p, n);
            if (r.x < Math.min(p.x, n.x) || r.x > Math.max(p.x, n.x) || r.y < Math.min(p.y, n.y) || r.y > Math.max(p.y, n.y)) r = n.clone();
            var t = d.distanceTo(r);
            t < c && (q = m, c = t, f = r.clone(), n = n.clone(), n.subSelf(p), n.normalize(), n.multiplyScalar(this.pathLineOffset),
            j = r.clone(), j.addSelf(n))
        }
        if (c > a.radius) {
            if (this._pathIndex != q) this._pathIndex = q;
            q === this._pathTargetIndex ? (this.seek(j, b), this._pathIndex = q) : q === this._pathTargetIndex + 1 ? (this.seek(j, b), this._pathTargetIndex++, this._pathIndex = q) : (j = a.points[this._pathTargetIndex].clone(), n = a.points[this._pathTargetIndex + 1].clone(), c = j.clone(), f = c.clone(), n = n.clone(), n.subSelf(j), n.normalize(), n.multiplyScalar(this.pathLineOffset), j = c.clone(), j.addSelf(n), this.seek(j, b));
            this._isDebug && this._isDebugPath && (this.pathTargetArrow.lookAt(this.location,
            j), this.pathNormalArrow.lookAt(d, f), this.pathDirArrow.lookAt(f, j), this.pathPredictArrow.lookAt(this.location, d))
        }
    }, a.flock = function (a, b) {
        this.separate(a, b);
        this.align(a, b);
        this.cohesion(a, b)
    }, a.separate = function (a, b) {
        for (var c = new THREE.Vector3(0, 0, 0), d = 0, f = 0, j = a.length; f < j; f++) {
            var n = this.location.distanceTo(a[f].location);
            if (0 < n && n < this.separateRadius) {
                var q = this.location.clone();
                q.subSelf(a[f].location);
                q.normalize();
                q.divideScalar(n);
                c.addSelf(q);
                d++
            }
        }
        0 < d && (c.divideScalar(d), c.normalize(), c.multiplyScalar(this.maxSpeed),
        c = c.clone(), c.subSelf(this.velocity), c.limit(this.maxForce), this.applyForce(c.multiplyScalar(b || 1)))
    }, a.align = function (a, b) {
        for (var c = new THREE.Vector3(0, 0, 0), d = 0, f = 0, j = a.length; f < j; f++) {
            var n = this.location.distanceTo(a[f].location);
            0 < n && n < this.alignRadius && (c.addSelf(a[f].velocity), d++)
        }
        0 < d && (c.divideScalar(d), c.normalize(), c.multiplyScalar(this.maxSpeed), c = c.clone(), c.subSelf(this.velocity), c.limit(this.maxForce), this.applyForce(c.multiplyScalar(b || 1)))
    }, a.cohesion = function (a, b) {
        for (var c = new THREE.Vector3(0,
        0, 0), d = 0, f = 0, j = a.length; f < j; f++) {
            var n = this.location.distanceTo(a[f].location);
            0 < n && n < this.cohesionRadius && (c.addSelf(a[f].location), d++)
        }
        0 < d && (c.divideScalar(d), this.seek(c, b))
    }, a.orbit = function (a, b) {
        if (!this._youMode && !this.isMouseOver) {
            var c = new THREE.Vector3(Math.sin(this.particle.rotation), Math.cos(this.particle.rotation), 0);
            this.orbitMode = !0;
            this.particle.rotation += this.orbitSpeed.x;
            this.location.copy(a.clone().addSelf(c.multiplyScalar(100 * b)))
        }
    }, a.normalMode = function () {
        this.blockMouseEvents = this._youMode = !1;
        this.onMouseOut()
    }, a.youMode = function () {
        this._youMode = !0;
        this.particle.opacity = 1;
        this.onMouseOver();
        this.blockMouseEvents = !0
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.labtags.views"),
        f = WEBLAB.namespace("WEBLAB.utils.threejs").MouseInteractionHandler,
        b = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        d = WEBLAB.namespace("WEBLAB.utils.threejs").ProjectorUtils,
        c = WEBLAB.namespace("WEBLAB.utils").Utils,
        e = WEBLAB.namespace("WEBLAB.common").SiteManager,
        g = WEBLAB.namespace("WEBLAB.labtags.boids").YouLabel,
        h = WEBLAB.namespace("WEBLAB.labtags.boids").LocationOverLabel;
    if (void 0 === a.WebGLView) a.WebGLView = function (a) {
        THREE.Object3D.call(this);
        this.glManager = a;
        this.camera = this.renderContainer = this.container = null;
        this._ready = this._active = !1;
        this.boidClicked = null;
        this._boidObjects = [];
        this._intersectionPlane = new THREE.Mesh(new THREE.PlaneGeometry(4E3, 2400), new THREE.MeshBasicMaterial({
            color: 16711680
        }));
        this._intersectionPlane.visible = !1;
        this.add(this._intersectionPlane)
    }, a = a.WebGLView.prototype = new THREE.Object3D, a.setCamera = function (a) {
        this.camera = a
    }, a.setContainer = function (a) {
        this.container = a
    }, a.setRendererContainer = function (a) {
        this.renderContainer = a
    }, a.start = function () {
        this.initMouseHandlers();
        this._active = !0
    }, a.stop = function () {
        this._boidsMouseInteractionHandler.removeListeners();
        c.removeListener(this.container, "mousemove", this._onMouseMoveListener);
        this._active = !1
    }, a.onResize = function () {}, a.update = function () {}, a.startTransition = function () {}, a.updateTransition = function () {}, a.destroy = function () {}, a.initMouseHandlers = function () {
        this._boidsMouseInteractionHandler.addListeners();
        c.addListener(this.container, "mousemove", this._onMouseMoveListener)
    },
    a.initBoidsMouseInteractionHandler = function () {
        this._boidsMouseInteractionHandler = new f;
        this._boidsMouseInteractionHandler.setupMouseInteractionHandler(this.camera, this.renderContainer, this._intersectionPlane, this._boidObjects, !1);
        this._boidsMouseInteractionHandler.addEventListener("onMouseOver", b.createListenerFunction(this, this._onBoidMouseOver));
        this._boidsMouseInteractionHandler.addEventListener("onMouseOut", b.createListenerFunction(this, this._onBoidMouseOut));
        this._boidsMouseInteractionHandler.addEventListener("onMouseDown",
        b.createListenerFunction(this, this._onBoidMouseDown));
        this._onMouseMoveListener = b.createListenerFunction(this, this._onMouseMove)
    }, a._onMouseMove = function (a) {
        this.mouse = d.transformMouseOnRect(a, this.glManager.getViewport())
    }, a._onBoidMouseOver = function (a) {
        var b;
        for (b = 0; b < this._boidObjects.length; b++) this._boidObjects[b].boid.onMouseOut();
        a.detail.boid.onMouseOver();
        if (null != a.detail.boid.cc) this._overBoid = a.detail.boid, this.overLabel.setLocationText(this._overBoid.cc), this.positionOverLabel()
    }, a._onBoidMouseOut = function (a) {
        a.detail.boid.onMouseOut();
        this.overLabel.hide();
        this._overBoid = null
    }, a._onBoidMouseDown = function (a) {
        this.boidClicked = a.detail.boid;
        this.getBoidScreenPos(this.boidClicked);
        this.overLabel.hide();
        a.detail.boid.onMouseClick();
        e.getSingleton().getLabReportManager().showFullLabReport(a.detail.boid.id, a.detail.boid.cc);
        this.glManager.labtagClicked(this.boidClicked.id)
    }, a.getBoidScreenPos = function (a) {
        a = a.particle.matrixWorld.getPosition();
        a = d.toScreenXY(a, this.camera, this.renderContainer);
        this.glManager.getViewport();
        var b = 0.5 * (window.innerWidth - this.glManager.width),
            c = Math.max(0, 0.5 * (window.innerHeight - this.glManager.height));
        a.x += b;
        a.y += c;
        return a
    }, a._createYouLabel = function () {
        this._youLabel = new g(100, 16);
        this.container.appendChild(this._youLabel.domElement)
    }, a.block = function () {}, a.unblock = function () {}, a._createOverLabel = function () {
        this.overLabel = new h;
        this.container.appendChild(this.overLabel.domElement)
    }, a.positionOverLabel = function () {
        if (this._youBoid != this._overBoid) {
            var a = this.overLabel.domElement,
                b = this.getBoidScreenPos(this._overBoid);
            this.overLabel.show();
            this.overLabel.setPosition(b.x > window.innerWidth - 200 ? b.x - a.offsetWidth - 20 : b.x + 20, b.y - 10);
            this.overLabel.flipped = b.x > window.innerWidth - 200
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.home.animation"),
        f = WEBLAB.namespace("WEBLAB.common").SiteManager;
    WEBLAB.namespace("WEBLAB.labtags.singletons");
    WEBLAB.namespace("WEBLAB.utils.events");
    var b = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        d = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        c = WEBLAB.namespace("WEBLAB.common.ui").HelpPointer,
        e = WEBLAB.namespace("WEBLAB.common.ui").ReplaceableContent;
    THREE.Vector2.prototype.limit = function (a) {
        a < this.length() && this.setLength(a)
    };
    if (void 0 === a.LabTagCreation) {
        a.LabTagCreation = function (a, b) {
            this.width = a;
            this.height = b;
            this.scale = 0.01;
            this.baseAlpha = this.satelliteAlpha = this.satelliteRotation = this.colorBlend = this.globalRotation = this.satelliteOffset = 0;
            this.isAnimating = !1;
            this.position = new THREE.Vector2;
            this.maxSpeed = 4;
            this.maxForce = 0.2;
            this.ARRIVE_RADIUS = 200;
            this.wanderRadius = 100;
            this.wanderDistance = 160;
            this.wanderChange = 0.3;
            this.wanderTetha = 0;
            this.velocity = new THREE.Vector2(0, 0);
            this.acceleration = new THREE.Vector2(0, 0);
            this.movement = new THREE.Vector2(0,
            0);
            this.destination = new THREE.Vector2(0, 166);
            this.offsetY = this.radius = 0;
            this._initLabel();
            this._createProcessorIntensiveLabel()
        };
        var b = a.LabTagCreation.prototype = new b,
            g = a.LabTagCreation;
        b.getDomElement = function () {
            return this.canvas
        };
        b._initLabel = function () {
            this._label = c.create()
        };
        b._createProcessorIntensiveLabel = function () {
            this._processorIntensiveDiv = document.createElement("div");
            this._processorIntensiveDiv.style.position = "absolute";
            this._processorIntensiveDiv.style.zIndex = 3;
            var a = document.createElement("p");
            d.addClass(a, "landingProcessorIntensive");
            var b = document.createTextNode(f.getSingleton().getCopyManager().getCopy("landing/intro/processorIntensive"));
            a.appendChild(b);
            d.addClass(this._processorIntensiveDiv, "landingProcessorIntensiveLabel");
            this._processorIntensiveDiv.appendChild(a)
        };
        b.getProcessorIntensiveLabel = function () {
            return this._processorIntensiveDiv
        };
        b.showProcessorIntensive = function (a) {
            a ? d.addClass(this._processorIntensiveDiv, "landingProcessorIntensiveLabelVisible") : d.removeClass(this._processorIntensiveDiv,
                "landingProcessorIntensiveLabelVisible")
        };
        b.setProcessorIntensivePosition = function (a) {
            if (this._processorIntensiveDiv) this._processorIntensiveDiv.style.left = 0.5 * -this._processorIntensiveDiv.clientWidth + a + "px"
        };
        b.setupLabel = function () {
            this._labelElement = this._getLabelElement(f.getSingleton().getCopyManager().getCopy("landing/intro/introLabTagHeading"));
            this._contentElement = this._getContentLabelElement(f.getSingleton().getCopyManager().getCopy("landing/intro/introLabTagBody1"));
            this._label.setSize(0, -50);
            this._label.setMargins(0, 0);
            this._label.setContent(this._labelElement, null);
            this._extraBottomElement = document.createElement("div");
            this._extraBottomElement.style.setProperty("position", "absolute", "");
            this._extraBottomContent = e.create(!1, 10, 100);
            this._extraBottomElement.appendChild(this._extraBottomContent.getElement());
            this._label.getElement().appendChild(this._extraBottomElement)
        };
        b._getLabelElement = function (a) {
            var b = document.createElement("div");
            d.addClass(b, "landingLabelContainer");
            var c = document.createElement("h2"),
                a = document.createTextNode(a);
            c.appendChild(a);
            d.addClass(c, "landingLabel");
            b.appendChild(c);
            return b
        };
        b._getContentLabelElement = function (a) {
            var b = document.createElement("div");
            d.addClass(b, "landingLabelContainer");
            var c = document.createElement("p"),
                a = document.createTextNode(a);
            c.appendChild(a);
            d.addClass(c, "landingContentLabel");
            b.appendChild(c);
            return b
        };
        b._getDoubleContentLabelElement = function (a, b) {
            var c = document.createElement("div");
            d.addClass(c, "landingLabelContainer");
            var e = document.createElement("p"),
                f = document.createTextNode(a);
            e.appendChild(f);
            d.addClass(e, "landingContentLabel");
            c.appendChild(e);
            e = document.createElement("p");
            f = document.createTextNode(b);
            e.appendChild(f);
            d.addClass(e, "landingContentLabel");
            c.appendChild(e);
            return c
        };
        b.getLabel = function () {
            return this._label.getElement()
        };
        b.setPosition = function (a, b) {
            if (this.canvas) this.canvas.style.left = 0.5 * -this.width + a + "px", this.canvas.style.top = 0.5 * -this.height + b + "px", this.position.x = a, this.position.y = b, this._label.setPosition(Math.round(a + 0.2 * this.width), Math.round(b - 0.1 * this.height))
        };
        g.GLOBAL_ROTATION_LENGTH = 2E3;
        g.FADE_IN_LENGTH = 200;
        g.SCALE_IN_LENGTH = 2E3;
        g.SATELITE_DELAY = 800;
        g.SATELITE_FADE_IN_LENGTH = 200;
        g.SATELITE_ROTATION_LENGTH = 1200;
        g.SATELITE_OFFSET_LENGTH_1 = 100;
        g.SATELITE_OFFSET_LENGTH_2 = 100;
        g.COLOR_LENGTH = 100;
        g.SCALE_UP_LENGTH = 100;
        g.SCALE_DOWN_LENGTH = 100;
        g.TOTAL_ANIMATION_LENGTH = g.GLOBAL_ROTATION_LENGTH + g.SATELITE_OFFSET_LENGTH_1 + g.SATELITE_OFFSET_LENGTH_2 + g.SCALE_UP_LENGTH + g.SCALE_DOWN_LENGTH;
        b.createCanvas = function () {
            this.generator = f.getSingleton().getLabTagGeneratorManager().generator;
            this.canvas = this.generator.createCanvas(this.width, this.height);
            this.canvas.style.position = "absolute";
            this.canvas.style.zIndex = "1000"
        };
        b.start = function (a) {
            this.decoded = this.generator.decodeID(a);
            this.isAnimating = !0;
            this.scale = 0.1 * this.width;
            this.satelliteOffset = 2;
            this.globalRotation = 0.5 * -Math.PI;
            this.colorBlend = 0;
            this.satelliteRotation = 0.25 * -Math.PI;
            this.baseAlpha = this.satelliteAlpha = 0;
            this.currentPosition = this.position.clone();
            this.offsetX = 0;
            f.getSingleton().getSoundManager().playSound("home/lab-tag-creation/lab-tag-creation-a");
            (new TWEEN.Tween(this)).to({
                globalRotation: 0
            }, g.GLOBAL_ROTATION_LENGTH).easing(TWEEN.Easing.Quadratic.EaseOut).onComplete(this.startJoin.bind(this)).start();
            (new TWEEN.Tween(this)).to({
                baseAlpha: 1
            }, g.FADE_IN_LENGTH).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            (new TWEEN.Tween(this)).to({
                scale: 0.13 * this.width
            }, g.SCALE_IN_LENGTH).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            (new TWEEN.Tween(this)).to({
                satelliteAlpha: 1
            },
            g.SATELITE_FADE_IN_LENGTH).delay(g.SATELITE_DELAY).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            (new TWEEN.Tween(this)).to({
                satelliteRotation: 0
            }, g.SATELITE_ROTATION_LENGTH).delay(g.SATELITE_DELAY).easing(TWEEN.Easing.Linear.EaseNone).start();
            (new TWEEN.Tween(this)).to({
                offsetY: -50
            }, 4400).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this.updateOffset.bind(this)).start()
        };
        b.updateOffset = function () {
            this.setPosition(this.currentPosition.x + this.offsetX, this.currentPosition.y + this.offsetY)
        };
        b.startJoin = function () {
            (new TWEEN.Tween(this)).to({
                satelliteOffset: 2.1
            }, g.SATELITE_OFFSET_LENGTH_1).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            (new TWEEN.Tween(this)).to({
                satelliteOffset: 0
            }, g.SATELITE_OFFSET_LENGTH_2).delay(g.SATELITE_OFFSET_LENGTH_1).easing(TWEEN.Easing.Quadratic.EaseOut).onComplete(this.startColor.bind(this)).start()
        };
        b.startColor = function () {
            f.getSingleton().getSoundManager().playSound("home/lab-tag-creation/lab-tag-creation-b");
            (new TWEEN.Tween(this)).to({
                colorBlend: 1
            }, g.COLOR_LENGTH).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            (new TWEEN.Tween(this)).to({
                scale: 0.15 * this.width
            }, g.SCALE_UP_LENGTH).easing(TWEEN.Easing.Linear.EaseNone).onComplete(this.scaleBack.bind(this)).start()
        };
        b.scaleBack = function () {
            (new TWEEN.Tween(this)).to({
                scale: 0.13 * this.width
            }, g.SCALE_DOWN_LENGTH).easing(TWEEN.Easing.Linear.EaseNone).onComplete(this.moveLeft.bind(this)).start()
        };
        b.moveLeft = function () {
            (new TWEEN.Tween(this)).to({
                offsetX: -100
            }, 500).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this.updateOffset.bind(this)).onComplete(this.showLabel.bind(this)).start()
        };
        b.showLabel = function () {
            this._label.show();
            setTimeout(this.showContentLabel.bind(this), 500)
        };
        b.showContentLabel = function () {
            this._label.replaceContent(this._labelElement, this._contentElement);
            setTimeout(this.showExtraContentLabel.bind(this), 5E3)
        };
        b.showExtraContentLabel = function () {
            this._extraBottomElement.style.left = this._label.getBottomElement().style.left;
            this._extraBottomElement.style.top = -34 + (this._contentElement.clientHeight - 24) + "px";
            this._extraBottomContent.setWidth(this._label.getBottomContent().getWidth());
            this._extraBottomContent.replaceContent(this._getContentLabelElement(f.getSingleton().getCopyManager().getCopy("landing/intro/introLabTagBody2")));
            // setTimeout(this.hideLabel.bind(this), 3E3)
            setTimeout(function(){
              window.location.href="<%= url.coursewares_path %>";
            },3e3);
        };
        b.hideLabel = function () {
            this._label.hide();
            this._extraBottomContent.hideContent();
            (new TWEEN.Tween(this)).to({
                globalRotation: Math.PI
            }, 2500).easing(TWEEN.Easing.Quadratic.EaseIn).start();
            setTimeout(this.endCreation.bind(this), 500)
        };
        b.endCreation = function () {
            this.dispatchEvent({
                type: "creationDone"
            })
        };
        b.animateOut = function () {
            this.isAnimating = !0;
            this.movement.sub(this.destination, this.position);
            this.movementLength = this.movement.length();
            this.movement.normalize();
            this.startPosition = this.position.clone();
            this.angleUpdate = 0;
            (new TWEEN.Tween(this)).to({
                scale: 0.015 * this.width
            }, 1500).easing(TWEEN.Easing.Quadratic.EaseOut).start();
            (new TWEEN.Tween(this)).to({
                angleUpdate: Math.PI
            }, 1E3).easing(TWEEN.Easing.Linear.EaseNone).onComplete(this.decreaseAngle.bind(this)).start();
            (new TWEEN.Tween(this)).to({
                radius: this.movementLength
            },
            2E3).easing(TWEEN.Easing.Sinusoidal.EaseIn).onUpdate(this.updatePosition.bind(this)).onComplete(this.animateOutDone.bind(this)).start()
        };
        b.decreaseAngle = function () {
            (new TWEEN.Tween(this)).to({
                angleUpdate: 2 * Math.PI
            }, 1E3).easing(TWEEN.Easing.Linear.EaseNone).start()
        };
        b.updatePosition = function () {
            var a = this.movement.clone();
            a.multiplyScalar(this.radius);
            this.position = this.position.add(this.startPosition, a);
            var b = 0.1 * Math.sin(this.angleUpdate),
                a = this.position.x * Math.cos(b) - this.position.y * Math.sin(b),
                b = this.position.x * Math.sin(b) + this.position.y * Math.cos(b);
            this.setPosition(a, b)
        };
        b.animateOutDone = function () {
            this.isAnimating = !1
        };
        b.update = function () {
            if (this.isAnimating) {
                this.generator.setGlobalRotation(this.globalRotation);
                this.generator.setSatelliteRotation(this.satelliteRotation);
                this.generator.setSatelliteOffset(this.satelliteOffset);
                this.generator.setColorBlend(this.colorBlend);
                this.generator.setScale(this.scale);
                var a = this.generator.shapesForSpec(this.decoded.spec);
                this.canvas.getContext("2d").clearRect(0,
                0, this.width, this.height);
                this.generator.drawAvatar(a, 0.5 * this.width, 0.5 * this.height, this.baseAlpha, this.satelliteAlpha)
            }
        }
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.home.streams"),
        f = WEBLAB.namespace("WEBLAB.common").SiteManager,
        b = WEBLAB.namespace("WEBLAB.labtags.generator").LabTagsSpriteGenerator,
        d = WEBLAB.namespace("WEBLAB.labtags.boids").LabTagBoid,
        c = WEBLAB.namespace("WEBLAB.labtags.views").WebGLView;
    WEBLAB.namespace("WEBLAB.labtags.singletons");
    var e = WEBLAB.namespace("WEBLAB.labtags.boids").FloorGrid,
        g = WEBLAB.namespace("WEBLAB.labtags.boids").PathsManager,
        h = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions;
    WEBLAB.namespace("WEBLAB.utils.threejs");
    var l = WEBLAB.namespace("WEBLAB.utils").Utils,
        k = WEBLAB.namespace("WEBLAB.utils.threejs").ProjectorUtils,
        j = WEBLAB.namespace("WEBLAB.labtags.boids").DebugArrow;
    WEBLAB.namespace("WEBLAB.common.ui.labReport");
    WEBLAB.namespace("WEBLAB.labtags.ui");
    var n = WEBLAB.namespace("WEBLAB.common.ui").HelpPointer,
        q = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils;
    if (void 0 === a.StreamsView) a.StreamsView = function () {
        this._isDebug = !1;
        this.debugParams = {
            maxSpeed: 3,
            maxForce: 0.06,
            isAnimating: !0,
            isWander: !0,
            wanderRadius: 100,
            wanderDistance: 160,
            wanderChange: 0.3,
            pathPredictionLength: 150,
            pathLineOffset: 70,
            wanderStrength: 2.1,
            wanderFrequency: 1,
            pathStrength: 2.1,
            pathRadius: 30,
            fogStart: -1100,
            fogEnd: 220,
            fullAvatarTreshold: -350,
            controls: !1,
            logo: !0,
            paths: !0,
            camera: "normal"
        };
        this._init()
    }, a = a.StreamsView.prototype = new c, a._initGui = function () {
        this._gui = new dat.GUI({
            autoPlace: !0
        });
        this._guiParent = this._gui.domElement.parentNode;
        this._guiParent.style.zIndex = "1000";
        this._gui.remember(this.debugParams);
        var a = h.createListenerFunction(this, this._updateBoidsParams),
            b = h.createListenerFunction(this, this._updatePathParams),
            c = h.createListenerFunction(this, this._updateControls),
            d = h.createListenerFunction(this, this._updateShowPaths);
        this._gui.add(this.debugParams, "isAnimating");
        this._gui.add(this.debugParams, "maxSpeed").min(0).max(20).step(1).onChange(a);
        this._gui.add(this.debugParams, "maxForce").min(0).max(20).step(0.1).onChange(a);
        var e = this._gui.addFolder("Wander Settings");
        e.add(this.debugParams, "isWander");
        e.add(this.debugParams, "wanderStrength").min(0).max(4).step(0.1);
        e.add(this.debugParams, "wanderRadius").min(0).max(200).step(1).onChange(a);
        e.add(this.debugParams, "wanderDistance").min(0).max(300).step(1).onChange(a);
        e.add(this.debugParams, "wanderChange").min(0).max(2).step(0.01).onChange(a);
        e.add(this.debugParams, "wanderFrequency").min(1).max(10).step(1).onChange(a);
        e = this._gui.addFolder("Path Settings");
        e.add(this.debugParams, "pathStrength").min(0).max(4).step(0.1);
        e.add(this.debugParams, "pathRadius").min(0).max(100).step(1).onChange(b);
        e.add(this.debugParams, "pathPredictionLength").min(0).max(200).step(1).onChange(a);
        e.add(this.debugParams, "pathLineOffset").min(0).max(100).step(1).onChange(a);
        this._gui.add(this.debugParams, "fogStart").min(-2E3).max(500).step(1);
        this._gui.add(this.debugParams, "fogEnd").min(-500).max(500).step(1);
        this._gui.add(this.debugParams, "fullAvatarTreshold").min(-500).max(500).step(1);
        this._gui.add(this.debugParams, "controls").onChange(c);
        this._gui.add(this.debugParams, "paths").onChange(d);
        this._gui.close()
    },
    a._initLabels = function () {
        var a = this._getLabelElement(f.getSingleton().getCopyManager().getCopy("landing/intro/onlineVisitors"), !0);
        this._onlineLabel = n.create();
        this.container.appendChild(this._onlineLabel.getElement());
        this._onlineLabel.setSize(-150, -30);
        this._onlineLabel.setMargins(-5, 0);
        this._onlineLabel.setContent(a, null);
        this._onlineLabel.setPosition(500, 300);
        this._onlineLabel.isShown = !1;
        a = this._getLabelElement(f.getSingleton().getCopyManager().getCopy("landing/intro/museumVisitors"), !1);
        this._museumLabel = n.create();
        this.container.appendChild(this._museumLabel.getElement());
        this._museumLabel.setSize(150, -30);
        this._museumLabel.setMargins(-5, 0);
        this._museumLabel.setContent(a, null);
        this._museumLabel.setPosition(1E3, 300);
        this._museumLabel.isShown = !1;
        this.onResize()
    }, a._getLabelElement = function (a, b) {
        var c = document.createElement("div");
        q.addClass(c, "landingLabelContainer");
        var d = document.createElement("p"),
            e = document.createTextNode(a);
        d.appendChild(e);
        q.addClass(d, "small");
        q.addClass(d, "black");
        q.addClass(d,
            "landingLabel");
        b ? q.addClass(d, "landingOnlineLabel") : q.addClass(d, "landingMuseumLabel");
        c.appendChild(d);
        return c
    }, a._updateBoidsParams = function () {
        var a;
        for (a = 0; a < this._numOnlineBoids; a++) this._onlineBoids[a].updateSteeringParams(this.debugParams);
        for (a = 0; a < this._numMuseumBoids; a++) this._museumBoids[a].updateSteeringParams(this.debugParams)
    }, a._updateControls = function (a) {
        (this.controls.enabled = a) ? (this.camera.position = this._cameraPosition, this.camera.rotation = this._cameraRotation) : (this._cameraPosition = this.camera.position.clone(), this._cameraRotation = this.camera.rotation.clone(), this.camera.position.set(0, 0, 1E3), this.camera.rotation.set(0, 0, 0))
    }, a._updateShowPaths = function (a) {
        this._pathsManager.show(a)
    }, a._updatePathParams = function () {
        this._pathsManager.museumPath.radius = this.debugParams.pathRadius;
        this._pathsManager.onlinePath.radius = this.debugParams.pathRadius
    }, a.generateStreamsViewIds = function (a) {
        var b, c = [];
        for (b = 0; b < a; b++) c.push(Math.floor(320255973501901 * Math.random()).toString(36));
        return c
    },
    a._initBoids = function () {
        this._numOnlineBoids = this._numMuseumBoids = 175;
        this._museumBoids = [];
        this._onlineBoids = [];
        this._boidObjects = [];
        var a = this.generateStreamsViewIds(100);
        b.getSingleton().setup(2048, 80, 3);
        var a = b.getSingleton().createSpriteFromArray(a),
            c = 0,
            e, f;
        for (e = 0; e < this._numMuseumBoids; e++) f = new d(c, a, 0.4), f.setPosition(this._getRandomBirthPosition()), f.addToParent(this), this._museumBoids.push(f), this._boidObjects.push(f.particle), c++, 100 <= c && (c = 0);
        for (e = 0; e < this._numOnlineBoids; e++) f = new d(c,
        a, 0.4), f.setPosition(this._getRandomBirthPosition()), f.addToParent(this), this._onlineBoids.push(f), this._boidObjects.push(f.particle), c++, 100 <= c && (c = 0);
        this._updateBoidsParams();
        this._intersectionPlane = new THREE.Mesh(new THREE.PlaneGeometry(4E3, 2400), new THREE.MeshBasicMaterial({
            color: 16711680
        }));
        this._intersectionPlane.visible = !1;
        this.add(this._intersectionPlane);
        a = new THREE.SphereGeometry(1, 8, 8);
        c = new THREE.MeshNormalMaterial({
            opacity: 0.5,
            transparent: !0,
            wireframe: !0
        });
        this.mouseSphere = new THREE.Mesh(a,
        c);
        this.debugArrow = new j(2, 16711680)
    }, a.initControls = function (a) {
        if (this._isDebug) this.controls = new THREE.TrackballControls(a, this.container), this._cameraPosition = a.position.clone(), this._cameraRotation = a.rotation.clone(), this.controls.rotateSpeed = 1, this.controls.zoomSpeed = 2, this.controls.panSpeed = 0.8, this.controls.noZoom = !1, this.controls.noPan = !1, this.controls.staticMoving = !0, this.controls.dynamicDampingFactor = 0.3, this.controls.keys = [65, 83, 68], this.controls.enabled = !1
    }, a.initPaths = function () {
        var a = [new THREE.Vector3(-20.572487439845865, 1271.805528585024, -1250), new THREE.Vector3(180.60908723663738, 400.11859326270417, -750), new THREE.Vector3(331.050502759023, -54.77814074429868, -499.9999999999998), new THREE.Vector3(430.68320802582764, -162.74665003740938, -250), new THREE.Vector3(406.4696820446521, -147.6628141802838, 0), new THREE.Vector3(431.5564827333457, -50.01482415783802, 99.99999999999932), new THREE.Vector3(421.23596346268056, 20.00592966313524, 299.99999999999955), new THREE.Vector3(463.94703552127845, -31.437889470641082, 400), new THREE.Vector3(418.6955279499015, -192.199824263692, 549.9999999999998), new THREE.Vector3(343.10907987825476, -300.6579179804914, 700), new THREE.Vector3(504.56674529485605, -507.2768906730689, 550), new THREE.Vector3(568.8632286294102, -779.6413734946191, 500), new THREE.Vector3(568.6707004650792, -1381.6038902727016, 450), new THREE.Vector3(235.26751699183023, -1725.4663637599563, 400), new THREE.Vector3(-280.0645498952271, -1832.3809641353628, 450)],
            b = [new THREE.Vector3(20.572487439845865,
            1271.805528585024, -1250), new THREE.Vector3(-180.60908723663738, 400.11859326270417, -750), new THREE.Vector3(-331.050502759023, -54.77814074429868, -499.9999999999998), new THREE.Vector3(-430.68320802582764, -162.74665003740938, -250), new THREE.Vector3(-406.4696820446521, -147.6628141802838, 0), new THREE.Vector3(-431.5564827333457, -50.01482415783802, 99.99999999999932), new THREE.Vector3(-421.23596346268056, 20.00592966313524, 299.99999999999955), new THREE.Vector3(-463.94703552127845, -31.437889470641082, 400), new THREE.Vector3(-418.6955279499015, -192.199824263692, 549.9999999999998), new THREE.Vector3(-343.10907987825476, -300.6579179804914, 700), new THREE.Vector3(-504.56674529485605, -507.2768906730689, 550), new THREE.Vector3(-568.8632286294102, -779.6413734946191, 500), new THREE.Vector3(-568.6707004650792, -1381.6038902727016, 450), new THREE.Vector3(-235.26751699183023, -1725.4663637599563, 400), new THREE.Vector3(280.0645498952271, -1832.3809641353628, 450)],
            c, d, e;
        for (c = 0; c < a.length; c++) {
            d = 75 / ((c + 1) / 4);
            var f = a[c];
            e = 9 > c ? 0 : -400;
            f.x = d + f.x * this.container.clientWidth / 1500;
            f.y = e + f.y * this.container.clientHeight / 900
        }
        for (c = 0; c < b.length; c++) d = 75 / ((c + 1) / 4), f = b[c], e = 9 > c ? 0 : -400, f.x = -d + f.x * this.container.clientWidth / 1500, f.y = e + f.y * this.container.clientHeight / 900;
        this._pathsManager = new g(a, b, this.camera, this.container, this._intersectionPlane);
        this.maxSpeed = this.debugParams.maxSpeed;
        this.pathStrength = this.debugParams.pathStrength;
        this._updateBoidsParams();
        this.frameCount = 0;
        this.finishPathIndex = 10;
        this.startPathIndex = 0
    }, a.initBoidsMouseInteractionHandler = function () {
        this._onMouseMoveListener = h.createListenerFunction(this, this._onMouseMove)
    }, a._onMouseMove = function (a) {
        this.mouse = k.transformMouse(a, this.container)
    }, a._initGrid = function () {
        this._grid = new e(200, 100, 50);
        this._grid.position.y = -1800;
        this._grid.position.z = 0;
        this.add(this._grid)
    }, a._init = function () {
        this._isDebug && this._initGui();
        this._initBoids();
        this._initGrid()
    }, a.start = function () {
        if (this._isDebug && this.controls) this.controls.enabled = !1;
        this._pathsManager.addListeners();
        l.addListener(this.container, "mousemove", this._onMouseMoveListener)
    },
    a.stop = function () {
        if (this._isDebug && this.controls) this.controls.enabled = !1;
        this._pathsManager.removeListeners();
        l.removeListener(this.container, "mousemove", this._onMouseMoveListener)
    }, a.updateMouseIntersection = function () {
        var a = k.getObjectsIntersectedByDistanceToMouse(this.mouse.x, this.mouse.y, this.container, this.camera, this._boidObjects, 100);
        0 < a.length ? -1 == this._onlineBoids.indexOf(a[0].object.boid) ? this.showMuseumLabel() : this.showOnlineLabel() : (this.hideMuseumLabel(), this.hideOnlineLabel())
    }, a._getRandomBirthPosition = function () {
        return new THREE.Vector3(1E3 * Math.random() - 500, 1E3 * Math.random() + 1E3, -750 - 4E3 * Math.random())
    }, a._getInterpolatedValue = function (a, b) {
        return 1 + a * (b - this.frameCount) / b
    }, a.update = function () {
        if (!this._animateInFinished) this.frameCount++, 300 >= this.frameCount ? (this.debugParams.maxSpeed = this.maxSpeed * this._getInterpolatedValue(6, 300), this.debugParams.pathStrength = this.pathStrength * this._getInterpolatedValue(3, 300)) : this._animateInFinished = !0;
        var a;
        for (a = 0; a < this._numOnlineBoids; a++) {
            if (!this._animateInFinished) this._onlineBoids[a].maxSpeed = this.debugParams.maxSpeed;
            this._onlineBoids[a].followSequentialPath(this._pathsManager.onlinePath, this.debugParams.pathStrength);
            this._onlineBoids[a].depthSorting(this.debugParams.fogStart, this.debugParams.fogEnd, this.debugParams.fullAvatarTreshold, !0);
            this._onlineBoids[a].wander(this.debugParams.wanderStrength);
            this._onlineBoids[a].repositionSplash(this._pathsManager.onlinePath.points[this.startPathIndex], this._pathsManager.onlinePath.points[this.finishPathIndex]);
            this._onlineBoids[a].update()
        }
        for (a = 0; a < this._numMuseumBoids; a++) {
            if (!this._animateInFinished) this._museumBoids[a].maxSpeed = this.debugParams.maxSpeed;
            this._museumBoids[a].followSequentialPath(this._pathsManager.museumPath, this.debugParams.pathStrength);
            this._museumBoids[a].depthSorting(this.debugParams.fogStart, this.debugParams.fogEnd, this.debugParams.fullAvatarTreshold, !0);
            this._museumBoids[a].wander(this.debugParams.wanderStrength);
            this._museumBoids[a].repositionSplash(this._pathsManager.museumPath.points[this.startPathIndex], this._pathsManager.museumPath.points[this.finishPathIndex]);
            this._museumBoids[a].update()
        }
        this._isDebug && this.controls && this.controls.update()
    }, a.onResize = function () {}, a.destroy = function () {}
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.home.streams"),
        f = WEBLAB.namespace("WEBLAB.labtags.singletons"),
        b = WEBLAB.namespace("WEBLAB.home.streams").StreamsView;
    WEBLAB.namespace("WEBLAB.labtags.loading");
    var d = WEBLAB.namespace("WEBLAB.utils.events").ListenerFunctions,
        c = WEBLAB.namespace("WEBLAB.labtags.generator").LabTagsSpriteGenerator,
        e = WEBLAB.namespace("WEBLAB.home.animation").LabTagCreation,
        g = WEBLAB.namespace("WEBLAB.common").SiteManager,
        h = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        l = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds;
    WEBLAB.namespace("WEBLAB.utils.htmldom");
    if (void 0 === a.StreamsManager) a.StreamsManager = function () {
        this._isDebug = !0;
        this._webGLContentHolder = null;
        this.height = this.width = 0;
        this.renderer = this.scene = this._stats = this.camera = null;
        this._isAnimating = !1;
        this._streamsView = this._onResizeCallback = this._animateCallback = null;
        this.isTransitioning = !1
    }, h = a.StreamsManager.prototype = new h, h.setup = function (a) {
        this._webGLContentHolder = a;
        this.width = this._webGLContentHolder.clientWidth;
        this.height = this._webGLContentHolder.clientHeight;
        c.createSingleton();
        this._init()
    }, h._initCamera = function () {
        var a = this.width / this.height;
        this.camera = new THREE.PerspectiveCamera(70, a, 1, 1E4);
        this.camera.position.z = 1E3;
        this.camera.rotationAutoUpdate = !1;
        this.sideCamera = new THREE.PerspectiveCamera(70, a, 1, 1E4);
        this.sideCamera.position.x = 2E3;
        this.sideCamera.lookAt(new THREE.Vector3);
        this.currentCamera = this.camera
    }, h._initStats = function () {
        this._stats = new Stats;
        this._stats.getDomElement().style.position =
            "absolute";
        this._stats.getDomElement().style.left = "0px";
        this._stats.getDomElement().style.top = "0px";
        this._stats.getDomElement().style.zIndex = "1000"
    }, h._initLabTagCreation = function () {
        this._labTagCreation = new e(500, 500);
        this._webGLContentHolder.appendChild(this._labTagCreation.getProcessorIntensiveLabel())
    }, h._initScene = function () {
        this.scene = new THREE.Scene;
        this.scene.fog = new THREE.FogExp2(15790834, 3.0E-4);
        this.scene.add(this.camera);
        this.scene.add(this.sideCamera)
    }, h._initRenderer = function () {
        this.renderer = new THREE.WebGLRenderer({
            antialias: !0,
            clearAlpha: 0
        });
        this.renderer.setSize(this.width, this.height);
        this._webGLContentHolder.appendChild(this.renderer.domElement)
    }, h._initViews = function () {
        this._streamsView = new b(this.scene);
        this._streamsView.setCamera(this.camera);
        this._streamsView.setContainer(this._webGLContentHolder);
        this._streamsView.initPaths();
        this._streamsView.initBoidsMouseInteractionHandler();
        this._streamsView.initControls(this.camera);
        d.createListenerFunction(this, this._changeCamera);
        this.scene.add(this._streamsView);
        this._onKeyPressedListener = d.createListenerFunction(this, this._onKeyPressed)
    }, h._onKeyPressed = function (a) {
        switch (a.keyCode) {
            case 37:
                this.camera.position.z -= 5;
                break;
            case 39:
                this.camera.position.z += 5;
                break;
            case 38:
                this.camera.position.y += 5;
                break;
            case 40:
                this.camera.position.y -= 5;
                break;
            case 67:
                console.log(this.camera.position, this.camera.rotation)
        }
    }, h._changeCamera = function (a) {
        console.log("aCameraMode", a);
        switch (a) {
            case "normal":
                this.currentCamera = this.camera;
                break;
            case "rightSide":
                this.sideCamera.position.x = 1200;
                this.sideCamera.lookAt(new THREE.Vector3);
                this.currentCamera = this.sideCamera;
                break;
            case "leftSide":
                this.sideCamera.position.x = -1200, this.sideCamera.lookAt(new THREE.Vector3), this.currentCamera = this.sideCamera
        }
    }, h._init = function () {
        this._initCamera();
        this._initScene();
        this._initRenderer();
        this._initViews();
        this._initLabTagCreation();
        this._initStats();
        this._animateCallback = d.createListenerFunction(this, this.animate);
        this._onResizeCallback = d.createListenerFunction(this, this.onResize)
    }, h.start = function () {
        this._streamsView.start();
        this._isAnimating = !0;
        this._animateCallback();
        this.addListeners();
        console.log("StreamsManager start")
    }, h.stop = function () {
        this._streamsView.stop();
        this._isAnimating = !1;
        this.removeListeners();
        console.log("StreamsManager stop")
    }, h.animateOut = function (a) {
        g.getSingleton().getTracker().trackEvent(l.LANDING, "FrameRate", "Average framerate landing", this._stats.getFps());
        g.getSingleton().getTracker().trackEvent(l.LANDING, "FrameRateMin", "Min framerate landing", this._stats.getFpsMin());
        g.getSingleton().getTracker().trackEvent(l.LANDING,
            "FrameRateMax", "Max framerate landing", this._stats.getFpsMax());
        this.isTransitioning = !0;
        this._streamsView.finishPathIndex = this._streamsView._pathsManager.museumPath.points.length - 2;
        this._streamsView.startPathIndex = 8;
        this._cameraYTween = a ? (new TWEEN.Tween(this.camera.position)).to({
            y: -1150
        }, 3E3).easing(TWEEN.Easing.Sinusoidal.EaseInOut).onComplete(this.createLabTag.bind(this)).start() : (new TWEEN.Tween(this.camera.position)).to({
            y: -750
        }, 2E3).easing(TWEEN.Easing.Sinusoidal.EaseInOut).start();
        (new TWEEN.Tween(this.camera.position)).to({
            z: 1150
        },
        3E3).easing(TWEEN.Easing.Sinusoidal.EaseInOut).start()
    }, h.createLabTag = function () {
        g.getSingleton().getTracker().trackEvent(l.LANDING, "LabTagCreationStart", "课件台访客 creation animation starts");
        this._cameraYTween.stop();
        this._labTagCreation.createCanvas();
        this._webGLContentHolder.appendChild(this._labTagCreation.getDomElement());
        this._webGLContentHolder.appendChild(this._labTagCreation.getLabel());
        this._labTagCreation.showProcessorIntensive(!0);
        this._labTagCreation.setupLabel();
        this.onResize();
        this._labTagCreation.start(g.getSingleton().getLabTagId());
        this._cameraYTween = (new TWEEN.Tween(this.camera.position)).to({
            y: -1400
        }, 12200).start();
        this._labTagCreation.addEventListener("creationDone", this.animateOutDone.bind(this))
    }, h.animateOutDone = function () {
        g.getSingleton().getTracker().trackEvent(l.LANDING, "LabTagCreationComplete", "课件台访客 creation animation completed");
        this._cameraYTween.stop();
        this._labTagCreation.animateOut();
        this._cameraYTween = (new TWEEN.Tween(this.camera.position)).to({
            y: -1600
        }, 1500).delay(300).onComplete(this.startScroll.bind(this)).start()
    },
    h.startScroll = function () {
        this._labTagCreation.showProcessorIntensive(!1);
        this.dispatchEvent({
            type: "animateOutDone"
        })
    }, h.zoomIn = function () {
        this.isTransitioning || (new TWEEN.Tween(this.camera.position)).to({
            z: 1E3,
            y: -100
        }, 1500).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this._streamsView.onResize.bind(this._streamsView)).start()
    }, h.zoomOut = function () {
        this.isTransitioning || (new TWEEN.Tween(this.camera.position)).to({
            z: 1E3,
            y: 0
        }, 1500).easing(TWEEN.Easing.Quadratic.EaseOut).onUpdate(this._streamsView.onResize.bind(this._streamsView)).start()
    },
    h.animate = function () {
        this._isAnimating && requestAnimationFrame(this._animateCallback);
        this.update();
        this.render()
    }, h.update = function () {
        this._isDebug && this._stats.update();
        this._labTagCreation && this._labTagCreation.update();
        this._streamsView && this._streamsView.update()
    }, h.render = function () {
        this.renderer.render(this.scene, this.currentCamera)
    }, h.onResize = function () {
        this.camera.aspect = this._webGLContentHolder.clientWidth / this._webGLContentHolder.clientHeight;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(this._webGLContentHolder.clientWidth,
        this._webGLContentHolder.clientHeight);
        this._streamsView.onResize();
        this._labTagCreation.setPosition(0.5 * this._webGLContentHolder.clientWidth, 0.5 * this._webGLContentHolder.clientHeight);
        this._labTagCreation.setProcessorIntensivePosition(0.5 * this._webGLContentHolder.clientWidth)
    }, h.addListeners = function () {
        window.addEventListener("resize", this._onResizeCallback, !1)
    }, h.removeListeners = function () {
        window.removeEventListener("resize", this._onResizeCallback, !1)
    }, h.destroy = function () {}, a.StreamsManager.createSingleton = function (b) {
        if (void 0 === f.StreamsManager) f.StreamsManager = new a.StreamsManager, f.StreamsManager.setup(b);
        return f.StreamsManager
    }, a.StreamsManager.getSingleton = function () {
        return f.StreamsManager
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.home");
    WEBLAB.namespace("WEBLAB.utils.events");
    var f = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        b = WEBLAB.namespace("WEBLAB.common").SiteManager,
        d = WEBLAB.namespace("WEBLAB.common.sound").SoundManager,
        c = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds;
    if (void 0 === a.Experiment) a.Experiment = function (a, g) {
        // this.elementId = g;
        // this.element = document.getElementById(g);
        // this.element.setAttribute("data-index", a);
        // this.video = this.element.getElementsByTagName("video")[0];
        // this.content = this.element.getElementsByClassName("experimentContent")[0];
        // this.darkener = this.element.getElementsByClassName("experimentDarkener")[0];
        // this.videoIsPlaying = !1;
        // this._index = a;
        // this.onButtonClick = function () {
        //     var a = "common/bigButton/click" + Math.floor(3 * Math.random() + 1);
        //     b.getSingleton().getSoundManager().playSound(a);
        //     b.getSingleton().getTracker().trackEvent(c.HOME, this.elementId + "Clicked", "User clicks a Experiment button")
        // };
        // this.onButtonOver = function () {
        //     var a = "common/bigButton/rollover" + Math.floor(3 * Math.random() + 1);
        //     b.getSingleton().getSoundManager().playSound(a)
        // };
        // this.element.getElementsByClassName("clipper")[1].addEventListener("click", this.onButtonClick.bind(this));
        // this.onMuteChanged = function () {
        //     this.video.volume = 0 === b.getSingleton().getSoundManager().getCurrentVolume() ? 0 : 1
        // };
        // b.getSingleton().getSoundManager().addEventListener(d.STATE_CHANGED, this.onMuteChanged.bind(this), !1);
        // b.getSingleton().getSoundManager().forceMuteEvent();
        // this.content.style.marginTop = Math.round(this.content.offsetHeight / -2) - 8 + "px";
        // this.playVideo = function () {
        //     if (!this.videoIsPlaying) this.video.play(), this.videoIsPlaying = !0
        // };
        // this.stopVideo = function () {
        //     if (this.videoIsPlaying) this.video.pause(), this.videoIsPlaying = !1
        // };
        // this.update = function (a, c) {
        //     var d = c ? 0.6 : 0.85,
        //         e = 50.1;
        //     if (0 != b.getSingleton().getSoundManager().getCurrentVolume()) {
        //         var g = a;
        //         g <= d && (g = d);
        //         this.video.volume = this.mapRange(g, d, 1, 0, 1)
        //     }
        //     if (0.5 > a) this.darkener.style.opacity = 0.7;
        //     else if (0 < a) this.darkener.style.opacity = 0.7 - 1.4 * (a - 0.5);
        //     a > d ? (f.hasClass(this.element, "selected") || f.addClass(this.element, "selected"), this.playVideo()) : (f.hasClass(this.element, "selected") && f.removeClass(this.element, "selected"), this.stopVideo());
        //     1 > a && (e = c ? 20 + 30 * a : 100 - 50 * a);
        //     this.content.style.top = e + "%"
        // };
        // this.mapRange = function (a, b, c, d, e) {
        //     return (d + (e - d) * (a - b) / (c - b)).toFixed(1)
        // };
        return this
    }
})();
(function () {
    var a = WEBLAB.namespace("WEBLAB.home"),
        f = WEBLAB.namespace("WEBLAB.utils.events").EventDispatcher,
        b = WEBLAB.namespace("WEBLAB.utils.style").StyleUtil,
        d = WEBLAB.namespace("WEBLAB.utils.htmldom").ElementUtils,
        c = WEBLAB.namespace("WEBLAB.home.streams").StreamsManager,
        e = WEBLAB.namespace("WEBLAB.common").SiteManager,
        g = WEBLAB.namespace("WEBLAB.common").LoginManager;
    WEBLAB.namespace("WEBLAB.utils.url");
    var h = WEBLAB.namespace("WEBLAB.common.constants").TrackingIds;
    if (void 0 === a.HomePage) a.HomePage = function (c) {
        document.getElementById("sectionContentHolder").appendChild(c);
        c = ["orchestraExperiment", "periscopesExperiment", "sandRobotsExperiment", "visualiserExperiment", "webLabGalleryExperiment"];
        this.experimentsContainer = document.getElementById("experiments");
        this.scrollContainer = window;
        this.experimentHeight = window.experimentHeight || 528;
        this.menuWidth = 152;
        this.videoWidth = 1082;
        this.spaceBetweenVideos = this.topMargin = 12;
        this.totalWidth = this.menuWidth + this.videoWidth;
        this.styleUtil = b.create();
        this.selectedExperimentIndex = 0;
        this.desiredScrollTop = null;
        this.experiments = [];
        for (var d = 0; d < c.length; d++) this.experiments[d] = new a.Experiment(d, c[d]);
        this.isLabTagCreation = !1;
        // psvr begin
        if(window.psvr_really_in){
          (function($){
            $('#staticTechnologySlider').show();
            $('#orchestraButton').addClass('active');
            $('#experimentSplashContent').hide();
          })(jQuery);
        }
        // script = document.createElement( 'script' );
        // script.type = 'text/javascript';
        // script.id = 'intro_embed';
        // $('#gonna_embed')[0].appendChild(script);
        // $('#intro_embed').attr('class',"speakerdeck-embed");
        // $('#intro_embed').attr('data-id',"50021f75cf1db900020005e7");
        // $('#intro_embed').attr('async','async');
        // $('#intro_embed').attr('src',"//speakerdeck.com/assets/embed.js");
        //   $('.section').addClass('psvr_whitebackground');
        //   $('#sectionBackground').addClass('psvr_darkbackground');

        //   $('#wl_intro_ribbon').animate({opacity:1},{duration: 500});

        // psvr end
        
    }, f = a.HomePage.prototype = new f, f.update = function () {
      // if(window.psvr_no_update){
      //   return undefined;
      // }else{
        // var a = this.inWideMode() ? this.experimentHeight + this.spaceBetweenVideos : this.experimentHeight,
        //     b;
        // if (null !== this.desiredScrollTop && (b = this.scrollContainer.pageYOffset, this.scrollContainer.scrollTo(this.scrollContainer.pageXOffset, this.scrollContainer.pageYOffset + 0.2 * (this.desiredScrollTop - b)), 0 === this.scrollContainer.pageYOffset - b)) this.desiredScrollTop = null;
        // b = this.scrollContainer.pageYOffset;
        // var c = window.innerHeight,
        //     d = [],
        //     e, f, g, h;
        // this.inWideMode() && (b = b < this.topMargin ? 0 : b - this.topMargin);
        // for (var r = 0; r < this.experiments.length; r++) e = r * a - b, f = e + a - c, g = e > -a && e < c, h = !1, g && 0 > e ? d[r] = (a + e) / a : g && 0 < f ? (d[r] = (a - f) / a, h = !0) : d[r] = g ? 1 : 0, this.experiments[r].update(d[r], h);
        // this.dispatchEvent({
        //     type: "update",
        //     percentages: d
        // });        
      // }
    }, f.inWideMode = function () {
        return 1234 < window.innerWidth
    }, f.startUpdating = function () {
        this.dispatchEvent({
            type: "highlight"
        });
        var a = this;
        this.intervalId = setInterval(function () {
            a.update()
        }, 1E3 / 30)
    }, f.stopUpdating = function () {
        clearInterval(this.intervalId)
    }, f.scrollToExperiment = function (a) {
        e.getSingleton().getTracker().trackEvent(h.HOME, "ScrollToExperiment" + a, "User rollovers a experikment icon in the nav and page scrolls to show it");
        var b = this.inWideMode() ? this.experimentHeight + this.spaceBetweenVideos : this.experimentHeight;
        this.desiredScrollTop = a * b;
        this.inWideMode() && (this.desiredScrollTop += this.topMargin)
    }, f.selectExperiment = function (a) {
        if (!(0 > a || a >= this.experiments.length || this.selectedExperimentIndex == a)) d.removeClass(this.experiments[this.selectedExperimentIndex].element, "selected"), this.selectedExperimentIndex = a, d.addClass(this.experiments[this.selectedExperimentIndex].element, "selected"), this.dispatchEvent({
            type: "focus",
            index: this.selectedExperimentIndex
        })
    }, f.linkToHomePage = function () {
        e.getSingleton().getSoundManager().fadeInSound("home/background/loop-home", 3E3);
        e.getSingleton().getSoundManager().playSound("home/background/loop-home", !0, 0);
        this._addExperiments();
        d.removeClass(document.getElementById("menu"), "splash");
        d.addClass(document.getElementById("menu"), "open");
        this._setHomeFooter();
        this._setupHome();
        this.startUpdating()
    }, f._setHomeFooter = function () {
        document.getElementById("footerMenu").className = "compressed white"
    }, f.transitionToHomePage = function () {
        this._addExperiments();
        e.getSingleton().getSoundManager().fadeOutSound("home/background/loop-landing", 2E3);
        e.getSingleton().getSoundManager().playSound("home/background/loop-transition");
        e.getSingleton().getSoundManager().fadeInSound("home/background/loop-home", 2E3);
        e.getSingleton().getSoundManager().playSound("home/background/loop-home", !0, 0);
        d.removeClass(document.getElementById("menu"), "splash");
        d.addClass(document.getElementById("menu"), "open");
        this.isLabTagCreation && e.getSingleton().mainNav.animateInLabTag();
        this.isSplash = !1;
        d.addClass(this.experimentsContainer, "experimentTransitions");
        document.getElementById("experimentSplashContent").style.marginTop = -window.innerHeight + "px";
        this.experimentsContainer.style.marginTop = "0px";
        document.getElementById("centerRightFooterSwitch").classList.add("active");
        var a = document.getElementById("footerMenuScience");
        if(a){a.parentNode.removeChild(a);};
        this._setHomeFooter();
        window.setTimeout(this.onTransitionToHomePageFinished.bind(this), 2E3)
    }, f.onTransitionToHomePageFinished = function () {
        e.getSingleton().getSoundManager().stopSound("home/background/loop-landing");
        document.location.href += "#home";
        c.getSingleton().stop();
        this._setupHome();
        this.startUpdating()
    },
    f._addExperiments = function () {
        this.experimentsContainer.style.display = "block";
        this.experimentsContainer.style.visibility = "visible"
    }, f._setupHome = function () {
        e.getSingleton().getTracker().trackPageview("/" + h.HOME + "/");
        document.getElementById("experimentSplash").style.display = "none";
        var a = document.getElementsByClassName("section")[0];
        d.removeClass(a, "fitSection");
        d.addClass(a, "scrollSection")
    }, f.onEnterButtonClick = function () {
        e.getSingleton().getTracker().trackEvent(h.LANDING, "EnterButtonClicked", "Triggered when a user clicks the enter button and navigates to the Homepage");
        e.getSingleton().getSoundManager().playSound("home/enter-lab/enter-lab");
        window.location.href="<%= url.coursewares_path %>";
        d.addClass(document.getElementById("experimentSplash"), "animated");
        d.addClass(document.getElementById("experimentSplashContent"), "animated");
        document.getElementById("experimentSplashContainer").style.display = "none";
        e.getSingleton().getLoginManager().isLoggedIn ? (e.getSingleton().getTracker().trackEvent(h.LANDING, "EnterButtonReturningVisitor", "User is a returning visitor, already logged in so we skip 课件台访客 creation"), c.getSingleton().animateOut(!1),
        this.transitionToHomePage()) : (e.getSingleton().getTracker().trackEvent(h.LANDING, "EnterButtonNewVisitor", "User is a new visitor, we procees to show 课件台访客 creation"), c.getSingleton().animateOut(!0), this.isLabTagCreation = !0, c.getSingleton().addEventListener("animateOutDone", this.transitionToHomePage.bind(this)))
    }, f.onEnterButtonMouseOver = function () {
        c.getSingleton().zoomIn();
        var a = "common/bigButton/rollover" + Math.floor(3 * Math.random() + 1);
        e.getSingleton().getSoundManager().playSound(a)
    }, f.setupSplash = function () {
        e.getSingleton().getTracker().trackPageview("/" + h.LANDING + "/");
        this.isSplash = !0;
        window.addEventListener("resize", this._onResize.bind(this), !1);
        window.addEventListener("scroll", this._onResize.bind(this), !1);
        this.experimentsContainer.style.visibility = "hidden";
        this.experimentsContainer.style.marginTop = window.innerHeight + "px";
        c.createSingleton(document.getElementById("experimentSplashContent"));
        c.getSingleton().start();
        var a = document.getElementsByClassName("spinnerSmall"),
            b;
        for (b = 0; b < a.length; b++) a[b].style.display =
            "none";
        a = document.getElementsByClassName("loadingProgressCenteredContainer");
        for (b = 0; b < a.length; b++) a[b].style.display = "none";
        a = document.getElementsByClassName("splashEnter");
        for (b = 0; b < a.length; b++) a[b].style.display = "inline-block", a[b].addEventListener("click", this.onEnterButtonClick.bind(this)), a[b].addEventListener("mouseover", this.onEnterButtonMouseOver.bind(this)), a[b].addEventListener("mouseout", c.getSingleton().zoomOut.bind(c.getSingleton()));
        a = document.getElementsByClassName("splashFadeHolder");
        for (b = 0; b < a.length; b++) d.addClass(a[b], "visible", 100);
        document.getElementById("notYou").addEventListener("click", this._onSignOutClicked.bind(this), !1);
        document.getElementById("signedOut").addEventListener("click", this._onSignInClicked.bind(this), !1);
        this._updateLoginStatus();
        e.getSingleton().getSoundManager().fadeInSound("home/background/loop-landing", 15E3);
        e.getSingleton().getSoundManager().playSound("home/background/loop-landing", !0, 0)
    }, f._onResize = function () {
        if (this.isSplash) this.experimentsContainer.style.marginTop = window.innerHeight + window.pageYOffset + "px"
    }, f._updateLoginStatus = function () {
        if (e.getSingleton().getLoginManager().isLoggedIn) {
            document.getElementById("signedIn").style.display = "block";
            var a = e.getSingleton().getEmail(); - 1 !== a.indexOf("@") && (a = a.split("@")[0]);
            document.getElementById("signedInAs").innerHTML = e.getSingleton().getCopyManager().getCopy("landing/intro/signedInAs") + " " + a;
            document.getElementById("signedOut").style.display = "none"
        } else document.getElementById("signedIn").style.display = "none",
        document.getElementById("signedOut").style.display = "block"
    }, f._onSignInClicked = function () {
        e.getSingleton().getTracker().trackEvent(h.LANDING, "SignInClicked", "User clicks sign in button");
        e.getSingleton().getLoginManager().login();
        e.getSingleton().getLoginManager().addEventListener(g.STATUS_CHANGED, this._updateLoginStatus.bind(this), !1)
    }, f._onSignOutClicked = function () {
        e.getSingleton().getTracker().trackEvent(h.LANDING, "SignOutClicked", "User clicks sign out button");
        e.getSingleton().getLoginManager().logout();
        e.getSingleton().getLoginManager().addEventListener(g.STATUS_CHANGED, this._updateLoginStatus.bind(this), !1)
    }, f.showExperiments = function () {
        d.addClass(document.getElementById("experimentWrapper"), "open")
    }, f.percentVisible = function (a) {
        var a = this.experimentHeight * a - this.scrollContainer.pageYOffset,
            b = window.innerHeight - (a + this.experimentHeight);
        return percentVisible = 0 > a ? 1 - a / -this.experimentHeight : 0 > b ? 1 - b / -this.experimentHeight : 1
    }
})();
